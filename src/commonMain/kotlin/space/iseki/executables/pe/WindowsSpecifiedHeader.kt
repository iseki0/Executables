package space.iseki.executables.pe

data class WindowsSpecifiedHeader(
    val magic: PE32Magic,
    val imageBase: Address64,
    val sectionAlignment: UInt,
    val fileAlignment: UInt,
    val majorOperatingSystemVersion: UShort,
    val minorOperatingSystemVersion: UShort,
    val majorImageVersion: UShort,
    val minorImageVersion: UShort,
    val majorSubsystemVersion: UShort,
    val minorSubsystemVersion: UShort,
    val win32VersionValue: UInt,
    val sizeOfImage: UInt,
    val sizeOfHeaders: UInt,
    val checkSum: UInt,
    val subsystem: WindowsSubsystems,
    val dllCharacteristics: DllCharacteristics,
    val sizeOfStackReserve: ULong,
    val sizeOfStackCommit: ULong,
    val sizeOfHeapReserve: ULong,
    val sizeOfHeapCommit: ULong,
    val loaderFlags: UInt,
    val numbersOfRvaAndSizes: Int,
    val exportTable: DataDirectoryItem,
    val importTable: DataDirectoryItem,
    val resourceTable: DataDirectoryItem,
    val exceptionTable: DataDirectoryItem,
    val certificateTable: DataDirectoryItem,
    val baseRelocationTable: DataDirectoryItem,
    val debug: DataDirectoryItem,
    val architecture: DataDirectoryItem,
    val globalPtr: DataDirectoryItem,
    val tlsTable: DataDirectoryItem,
    val loadConfigTable: DataDirectoryItem,
    val boundImport: DataDirectoryItem,
    val iat: DataDirectoryItem,
    val delayImportDescriptor: DataDirectoryItem,
    val clrRuntimeHeader: DataDirectoryItem,
){

    override fun toString(): String {
        return """
            |WindowsSpecifiedHeader(
            |   magic = $magic,
            |   imageBase = ${if (magic == PE32Magic.PE32) Address32(imageBase.rawValue.toInt()) else imageBase },
            |   sectionAlignment = $sectionAlignment,
            |   fileAlignment = $fileAlignment,
            |   majorOperatingSystemVersion = $majorOperatingSystemVersion,
            |   minorOperatingSystemVersion = $minorOperatingSystemVersion,
            |   majorImageVersion = $majorImageVersion,
            |   minorImageVersion = $minorImageVersion,
            |   majorSubsystemVersion = $majorSubsystemVersion,
            |   minorSubsystemVersion = $minorSubsystemVersion,
            |   win32VersionValue = $win32VersionValue,
            |   sizeOfImage = $sizeOfImage,
            |   sizeOfHeaders = $sizeOfHeaders,
            |   checkSum = $checkSum,
            |   subsystem = $subsystem,
            |   dllCharacteristics = $dllCharacteristics,
            |   sizeOfStackReserve = $sizeOfStackReserve,
            |   sizeOfStackCommit = $sizeOfStackCommit,
            |   sizeOfHeapReserve = $sizeOfHeapReserve,
            |   sizeOfHeapCommit = $sizeOfHeapCommit,
            |   loaderFlags = $loaderFlags,
            |   numbersOfRvaAndSizes = $numbersOfRvaAndSizes,
            |   exportTable = $exportTable,
            |   importTable = $importTable,
            |   resourceTable = $resourceTable,
            |   exceptionTable = $exceptionTable,
            |   certificateTable = $certificateTable,
            |   baseRelocationTable = $baseRelocationTable,
            |   debug = $debug,
            |   architecture = $architecture,
            |   globalPtr = $globalPtr,
            |   tlsTable = $tlsTable,
            |   loadConfigTable = $loadConfigTable,
            |   boundImport = $boundImport,
            |   iat = $iat,
            |   delayImportDescriptor = $delayImportDescriptor,
            |   clrRuntimeHeader = $clrRuntimeHeader,
            |)
        """.trimMargin()
    }
}
