// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <space.iseki.executables:files>
abstract interface <#A: out space.iseki.executables.common/OpenedFile> space.iseki.executables.common/FileFormat { // space.iseki.executables.common/FileFormat|null[0]
    abstract fun open(space.iseki.executables.common/DataAccessor): #A // space.iseki.executables.common/FileFormat.open|open(space.iseki.executables.common.DataAccessor){}[0]
    open fun open(kotlin/ByteArray): #A // space.iseki.executables.common/FileFormat.open|open(kotlin.ByteArray){}[0]
    open fun open(kotlin/String): #A // space.iseki.executables.common/FileFormat.open|open(kotlin.String){}[0]

    final object Companion // space.iseki.executables.common/FileFormat.Companion|null[0]
}

abstract interface space.iseki.executables.common/DataAccessor : kotlin/AutoCloseable { // space.iseki.executables.common/DataAccessor|null[0]
    abstract val size // space.iseki.executables.common/DataAccessor.size|{}size[0]
        abstract fun <get-size>(): kotlin/Long // space.iseki.executables.common/DataAccessor.size.<get-size>|<get-size>(){}[0]

    abstract fun readAtMost(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/Int // space.iseki.executables.common/DataAccessor.readAtMost|readAtMost(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    open fun readAtMost(kotlin/Long, kotlin/ByteArray): kotlin/Int // space.iseki.executables.common/DataAccessor.readAtMost|readAtMost(kotlin.Long;kotlin.ByteArray){}[0]
    open fun readFully(kotlin/Long, kotlin/ByteArray) // space.iseki.executables.common/DataAccessor.readFully|readFully(kotlin.Long;kotlin.ByteArray){}[0]
    open fun readFully(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int) // space.iseki.executables.common/DataAccessor.readFully|readFully(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]

    final object Companion { // space.iseki.executables.common/DataAccessor.Companion|null[0]
        final fun checkReadBounds(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int) // space.iseki.executables.common/DataAccessor.Companion.checkReadBounds|checkReadBounds(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    }
}

abstract interface space.iseki.executables.common/ExportSymbol : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.common/ExportSymbol|null[0]
    abstract val name // space.iseki.executables.common/ExportSymbol.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // space.iseki.executables.common/ExportSymbol.name.<get-name>|<get-name>(){}[0]
}

abstract interface space.iseki.executables.common/ExportSymbolContainer { // space.iseki.executables.common/ExportSymbolContainer|null[0]
    abstract val exportSymbols // space.iseki.executables.common/ExportSymbolContainer.exportSymbols|{}exportSymbols[0]
        abstract fun <get-exportSymbols>(): kotlin.collections/List<space.iseki.executables.common/ExportSymbol> // space.iseki.executables.common/ExportSymbolContainer.exportSymbols.<get-exportSymbols>|<get-exportSymbols>(){}[0]
}

abstract interface space.iseki.executables.common/ImportSymbol : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.common/ImportSymbol|null[0]
    abstract val file // space.iseki.executables.common/ImportSymbol.file|{}file[0]
        abstract fun <get-file>(): kotlin/String // space.iseki.executables.common/ImportSymbol.file.<get-file>|<get-file>(){}[0]
    abstract val name // space.iseki.executables.common/ImportSymbol.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // space.iseki.executables.common/ImportSymbol.name.<get-name>|<get-name>(){}[0]
}

abstract interface space.iseki.executables.common/ImportSymbolContainer { // space.iseki.executables.common/ImportSymbolContainer|null[0]
    abstract val importSymbols // space.iseki.executables.common/ImportSymbolContainer.importSymbols|{}importSymbols[0]
        abstract fun <get-importSymbols>(): kotlin.collections/List<space.iseki.executables.common/ImportSymbol> // space.iseki.executables.common/ImportSymbolContainer.importSymbols.<get-importSymbols>|<get-importSymbols>(){}[0]
}

abstract interface space.iseki.executables.common/OpenedFile : kotlin/AutoCloseable { // space.iseki.executables.common/OpenedFile|null[0]
    open val rootHeaders // space.iseki.executables.common/OpenedFile.rootHeaders|{}rootHeaders[0]
        open fun <get-rootHeaders>(): kotlin.collections/Map<kotlin/String, space.iseki.executables.common/ReadableStructure> // space.iseki.executables.common/OpenedFile.rootHeaders.<get-rootHeaders>|<get-rootHeaders>(){}[0]
}

abstract interface space.iseki.executables.common/ReadableSection : space.iseki.executables.common/DataAccessor { // space.iseki.executables.common/ReadableSection|null[0]
    open val header // space.iseki.executables.common/ReadableSection.header|{}header[0]
        open fun <get-header>(): space.iseki.executables.common/ReadableStructure? // space.iseki.executables.common/ReadableSection.header.<get-header>|<get-header>(){}[0]
    open val name // space.iseki.executables.common/ReadableSection.name|{}name[0]
        open fun <get-name>(): kotlin/String? // space.iseki.executables.common/ReadableSection.name.<get-name>|<get-name>(){}[0]
    open val size // space.iseki.executables.common/ReadableSection.size|{}size[0]
        open fun <get-size>(): kotlin/Long // space.iseki.executables.common/ReadableSection.size.<get-size>|<get-size>(){}[0]

    open fun close() // space.iseki.executables.common/ReadableSection.close|close(){}[0]
    open fun readBytes(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int) // space.iseki.executables.common/ReadableSection.readBytes|readBytes(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]

    final object Companion { // space.iseki.executables.common/ReadableSection.Companion|null[0]
        final fun checkReadBytesBounds(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int) // space.iseki.executables.common/ReadableSection.Companion.checkReadBytesBounds|checkReadBytesBounds(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    }
}

abstract interface space.iseki.executables.common/ReadableSectionContainer { // space.iseki.executables.common/ReadableSectionContainer|null[0]
    abstract val sections // space.iseki.executables.common/ReadableSectionContainer.sections|{}sections[0]
        abstract fun <get-sections>(): kotlin.collections/List<space.iseki.executables.common/ReadableSection> // space.iseki.executables.common/ReadableSectionContainer.sections.<get-sections>|<get-sections>(){}[0]
}

abstract interface space.iseki.executables.common/ReadableStructure { // space.iseki.executables.common/ReadableStructure|null[0]
    abstract val fields // space.iseki.executables.common/ReadableStructure.fields|{}fields[0]
        abstract fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.common/ReadableStructure.fields.<get-fields>|<get-fields>(){}[0]
}

abstract interface space.iseki.executables.common/VirtualMemoryReadable { // space.iseki.executables.common/VirtualMemoryReadable|null[0]
    abstract fun virtualMemory(): space.iseki.executables.common/DataAccessor // space.iseki.executables.common/VirtualMemoryReadable.virtualMemory|virtualMemory(){}[0]
}

abstract interface space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/MachoLoadCommand|null[0]
    abstract val size // space.iseki.executables.macho.lc/MachoLoadCommand.size|{}size[0]
        abstract fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/MachoLoadCommand.size.<get-size>|<get-size>(){}[0]
    abstract val type // space.iseki.executables.macho.lc/MachoLoadCommand.type|{}type[0]
        abstract fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/MachoLoadCommand.type.<get-type>|<get-type>(){}[0]
}

abstract interface space.iseki.executables.pe/ResourceNode { // space.iseki.executables.pe/ResourceNode|null[0]
    abstract val dataRva // space.iseki.executables.pe/ResourceNode.dataRva|{}dataRva[0]
        abstract fun <get-dataRva>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/ResourceNode.dataRva.<get-dataRva>|<get-dataRva>(){}[0]
    abstract val id // space.iseki.executables.pe/ResourceNode.id|{}id[0]
        abstract fun <get-id>(): kotlin/UInt // space.iseki.executables.pe/ResourceNode.id.<get-id>|<get-id>(){}[0]
    abstract val name // space.iseki.executables.pe/ResourceNode.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // space.iseki.executables.pe/ResourceNode.name.<get-name>|<get-name>(){}[0]
    open val codePage // space.iseki.executables.pe/ResourceNode.codePage|{}codePage[0]
        open fun <get-codePage>(): space.iseki.executables.pe/CodePage // space.iseki.executables.pe/ResourceNode.codePage.<get-codePage>|<get-codePage>(){}[0]
    open val size // space.iseki.executables.pe/ResourceNode.size|{}size[0]
        open fun <get-size>(): kotlin/UInt // space.iseki.executables.pe/ResourceNode.size.<get-size>|<get-size>(){}[0]

    abstract fun getPEFile(): space.iseki.executables.pe/PEFile // space.iseki.executables.pe/ResourceNode.getPEFile|getPEFile(){}[0]
    abstract fun isFile(): kotlin/Boolean // space.iseki.executables.pe/ResourceNode.isFile|isFile(){}[0]
    open fun isDirectory(): kotlin/Boolean // space.iseki.executables.pe/ResourceNode.isDirectory|isDirectory(){}[0]
    open fun listChildren(): kotlin.collections/List<space.iseki.executables.pe/ResourceNode> // space.iseki.executables.pe/ResourceNode.listChildren|listChildren(){}[0]
    open fun readAllBytes(): kotlin/ByteArray // space.iseki.executables.pe/ResourceNode.readAllBytes|readAllBytes(){}[0]
}

abstract interface space.iseki.executables.pe/ResourceWalkEntry { // space.iseki.executables.pe/ResourceWalkEntry|null[0]
    abstract val node // space.iseki.executables.pe/ResourceWalkEntry.node|{}node[0]
        abstract fun <get-node>(): space.iseki.executables.pe/ResourceNode // space.iseki.executables.pe/ResourceWalkEntry.node.<get-node>|<get-node>(){}[0]
    abstract val nodePath // space.iseki.executables.pe/ResourceWalkEntry.nodePath|{}nodePath[0]
        abstract fun <get-nodePath>(): kotlin.collections/List<space.iseki.executables.pe/ResourceNode> // space.iseki.executables.pe/ResourceWalkEntry.nodePath.<get-nodePath>|<get-nodePath>(){}[0]
}

final class space.iseki.executables.common/AccessDeniedException : space.iseki.executables.common/IOException { // space.iseki.executables.common/AccessDeniedException|null[0]
    constructor <init>(kotlin/String?) // space.iseki.executables.common/AccessDeniedException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?) // space.iseki.executables.common/AccessDeniedException.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?){}[0]
}

final class space.iseki.executables.common/EOFException : space.iseki.executables.common/IOException { // space.iseki.executables.common/EOFException|null[0]
    constructor <init>(kotlin/String?) // space.iseki.executables.common/EOFException.<init>|<init>(kotlin.String?){}[0]
}

final class space.iseki.executables.common/NoSuchFileException : space.iseki.executables.common/IOException { // space.iseki.executables.common/NoSuchFileException|null[0]
    constructor <init>(kotlin/String?) // space.iseki.executables.common/NoSuchFileException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?) // space.iseki.executables.common/NoSuchFileException.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?){}[0]
}

final class space.iseki.executables.elf/ElfEhdr : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.elf/ElfEhdr|null[0]
    final val eEhsize // space.iseki.executables.elf/ElfEhdr.eEhsize|{}eEhsize[0]
        final fun <get-eEhsize>(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.eEhsize.<get-eEhsize>|<get-eEhsize>(){}[0]
    final val eEntry // space.iseki.executables.elf/ElfEhdr.eEntry|{}eEntry[0]
        final fun <get-eEntry>(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfEhdr.eEntry.<get-eEntry>|<get-eEntry>(){}[0]
    final val eFlags // space.iseki.executables.elf/ElfEhdr.eFlags|{}eFlags[0]
        final fun <get-eFlags>(): kotlin/UInt // space.iseki.executables.elf/ElfEhdr.eFlags.<get-eFlags>|<get-eFlags>(){}[0]
    final val eMachine // space.iseki.executables.elf/ElfEhdr.eMachine|{}eMachine[0]
        final fun <get-eMachine>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfEhdr.eMachine.<get-eMachine>|<get-eMachine>(){}[0]
    final val ePhentsize // space.iseki.executables.elf/ElfEhdr.ePhentsize|{}ePhentsize[0]
        final fun <get-ePhentsize>(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.ePhentsize.<get-ePhentsize>|<get-ePhentsize>(){}[0]
    final val ePhnum // space.iseki.executables.elf/ElfEhdr.ePhnum|{}ePhnum[0]
        final fun <get-ePhnum>(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.ePhnum.<get-ePhnum>|<get-ePhnum>(){}[0]
    final val ePhoff // space.iseki.executables.elf/ElfEhdr.ePhoff|{}ePhoff[0]
        final fun <get-ePhoff>(): kotlin/ULong // space.iseki.executables.elf/ElfEhdr.ePhoff.<get-ePhoff>|<get-ePhoff>(){}[0]
    final val eShentsize // space.iseki.executables.elf/ElfEhdr.eShentsize|{}eShentsize[0]
        final fun <get-eShentsize>(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.eShentsize.<get-eShentsize>|<get-eShentsize>(){}[0]
    final val eShnum // space.iseki.executables.elf/ElfEhdr.eShnum|{}eShnum[0]
        final fun <get-eShnum>(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.eShnum.<get-eShnum>|<get-eShnum>(){}[0]
    final val eShoff // space.iseki.executables.elf/ElfEhdr.eShoff|{}eShoff[0]
        final fun <get-eShoff>(): kotlin/ULong // space.iseki.executables.elf/ElfEhdr.eShoff.<get-eShoff>|<get-eShoff>(){}[0]
    final val eShstrndx // space.iseki.executables.elf/ElfEhdr.eShstrndx|{}eShstrndx[0]
        final fun <get-eShstrndx>(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.eShstrndx.<get-eShstrndx>|<get-eShstrndx>(){}[0]
    final val eType // space.iseki.executables.elf/ElfEhdr.eType|{}eType[0]
        final fun <get-eType>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfEhdr.eType.<get-eType>|<get-eType>(){}[0]
    final val eVersion // space.iseki.executables.elf/ElfEhdr.eVersion|{}eVersion[0]
        final fun <get-eVersion>(): kotlin/UInt // space.iseki.executables.elf/ElfEhdr.eVersion.<get-eVersion>|<get-eVersion>(){}[0]
    final val fields // space.iseki.executables.elf/ElfEhdr.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.elf/ElfEhdr.fields.<get-fields>|<get-fields>(){}[0]
    final val is64Bit // space.iseki.executables.elf/ElfEhdr.is64Bit|{}is64Bit[0]
        final fun <get-is64Bit>(): kotlin/Boolean // space.iseki.executables.elf/ElfEhdr.is64Bit.<get-is64Bit>|<get-is64Bit>(){}[0]

    final fun component1(): kotlin/Boolean // space.iseki.executables.elf/ElfEhdr.component1|component1(){}[0]
    final fun component10(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.component10|component10(){}[0]
    final fun component11(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.component11|component11(){}[0]
    final fun component12(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.component12|component12(){}[0]
    final fun component13(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.component13|component13(){}[0]
    final fun component14(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.component14|component14(){}[0]
    final fun component2(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfEhdr.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfEhdr.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.elf/ElfEhdr.component4|component4(){}[0]
    final fun component5(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfEhdr.component5|component5(){}[0]
    final fun component6(): kotlin/ULong // space.iseki.executables.elf/ElfEhdr.component6|component6(){}[0]
    final fun component7(): kotlin/ULong // space.iseki.executables.elf/ElfEhdr.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.elf/ElfEhdr.component8|component8(){}[0]
    final fun component9(): kotlin/UShort // space.iseki.executables.elf/ElfEhdr.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfEhdr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfEhdr.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfEhdr.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfEhdr> { // space.iseki.executables.elf/ElfEhdr.$serializer|null[0]
        final val descriptor // space.iseki.executables.elf/ElfEhdr.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfEhdr.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfEhdr.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfEhdr // space.iseki.executables.elf/ElfEhdr.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfEhdr) // space.iseki.executables.elf/ElfEhdr.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfEhdr){}[0]
    }

    final object Companion { // space.iseki.executables.elf/ElfEhdr.Companion|null[0]
        final fun parse(kotlin/ByteArray, kotlin/Int, space.iseki.executables.elf/ElfIdentification): space.iseki.executables.elf/ElfEhdr // space.iseki.executables.elf/ElfEhdr.Companion.parse|parse(kotlin.ByteArray;kotlin.Int;space.iseki.executables.elf.ElfIdentification){}[0]
        final fun parse32(kotlin/ByteArray, kotlin/Int, space.iseki.executables.elf/ElfIdentification): space.iseki.executables.elf/ElfEhdr // space.iseki.executables.elf/ElfEhdr.Companion.parse32|parse32(kotlin.ByteArray;kotlin.Int;space.iseki.executables.elf.ElfIdentification){}[0]
        final fun parse64(kotlin/ByteArray, kotlin/Int, space.iseki.executables.elf/ElfIdentification): space.iseki.executables.elf/ElfEhdr // space.iseki.executables.elf/ElfEhdr.Companion.parse64|parse64(kotlin.ByteArray;kotlin.Int;space.iseki.executables.elf.ElfIdentification){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfEhdr> // space.iseki.executables.elf/ElfEhdr.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.elf/ElfExportSymbol : space.iseki.executables.common/ExportSymbol { // space.iseki.executables.elf/ElfExportSymbol|null[0]
    final val binding // space.iseki.executables.elf/ElfExportSymbol.binding|{}binding[0]
        final fun <get-binding>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfExportSymbol.binding.<get-binding>|<get-binding>(){}[0]
    final val fields // space.iseki.executables.elf/ElfExportSymbol.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.elf/ElfExportSymbol.fields.<get-fields>|<get-fields>(){}[0]
    final val name // space.iseki.executables.elf/ElfExportSymbol.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.elf/ElfExportSymbol.name.<get-name>|<get-name>(){}[0]
    final val size // space.iseki.executables.elf/ElfExportSymbol.size|{}size[0]
        final fun <get-size>(): kotlin/ULong // space.iseki.executables.elf/ElfExportSymbol.size.<get-size>|<get-size>(){}[0]
    final val type // space.iseki.executables.elf/ElfExportSymbol.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfExportSymbol.type.<get-type>|<get-type>(){}[0]
    final val value // space.iseki.executables.elf/ElfExportSymbol.value|{}value[0]
        final fun <get-value>(): kotlin/ULong // space.iseki.executables.elf/ElfExportSymbol.value.<get-value>|<get-value>(){}[0]
    final val visibility // space.iseki.executables.elf/ElfExportSymbol.visibility|{}visibility[0]
        final fun <get-visibility>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfExportSymbol.visibility.<get-visibility>|<get-visibility>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.elf/ElfExportSymbol.component1|component1(){}[0]
    final fun component2(): kotlin/ULong // space.iseki.executables.elf/ElfExportSymbol.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // space.iseki.executables.elf/ElfExportSymbol.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfExportSymbol.component4|component4(){}[0]
    final fun component5(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfExportSymbol.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfExportSymbol.component6|component6(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfExportSymbol.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfExportSymbol.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfExportSymbol.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfExportSymbol> { // space.iseki.executables.elf/ElfExportSymbol.$serializer|null[0]
        final val descriptor // space.iseki.executables.elf/ElfExportSymbol.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfExportSymbol.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfExportSymbol.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfExportSymbol // space.iseki.executables.elf/ElfExportSymbol.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfExportSymbol) // space.iseki.executables.elf/ElfExportSymbol.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfExportSymbol){}[0]
    }

    final object Companion { // space.iseki.executables.elf/ElfExportSymbol.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfExportSymbol> // space.iseki.executables.elf/ElfExportSymbol.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.elf/ElfFile : kotlin/AutoCloseable, space.iseki.executables.common/ExportSymbolContainer, space.iseki.executables.common/ImportSymbolContainer, space.iseki.executables.common/OpenedFile, space.iseki.executables.common/ReadableSectionContainer, space.iseki.executables.common/VirtualMemoryReadable { // space.iseki.executables.elf/ElfFile|null[0]
    final val ehdr // space.iseki.executables.elf/ElfFile.ehdr|{}ehdr[0]
        final fun <get-ehdr>(): space.iseki.executables.elf/ElfEhdr // space.iseki.executables.elf/ElfFile.ehdr.<get-ehdr>|<get-ehdr>(){}[0]
    final val exportSymbols // space.iseki.executables.elf/ElfFile.exportSymbols|{}exportSymbols[0]
        final fun <get-exportSymbols>(): kotlin.collections/List<space.iseki.executables.common/ExportSymbol> // space.iseki.executables.elf/ElfFile.exportSymbols.<get-exportSymbols>|<get-exportSymbols>(){}[0]
    final val ident // space.iseki.executables.elf/ElfFile.ident|{}ident[0]
        final fun <get-ident>(): space.iseki.executables.elf/ElfIdentification // space.iseki.executables.elf/ElfFile.ident.<get-ident>|<get-ident>(){}[0]
    final val importLibraries // space.iseki.executables.elf/ElfFile.importLibraries|{}importLibraries[0]
        final fun <get-importLibraries>(): kotlin.collections/List<kotlin/String> // space.iseki.executables.elf/ElfFile.importLibraries.<get-importLibraries>|<get-importLibraries>(){}[0]
    final val importSymbols // space.iseki.executables.elf/ElfFile.importSymbols|{}importSymbols[0]
        final fun <get-importSymbols>(): kotlin.collections/List<space.iseki.executables.common/ImportSymbol> // space.iseki.executables.elf/ElfFile.importSymbols.<get-importSymbols>|<get-importSymbols>(){}[0]
    final val programHeaders // space.iseki.executables.elf/ElfFile.programHeaders|{}programHeaders[0]
        final fun <get-programHeaders>(): kotlin.collections/List<space.iseki.executables.elf/ElfPhdr> // space.iseki.executables.elf/ElfFile.programHeaders.<get-programHeaders>|<get-programHeaders>(){}[0]
    final val rootHeaders // space.iseki.executables.elf/ElfFile.rootHeaders|{}rootHeaders[0]
        final fun <get-rootHeaders>(): kotlin.collections/Map<kotlin/String, space.iseki.executables.common/ReadableStructure> // space.iseki.executables.elf/ElfFile.rootHeaders.<get-rootHeaders>|<get-rootHeaders>(){}[0]
    final val sectionHeaders // space.iseki.executables.elf/ElfFile.sectionHeaders|{}sectionHeaders[0]
        final fun <get-sectionHeaders>(): kotlin.collections/List<space.iseki.executables.elf/ElfShdr> // space.iseki.executables.elf/ElfFile.sectionHeaders.<get-sectionHeaders>|<get-sectionHeaders>(){}[0]
    final val sections // space.iseki.executables.elf/ElfFile.sections|{}sections[0]
        final fun <get-sections>(): kotlin.collections/List<space.iseki.executables.elf/ElfFile.Section> // space.iseki.executables.elf/ElfFile.sections.<get-sections>|<get-sections>(){}[0]
    final val symbols // space.iseki.executables.elf/ElfFile.symbols|{}symbols[0]
        final fun <get-symbols>(): kotlin.collections/List<space.iseki.executables.elf/ElfFile.ElfSymbolInfo> // space.iseki.executables.elf/ElfFile.symbols.<get-symbols>|<get-symbols>(){}[0]

    final fun close() // space.iseki.executables.elf/ElfFile.close|close(){}[0]
    final fun virtualMemory(): space.iseki.executables.common/DataAccessor // space.iseki.executables.elf/ElfFile.virtualMemory|virtualMemory(){}[0]

    final class ElfSymbolInfo { // space.iseki.executables.elf/ElfFile.ElfSymbolInfo|null[0]
        constructor <init>(kotlin/String, kotlin/ULong, kotlin/ULong, space.iseki.executables.elf/ElfSymBinding, space.iseki.executables.elf/ElfSymType, space.iseki.executables.elf/ElfSymVisibility, kotlin/UShort, kotlin/Boolean) // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.<init>|<init>(kotlin.String;kotlin.ULong;kotlin.ULong;space.iseki.executables.elf.ElfSymBinding;space.iseki.executables.elf.ElfSymType;space.iseki.executables.elf.ElfSymVisibility;kotlin.UShort;kotlin.Boolean){}[0]

        final val binding // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.binding|{}binding[0]
            final fun <get-binding>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.binding.<get-binding>|<get-binding>(){}[0]
        final val isUndefined // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.isUndefined|{}isUndefined[0]
            final fun <get-isUndefined>(): kotlin/Boolean // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.isUndefined.<get-isUndefined>|<get-isUndefined>(){}[0]
        final val name // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.name|{}name[0]
            final fun <get-name>(): kotlin/String // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.name.<get-name>|<get-name>(){}[0]
        final val sectionIndex // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.sectionIndex|{}sectionIndex[0]
            final fun <get-sectionIndex>(): kotlin/UShort // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.sectionIndex.<get-sectionIndex>|<get-sectionIndex>(){}[0]
        final val size // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.size|{}size[0]
            final fun <get-size>(): kotlin/ULong // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.size.<get-size>|<get-size>(){}[0]
        final val type // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.type|{}type[0]
            final fun <get-type>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.type.<get-type>|<get-type>(){}[0]
        final val value // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.value|{}value[0]
            final fun <get-value>(): kotlin/ULong // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.value.<get-value>|<get-value>(){}[0]
        final val visibility // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.visibility|{}visibility[0]
            final fun <get-visibility>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.visibility.<get-visibility>|<get-visibility>(){}[0]

        final fun component1(): kotlin/String // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component1|component1(){}[0]
        final fun component2(): kotlin/ULong // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component2|component2(){}[0]
        final fun component3(): kotlin/ULong // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component3|component3(){}[0]
        final fun component4(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component4|component4(){}[0]
        final fun component5(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component5|component5(){}[0]
        final fun component6(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component6|component6(){}[0]
        final fun component7(): kotlin/UShort // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component7|component7(){}[0]
        final fun component8(): kotlin/Boolean // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.component8|component8(){}[0]
        final fun copy(kotlin/String = ..., kotlin/ULong = ..., kotlin/ULong = ..., space.iseki.executables.elf/ElfSymBinding = ..., space.iseki.executables.elf/ElfSymType = ..., space.iseki.executables.elf/ElfSymVisibility = ..., kotlin/UShort = ..., kotlin/Boolean = ...): space.iseki.executables.elf/ElfFile.ElfSymbolInfo // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.copy|copy(kotlin.String;kotlin.ULong;kotlin.ULong;space.iseki.executables.elf.ElfSymBinding;space.iseki.executables.elf.ElfSymType;space.iseki.executables.elf.ElfSymVisibility;kotlin.UShort;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfFile.ElfSymbolInfo> { // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.$serializer|null[0]
            final val descriptor // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfFile.ElfSymbolInfo // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfFile.ElfSymbolInfo) // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfFile.ElfSymbolInfo){}[0]
        }

        final object Companion { // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfFile.ElfSymbolInfo> // space.iseki.executables.elf/ElfFile.ElfSymbolInfo.Companion.serializer|serializer(){}[0]
        }
    }

    final inner class Section : space.iseki.executables.common/ReadableSection { // space.iseki.executables.elf/ElfFile.Section|null[0]
        final val header // space.iseki.executables.elf/ElfFile.Section.header|{}header[0]
            final fun <get-header>(): space.iseki.executables.common/ReadableStructure // space.iseki.executables.elf/ElfFile.Section.header.<get-header>|<get-header>(){}[0]
        final val name // space.iseki.executables.elf/ElfFile.Section.name|{}name[0]
            final fun <get-name>(): kotlin/String? // space.iseki.executables.elf/ElfFile.Section.name.<get-name>|<get-name>(){}[0]
        final val sectionHeader // space.iseki.executables.elf/ElfFile.Section.sectionHeader|{}sectionHeader[0]
            final fun <get-sectionHeader>(): space.iseki.executables.elf/ElfShdr // space.iseki.executables.elf/ElfFile.Section.sectionHeader.<get-sectionHeader>|<get-sectionHeader>(){}[0]
        final val size // space.iseki.executables.elf/ElfFile.Section.size|{}size[0]
            final fun <get-size>(): kotlin/Long // space.iseki.executables.elf/ElfFile.Section.size.<get-size>|<get-size>(){}[0]

        final fun readAtMost(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/Int // space.iseki.executables.elf/ElfFile.Section.readAtMost|readAtMost(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.elf/ElfFile.Section.toString|toString(){}[0]
    }

    final object Companion : space.iseki.executables.common/FileFormat<space.iseki.executables.elf/ElfFile> { // space.iseki.executables.elf/ElfFile.Companion|null[0]
        final fun open(space.iseki.executables.common/DataAccessor): space.iseki.executables.elf/ElfFile // space.iseki.executables.elf/ElfFile.Companion.open|open(space.iseki.executables.common.DataAccessor){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.elf/ElfFile.Companion.toString|toString(){}[0]
    }
}

final class space.iseki.executables.elf/ElfIdentification : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.elf/ElfIdentification|null[0]
    final val eiAbiVersion // space.iseki.executables.elf/ElfIdentification.eiAbiVersion|{}eiAbiVersion[0]
        final fun <get-eiAbiVersion>(): kotlin/UByte // space.iseki.executables.elf/ElfIdentification.eiAbiVersion.<get-eiAbiVersion>|<get-eiAbiVersion>(){}[0]
    final val eiClass // space.iseki.executables.elf/ElfIdentification.eiClass|{}eiClass[0]
        final fun <get-eiClass>(): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfIdentification.eiClass.<get-eiClass>|<get-eiClass>(){}[0]
    final val eiData // space.iseki.executables.elf/ElfIdentification.eiData|{}eiData[0]
        final fun <get-eiData>(): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfIdentification.eiData.<get-eiData>|<get-eiData>(){}[0]
    final val eiOsAbi // space.iseki.executables.elf/ElfIdentification.eiOsAbi|{}eiOsAbi[0]
        final fun <get-eiOsAbi>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfIdentification.eiOsAbi.<get-eiOsAbi>|<get-eiOsAbi>(){}[0]
    final val eiVersion // space.iseki.executables.elf/ElfIdentification.eiVersion|{}eiVersion[0]
        final fun <get-eiVersion>(): kotlin/UByte // space.iseki.executables.elf/ElfIdentification.eiVersion.<get-eiVersion>|<get-eiVersion>(){}[0]
    final val fields // space.iseki.executables.elf/ElfIdentification.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.elf/ElfIdentification.fields.<get-fields>|<get-fields>(){}[0]

    final fun component1(): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfIdentification.component1|component1(){}[0]
    final fun component2(): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfIdentification.component2|component2(){}[0]
    final fun component3(): kotlin/UByte // space.iseki.executables.elf/ElfIdentification.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfIdentification.component4|component4(){}[0]
    final fun component5(): kotlin/UByte // space.iseki.executables.elf/ElfIdentification.component5|component5(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfIdentification.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfIdentification.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfIdentification.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfIdentification> { // space.iseki.executables.elf/ElfIdentification.$serializer|null[0]
        final val descriptor // space.iseki.executables.elf/ElfIdentification.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfIdentification.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfIdentification.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfIdentification // space.iseki.executables.elf/ElfIdentification.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfIdentification) // space.iseki.executables.elf/ElfIdentification.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfIdentification){}[0]
    }

    final object Companion { // space.iseki.executables.elf/ElfIdentification.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfIdentification> // space.iseki.executables.elf/ElfIdentification.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.elf/ElfImportSymbol : space.iseki.executables.common/ImportSymbol { // space.iseki.executables.elf/ElfImportSymbol|null[0]
    constructor <init>(kotlin/String, kotlin/String, space.iseki.executables.elf/ElfSymBinding, space.iseki.executables.elf/ElfSymType) // space.iseki.executables.elf/ElfImportSymbol.<init>|<init>(kotlin.String;kotlin.String;space.iseki.executables.elf.ElfSymBinding;space.iseki.executables.elf.ElfSymType){}[0]

    final val binding // space.iseki.executables.elf/ElfImportSymbol.binding|{}binding[0]
        final fun <get-binding>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfImportSymbol.binding.<get-binding>|<get-binding>(){}[0]
    final val fields // space.iseki.executables.elf/ElfImportSymbol.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.elf/ElfImportSymbol.fields.<get-fields>|<get-fields>(){}[0]
    final val file // space.iseki.executables.elf/ElfImportSymbol.file|{}file[0]
        final fun <get-file>(): kotlin/String // space.iseki.executables.elf/ElfImportSymbol.file.<get-file>|<get-file>(){}[0]
    final val name // space.iseki.executables.elf/ElfImportSymbol.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.elf/ElfImportSymbol.name.<get-name>|<get-name>(){}[0]
    final val type // space.iseki.executables.elf/ElfImportSymbol.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfImportSymbol.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.elf/ElfImportSymbol.component1|component1(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.elf/ElfImportSymbol.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfImportSymbol.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfImportSymbol.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., space.iseki.executables.elf/ElfSymBinding = ..., space.iseki.executables.elf/ElfSymType = ...): space.iseki.executables.elf/ElfImportSymbol // space.iseki.executables.elf/ElfImportSymbol.copy|copy(kotlin.String;kotlin.String;space.iseki.executables.elf.ElfSymBinding;space.iseki.executables.elf.ElfSymType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfImportSymbol.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfImportSymbol.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfImportSymbol.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfImportSymbol> { // space.iseki.executables.elf/ElfImportSymbol.$serializer|null[0]
        final val descriptor // space.iseki.executables.elf/ElfImportSymbol.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfImportSymbol.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfImportSymbol.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfImportSymbol // space.iseki.executables.elf/ElfImportSymbol.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfImportSymbol) // space.iseki.executables.elf/ElfImportSymbol.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfImportSymbol){}[0]
    }

    final object Companion { // space.iseki.executables.elf/ElfImportSymbol.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfImportSymbol> // space.iseki.executables.elf/ElfImportSymbol.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.elf/ElfPhdr : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.elf/ElfPhdr|null[0]
    final val fields // space.iseki.executables.elf/ElfPhdr.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.elf/ElfPhdr.fields.<get-fields>|<get-fields>(){}[0]
    final val is64Bit // space.iseki.executables.elf/ElfPhdr.is64Bit|{}is64Bit[0]
        final fun <get-is64Bit>(): kotlin/Boolean // space.iseki.executables.elf/ElfPhdr.is64Bit.<get-is64Bit>|<get-is64Bit>(){}[0]
    final val pAlign // space.iseki.executables.elf/ElfPhdr.pAlign|{}pAlign[0]
        final fun <get-pAlign>(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.pAlign.<get-pAlign>|<get-pAlign>(){}[0]
    final val pFilesz // space.iseki.executables.elf/ElfPhdr.pFilesz|{}pFilesz[0]
        final fun <get-pFilesz>(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.pFilesz.<get-pFilesz>|<get-pFilesz>(){}[0]
    final val pFlags // space.iseki.executables.elf/ElfPhdr.pFlags|{}pFlags[0]
        final fun <get-pFlags>(): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPhdr.pFlags.<get-pFlags>|<get-pFlags>(){}[0]
    final val pMemsz // space.iseki.executables.elf/ElfPhdr.pMemsz|{}pMemsz[0]
        final fun <get-pMemsz>(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.pMemsz.<get-pMemsz>|<get-pMemsz>(){}[0]
    final val pOffset // space.iseki.executables.elf/ElfPhdr.pOffset|{}pOffset[0]
        final fun <get-pOffset>(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.pOffset.<get-pOffset>|<get-pOffset>(){}[0]
    final val pPaddr // space.iseki.executables.elf/ElfPhdr.pPaddr|{}pPaddr[0]
        final fun <get-pPaddr>(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfPhdr.pPaddr.<get-pPaddr>|<get-pPaddr>(){}[0]
    final val pType // space.iseki.executables.elf/ElfPhdr.pType|{}pType[0]
        final fun <get-pType>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPhdr.pType.<get-pType>|<get-pType>(){}[0]
    final val pVaddr // space.iseki.executables.elf/ElfPhdr.pVaddr|{}pVaddr[0]
        final fun <get-pVaddr>(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfPhdr.pVaddr.<get-pVaddr>|<get-pVaddr>(){}[0]

    final fun component1(): kotlin/Boolean // space.iseki.executables.elf/ElfPhdr.component1|component1(){}[0]
    final fun component2(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPhdr.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPhdr.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.component4|component4(){}[0]
    final fun component5(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfPhdr.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfPhdr.component6|component6(){}[0]
    final fun component7(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.component7|component7(){}[0]
    final fun component8(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.component8|component8(){}[0]
    final fun component9(): kotlin/ULong // space.iseki.executables.elf/ElfPhdr.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfPhdr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfPhdr.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfPhdr.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfPhdr> { // space.iseki.executables.elf/ElfPhdr.$serializer|null[0]
        final val descriptor // space.iseki.executables.elf/ElfPhdr.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfPhdr.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfPhdr.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfPhdr // space.iseki.executables.elf/ElfPhdr.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfPhdr) // space.iseki.executables.elf/ElfPhdr.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfPhdr){}[0]
    }

    final object Companion { // space.iseki.executables.elf/ElfPhdr.Companion|null[0]
        final fun parse(kotlin/ByteArray, kotlin/Int, space.iseki.executables.elf/ElfIdentification, kotlin/Boolean): space.iseki.executables.elf/ElfPhdr // space.iseki.executables.elf/ElfPhdr.Companion.parse|parse(kotlin.ByteArray;kotlin.Int;space.iseki.executables.elf.ElfIdentification;kotlin.Boolean){}[0]
        final fun parse32(kotlin/ByteArray, kotlin/Int, space.iseki.executables.elf/ElfIdentification): space.iseki.executables.elf/ElfPhdr // space.iseki.executables.elf/ElfPhdr.Companion.parse32|parse32(kotlin.ByteArray;kotlin.Int;space.iseki.executables.elf.ElfIdentification){}[0]
        final fun parse64(kotlin/ByteArray, kotlin/Int, space.iseki.executables.elf/ElfIdentification): space.iseki.executables.elf/ElfPhdr // space.iseki.executables.elf/ElfPhdr.Companion.parse64|parse64(kotlin.ByteArray;kotlin.Int;space.iseki.executables.elf.ElfIdentification){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfPhdr> // space.iseki.executables.elf/ElfPhdr.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.elf/ElfShdr : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.elf/ElfShdr|null[0]
    final val fields // space.iseki.executables.elf/ElfShdr.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.elf/ElfShdr.fields.<get-fields>|<get-fields>(){}[0]
    final val is64Bit // space.iseki.executables.elf/ElfShdr.is64Bit|{}is64Bit[0]
        final fun <get-is64Bit>(): kotlin/Boolean // space.iseki.executables.elf/ElfShdr.is64Bit.<get-is64Bit>|<get-is64Bit>(){}[0]
    final val name // space.iseki.executables.elf/ElfShdr.name|{}name[0]
        final fun <get-name>(): kotlin/String? // space.iseki.executables.elf/ElfShdr.name.<get-name>|<get-name>(){}[0]
    final val shAddr // space.iseki.executables.elf/ElfShdr.shAddr|{}shAddr[0]
        final fun <get-shAddr>(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfShdr.shAddr.<get-shAddr>|<get-shAddr>(){}[0]
    final val shAddralign // space.iseki.executables.elf/ElfShdr.shAddralign|{}shAddralign[0]
        final fun <get-shAddralign>(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.shAddralign.<get-shAddralign>|<get-shAddralign>(){}[0]
    final val shEntsize // space.iseki.executables.elf/ElfShdr.shEntsize|{}shEntsize[0]
        final fun <get-shEntsize>(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.shEntsize.<get-shEntsize>|<get-shEntsize>(){}[0]
    final val shFlags // space.iseki.executables.elf/ElfShdr.shFlags|{}shFlags[0]
        final fun <get-shFlags>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfShdr.shFlags.<get-shFlags>|<get-shFlags>(){}[0]
    final val shInfo // space.iseki.executables.elf/ElfShdr.shInfo|{}shInfo[0]
        final fun <get-shInfo>(): kotlin/UInt // space.iseki.executables.elf/ElfShdr.shInfo.<get-shInfo>|<get-shInfo>(){}[0]
    final val shLink // space.iseki.executables.elf/ElfShdr.shLink|{}shLink[0]
        final fun <get-shLink>(): kotlin/UInt // space.iseki.executables.elf/ElfShdr.shLink.<get-shLink>|<get-shLink>(){}[0]
    final val shName // space.iseki.executables.elf/ElfShdr.shName|{}shName[0]
        final fun <get-shName>(): kotlin/UInt // space.iseki.executables.elf/ElfShdr.shName.<get-shName>|<get-shName>(){}[0]
    final val shOffset // space.iseki.executables.elf/ElfShdr.shOffset|{}shOffset[0]
        final fun <get-shOffset>(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.shOffset.<get-shOffset>|<get-shOffset>(){}[0]
    final val shSize // space.iseki.executables.elf/ElfShdr.shSize|{}shSize[0]
        final fun <get-shSize>(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.shSize.<get-shSize>|<get-shSize>(){}[0]
    final val shType // space.iseki.executables.elf/ElfShdr.shType|{}shType[0]
        final fun <get-shType>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfShdr.shType.<get-shType>|<get-shType>(){}[0]

    final fun component1(): kotlin/Boolean // space.iseki.executables.elf/ElfShdr.component1|component1(){}[0]
    final fun component10(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.component10|component10(){}[0]
    final fun component11(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.component11|component11(){}[0]
    final fun component12(): kotlin/String? // space.iseki.executables.elf/ElfShdr.component12|component12(){}[0]
    final fun component2(): kotlin/UInt // space.iseki.executables.elf/ElfShdr.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfShdr.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfShdr.component4|component4(){}[0]
    final fun component5(): space.iseki.executables.common/Address64 // space.iseki.executables.elf/ElfShdr.component5|component5(){}[0]
    final fun component6(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.component6|component6(){}[0]
    final fun component7(): kotlin/ULong // space.iseki.executables.elf/ElfShdr.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.elf/ElfShdr.component8|component8(){}[0]
    final fun component9(): kotlin/UInt // space.iseki.executables.elf/ElfShdr.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfShdr.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfShdr.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfShdr.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.elf/ElfShdr> { // space.iseki.executables.elf/ElfShdr.$serializer|null[0]
        final val descriptor // space.iseki.executables.elf/ElfShdr.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.elf/ElfShdr.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.elf/ElfShdr.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.elf/ElfShdr // space.iseki.executables.elf/ElfShdr.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.elf/ElfShdr) // space.iseki.executables.elf/ElfShdr.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.elf.ElfShdr){}[0]
    }

    final object Companion { // space.iseki.executables.elf/ElfShdr.Companion|null[0]
        final fun parse(kotlin/ByteArray, kotlin/Int, kotlin/Boolean, kotlin/Boolean): space.iseki.executables.elf/ElfShdr // space.iseki.executables.elf/ElfShdr.Companion.parse|parse(kotlin.ByteArray;kotlin.Int;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun parse32(kotlin/ByteArray, kotlin/Int, kotlin/Boolean): space.iseki.executables.elf/ElfShdr // space.iseki.executables.elf/ElfShdr.Companion.parse32|parse32(kotlin.ByteArray;kotlin.Int;kotlin.Boolean){}[0]
        final fun parse64(kotlin/ByteArray, kotlin/Int, kotlin/Boolean): space.iseki.executables.elf/ElfShdr // space.iseki.executables.elf/ElfShdr.Companion.parse64|parse64(kotlin.ByteArray;kotlin.Int;kotlin.Boolean){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfShdr> // space.iseki.executables.elf/ElfShdr.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.macho.lc/DylibCommand : space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/DylibCommand|null[0]
    final val compatibilityVersion // space.iseki.executables.macho.lc/DylibCommand.compatibilityVersion|{}compatibilityVersion[0]
        final fun <get-compatibilityVersion>(): space.iseki.executables.macho/PackedVersion // space.iseki.executables.macho.lc/DylibCommand.compatibilityVersion.<get-compatibilityVersion>|<get-compatibilityVersion>(){}[0]
    final val currentVersion // space.iseki.executables.macho.lc/DylibCommand.currentVersion|{}currentVersion[0]
        final fun <get-currentVersion>(): space.iseki.executables.macho/PackedVersion // space.iseki.executables.macho.lc/DylibCommand.currentVersion.<get-currentVersion>|<get-currentVersion>(){}[0]
    final val name // space.iseki.executables.macho.lc/DylibCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.macho.lc/DylibCommand.name.<get-name>|<get-name>(){}[0]
    final val size // space.iseki.executables.macho.lc/DylibCommand.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/DylibCommand.size.<get-size>|<get-size>(){}[0]
    final val timestamp // space.iseki.executables.macho.lc/DylibCommand.timestamp|{}timestamp[0]
        final fun <get-timestamp>(): space.iseki.executables.common/TimeDateStamp32 // space.iseki.executables.macho.lc/DylibCommand.timestamp.<get-timestamp>|<get-timestamp>(){}[0]
    final val type // space.iseki.executables.macho.lc/DylibCommand.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/DylibCommand.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho.lc/DylibCommand.component1|component1(){}[0]
    final fun component2(): space.iseki.executables.common/TimeDateStamp32 // space.iseki.executables.macho.lc/DylibCommand.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.macho/PackedVersion // space.iseki.executables.macho.lc/DylibCommand.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.macho/PackedVersion // space.iseki.executables.macho.lc/DylibCommand.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.macho.lc/DylibCommand.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/DylibCommand.component6|component6(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/DylibCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/DylibCommand.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/DylibCommand.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/DylibCommand.Companion|null[0]
}

final class space.iseki.executables.macho.lc/DylinkerCommand : space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/DylinkerCommand|null[0]
    final val name // space.iseki.executables.macho.lc/DylinkerCommand.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.macho.lc/DylinkerCommand.name.<get-name>|<get-name>(){}[0]
    final val size // space.iseki.executables.macho.lc/DylinkerCommand.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/DylinkerCommand.size.<get-size>|<get-size>(){}[0]
    final val type // space.iseki.executables.macho.lc/DylinkerCommand.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/DylinkerCommand.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho.lc/DylinkerCommand.component1|component1(){}[0]
    final fun component2(): kotlin/UInt // space.iseki.executables.macho.lc/DylinkerCommand.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/DylinkerCommand.component3|component3(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/DylinkerCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/DylinkerCommand.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/DylinkerCommand.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/DylinkerCommand.Companion|null[0]
}

final class space.iseki.executables.macho.lc/InvalidLoaderCommandException : kotlin/Exception { // space.iseki.executables.macho.lc/InvalidLoaderCommandException|null[0]
    constructor <init>(space.iseki.executables.macho/MachoLoadCommandType, kotlin/String) // space.iseki.executables.macho.lc/InvalidLoaderCommandException.<init>|<init>(space.iseki.executables.macho.MachoLoadCommandType;kotlin.String){}[0]

    final val cmd // space.iseki.executables.macho.lc/InvalidLoaderCommandException.cmd|{}cmd[0]
        final fun <get-cmd>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/InvalidLoaderCommandException.cmd.<get-cmd>|<get-cmd>(){}[0]
}

final class space.iseki.executables.macho.lc/Section { // space.iseki.executables.macho.lc/Section|null[0]
    final val addr // space.iseki.executables.macho.lc/Section.addr|{}addr[0]
        final fun <get-addr>(): space.iseki.executables.common/Address32 // space.iseki.executables.macho.lc/Section.addr.<get-addr>|<get-addr>(){}[0]
    final val align // space.iseki.executables.macho.lc/Section.align|{}align[0]
        final fun <get-align>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.align.<get-align>|<get-align>(){}[0]
    final val flags // space.iseki.executables.macho.lc/Section.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho.lc/MachoSectionFlag // space.iseki.executables.macho.lc/Section.flags.<get-flags>|<get-flags>(){}[0]
    final val nreloc // space.iseki.executables.macho.lc/Section.nreloc|{}nreloc[0]
        final fun <get-nreloc>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.nreloc.<get-nreloc>|<get-nreloc>(){}[0]
    final val offset // space.iseki.executables.macho.lc/Section.offset|{}offset[0]
        final fun <get-offset>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.offset.<get-offset>|<get-offset>(){}[0]
    final val reloff // space.iseki.executables.macho.lc/Section.reloff|{}reloff[0]
        final fun <get-reloff>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.reloff.<get-reloff>|<get-reloff>(){}[0]
    final val reserved1 // space.iseki.executables.macho.lc/Section.reserved1|{}reserved1[0]
        final fun <get-reserved1>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.reserved1.<get-reserved1>|<get-reserved1>(){}[0]
    final val reserved2 // space.iseki.executables.macho.lc/Section.reserved2|{}reserved2[0]
        final fun <get-reserved2>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.reserved2.<get-reserved2>|<get-reserved2>(){}[0]
    final val sectName // space.iseki.executables.macho.lc/Section.sectName|{}sectName[0]
        final fun <get-sectName>(): kotlin/String // space.iseki.executables.macho.lc/Section.sectName.<get-sectName>|<get-sectName>(){}[0]
    final val segName // space.iseki.executables.macho.lc/Section.segName|{}segName[0]
        final fun <get-segName>(): kotlin/String // space.iseki.executables.macho.lc/Section.segName.<get-segName>|<get-segName>(){}[0]
    final val size // space.iseki.executables.macho.lc/Section.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/Section.size.<get-size>|<get-size>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho.lc/Section.component1|component1(){}[0]
    final fun component10(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component10|component10(){}[0]
    final fun component11(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component11|component11(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.macho.lc/Section.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.common/Address32 // space.iseki.executables.macho.lc/Section.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component5|component5(){}[0]
    final fun component6(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component6|component6(){}[0]
    final fun component7(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho.lc/Section.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.macho.lc/MachoSectionFlag // space.iseki.executables.macho.lc/Section.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/Section.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/Section.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/Section.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/Section.Companion|null[0]
}

final class space.iseki.executables.macho.lc/Section64 { // space.iseki.executables.macho.lc/Section64|null[0]
    final val addr // space.iseki.executables.macho.lc/Section64.addr|{}addr[0]
        final fun <get-addr>(): space.iseki.executables.common/Address64 // space.iseki.executables.macho.lc/Section64.addr.<get-addr>|<get-addr>(){}[0]
    final val align // space.iseki.executables.macho.lc/Section64.align|{}align[0]
        final fun <get-align>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.align.<get-align>|<get-align>(){}[0]
    final val flags // space.iseki.executables.macho.lc/Section64.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho.lc/MachoSectionFlag // space.iseki.executables.macho.lc/Section64.flags.<get-flags>|<get-flags>(){}[0]
    final val nreloc // space.iseki.executables.macho.lc/Section64.nreloc|{}nreloc[0]
        final fun <get-nreloc>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.nreloc.<get-nreloc>|<get-nreloc>(){}[0]
    final val offset // space.iseki.executables.macho.lc/Section64.offset|{}offset[0]
        final fun <get-offset>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.offset.<get-offset>|<get-offset>(){}[0]
    final val reloff // space.iseki.executables.macho.lc/Section64.reloff|{}reloff[0]
        final fun <get-reloff>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.reloff.<get-reloff>|<get-reloff>(){}[0]
    final val reserved1 // space.iseki.executables.macho.lc/Section64.reserved1|{}reserved1[0]
        final fun <get-reserved1>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.reserved1.<get-reserved1>|<get-reserved1>(){}[0]
    final val reserved2 // space.iseki.executables.macho.lc/Section64.reserved2|{}reserved2[0]
        final fun <get-reserved2>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.reserved2.<get-reserved2>|<get-reserved2>(){}[0]
    final val reserved3 // space.iseki.executables.macho.lc/Section64.reserved3|{}reserved3[0]
        final fun <get-reserved3>(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.reserved3.<get-reserved3>|<get-reserved3>(){}[0]
    final val sectName // space.iseki.executables.macho.lc/Section64.sectName|{}sectName[0]
        final fun <get-sectName>(): kotlin/String // space.iseki.executables.macho.lc/Section64.sectName.<get-sectName>|<get-sectName>(){}[0]
    final val segName // space.iseki.executables.macho.lc/Section64.segName|{}segName[0]
        final fun <get-segName>(): kotlin/String // space.iseki.executables.macho.lc/Section64.segName.<get-segName>|<get-segName>(){}[0]
    final val size // space.iseki.executables.macho.lc/Section64.size|{}size[0]
        final fun <get-size>(): kotlin/ULong // space.iseki.executables.macho.lc/Section64.size.<get-size>|<get-size>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho.lc/Section64.component1|component1(){}[0]
    final fun component10(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component10|component10(){}[0]
    final fun component11(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component11|component11(){}[0]
    final fun component12(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component12|component12(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.macho.lc/Section64.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.common/Address64 // space.iseki.executables.macho.lc/Section64.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // space.iseki.executables.macho.lc/Section64.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component5|component5(){}[0]
    final fun component6(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component6|component6(){}[0]
    final fun component7(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho.lc/Section64.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.macho.lc/MachoSectionFlag // space.iseki.executables.macho.lc/Section64.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/Section64.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/Section64.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/Section64.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/Section64.Companion|null[0]
}

final class space.iseki.executables.macho.lc/SegmentCommand : space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/SegmentCommand|null[0]
    final val fileOff // space.iseki.executables.macho.lc/SegmentCommand.fileOff|{}fileOff[0]
        final fun <get-fileOff>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.fileOff.<get-fileOff>|<get-fileOff>(){}[0]
    final val fileSize // space.iseki.executables.macho.lc/SegmentCommand.fileSize|{}fileSize[0]
        final fun <get-fileSize>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.fileSize.<get-fileSize>|<get-fileSize>(){}[0]
    final val flags // space.iseki.executables.macho.lc/SegmentCommand.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho.lc/SegmentCommand.flags.<get-flags>|<get-flags>(){}[0]
    final val initProt // space.iseki.executables.macho.lc/SegmentCommand.initProt|{}initProt[0]
        final fun <get-initProt>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand.initProt.<get-initProt>|<get-initProt>(){}[0]
    final val maxProt // space.iseki.executables.macho.lc/SegmentCommand.maxProt|{}maxProt[0]
        final fun <get-maxProt>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand.maxProt.<get-maxProt>|<get-maxProt>(){}[0]
    final val nsects // space.iseki.executables.macho.lc/SegmentCommand.nsects|{}nsects[0]
        final fun <get-nsects>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.nsects.<get-nsects>|<get-nsects>(){}[0]
    final val sections // space.iseki.executables.macho.lc/SegmentCommand.sections|{}sections[0]
        final fun <get-sections>(): kotlin.collections/List<space.iseki.executables.macho.lc/Section> // space.iseki.executables.macho.lc/SegmentCommand.sections.<get-sections>|<get-sections>(){}[0]
    final val segName // space.iseki.executables.macho.lc/SegmentCommand.segName|{}segName[0]
        final fun <get-segName>(): kotlin/String // space.iseki.executables.macho.lc/SegmentCommand.segName.<get-segName>|<get-segName>(){}[0]
    final val size // space.iseki.executables.macho.lc/SegmentCommand.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.size.<get-size>|<get-size>(){}[0]
    final val type // space.iseki.executables.macho.lc/SegmentCommand.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/SegmentCommand.type.<get-type>|<get-type>(){}[0]
    final val vmAddr // space.iseki.executables.macho.lc/SegmentCommand.vmAddr|{}vmAddr[0]
        final fun <get-vmAddr>(): space.iseki.executables.common/Address32 // space.iseki.executables.macho.lc/SegmentCommand.vmAddr.<get-vmAddr>|<get-vmAddr>(){}[0]
    final val vmSize // space.iseki.executables.macho.lc/SegmentCommand.vmSize|{}vmSize[0]
        final fun <get-vmSize>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.vmSize.<get-vmSize>|<get-vmSize>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho.lc/SegmentCommand.component1|component1(){}[0]
    final fun component10(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.component10|component10(){}[0]
    final fun component11(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/SegmentCommand.component11|component11(){}[0]
    final fun component12(): kotlin.collections/List<space.iseki.executables.macho.lc/Section> // space.iseki.executables.macho.lc/SegmentCommand.component12|component12(){}[0]
    final fun component2(): space.iseki.executables.common/Address32 // space.iseki.executables.macho.lc/SegmentCommand.component2|component2(){}[0]
    final fun component3(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho.lc/SegmentCommand.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/SegmentCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/SegmentCommand.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/SegmentCommand.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/SegmentCommand.Companion|null[0]
}

final class space.iseki.executables.macho.lc/SegmentCommand64 : space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/SegmentCommand64|null[0]
    final val fileOff // space.iseki.executables.macho.lc/SegmentCommand64.fileOff|{}fileOff[0]
        final fun <get-fileOff>(): kotlin/ULong // space.iseki.executables.macho.lc/SegmentCommand64.fileOff.<get-fileOff>|<get-fileOff>(){}[0]
    final val fileSize // space.iseki.executables.macho.lc/SegmentCommand64.fileSize|{}fileSize[0]
        final fun <get-fileSize>(): kotlin/ULong // space.iseki.executables.macho.lc/SegmentCommand64.fileSize.<get-fileSize>|<get-fileSize>(){}[0]
    final val flags // space.iseki.executables.macho.lc/SegmentCommand64.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho.lc/SegmentCommand64.flags.<get-flags>|<get-flags>(){}[0]
    final val initProt // space.iseki.executables.macho.lc/SegmentCommand64.initProt|{}initProt[0]
        final fun <get-initProt>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand64.initProt.<get-initProt>|<get-initProt>(){}[0]
    final val maxProt // space.iseki.executables.macho.lc/SegmentCommand64.maxProt|{}maxProt[0]
        final fun <get-maxProt>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand64.maxProt.<get-maxProt>|<get-maxProt>(){}[0]
    final val nsects // space.iseki.executables.macho.lc/SegmentCommand64.nsects|{}nsects[0]
        final fun <get-nsects>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand64.nsects.<get-nsects>|<get-nsects>(){}[0]
    final val sections // space.iseki.executables.macho.lc/SegmentCommand64.sections|{}sections[0]
        final fun <get-sections>(): kotlin.collections/List<space.iseki.executables.macho.lc/Section64> // space.iseki.executables.macho.lc/SegmentCommand64.sections.<get-sections>|<get-sections>(){}[0]
    final val segName // space.iseki.executables.macho.lc/SegmentCommand64.segName|{}segName[0]
        final fun <get-segName>(): kotlin/String // space.iseki.executables.macho.lc/SegmentCommand64.segName.<get-segName>|<get-segName>(){}[0]
    final val size // space.iseki.executables.macho.lc/SegmentCommand64.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand64.size.<get-size>|<get-size>(){}[0]
    final val type // space.iseki.executables.macho.lc/SegmentCommand64.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/SegmentCommand64.type.<get-type>|<get-type>(){}[0]
    final val vmAddr // space.iseki.executables.macho.lc/SegmentCommand64.vmAddr|{}vmAddr[0]
        final fun <get-vmAddr>(): space.iseki.executables.common/Address64 // space.iseki.executables.macho.lc/SegmentCommand64.vmAddr.<get-vmAddr>|<get-vmAddr>(){}[0]
    final val vmSize // space.iseki.executables.macho.lc/SegmentCommand64.vmSize|{}vmSize[0]
        final fun <get-vmSize>(): kotlin/ULong // space.iseki.executables.macho.lc/SegmentCommand64.vmSize.<get-vmSize>|<get-vmSize>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho.lc/SegmentCommand64.component1|component1(){}[0]
    final fun component10(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand64.component10|component10(){}[0]
    final fun component11(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/SegmentCommand64.component11|component11(){}[0]
    final fun component12(): kotlin.collections/List<space.iseki.executables.macho.lc/Section64> // space.iseki.executables.macho.lc/SegmentCommand64.component12|component12(){}[0]
    final fun component2(): space.iseki.executables.common/Address64 // space.iseki.executables.macho.lc/SegmentCommand64.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // space.iseki.executables.macho.lc/SegmentCommand64.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // space.iseki.executables.macho.lc/SegmentCommand64.component4|component4(){}[0]
    final fun component5(): kotlin/ULong // space.iseki.executables.macho.lc/SegmentCommand64.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand64.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho.lc/SegmentCommand64.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho.lc/SegmentCommand64.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho.lc/SegmentCommand64.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/SegmentCommand64.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/SegmentCommand64.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/SegmentCommand64.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/SegmentCommand64.Companion|null[0]
}

final class space.iseki.executables.macho.lc/UnsupportedCommand : space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/UnsupportedCommand|null[0]
    final val size // space.iseki.executables.macho.lc/UnsupportedCommand.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/UnsupportedCommand.size.<get-size>|<get-size>(){}[0]
    final val type // space.iseki.executables.macho.lc/UnsupportedCommand.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/UnsupportedCommand.type.<get-type>|<get-type>(){}[0]

    final fun component1(): kotlin/UInt // space.iseki.executables.macho.lc/UnsupportedCommand.component1|component1(){}[0]
    final fun component2(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/UnsupportedCommand.component2|component2(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/UnsupportedCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/UnsupportedCommand.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/UnsupportedCommand.toString|toString(){}[0]
}

final class space.iseki.executables.macho.lc/UuidCommand : space.iseki.executables.macho.lc/MachoLoadCommand { // space.iseki.executables.macho.lc/UuidCommand|null[0]
    final val size // space.iseki.executables.macho.lc/UuidCommand.size|{}size[0]
        final fun <get-size>(): kotlin/UInt // space.iseki.executables.macho.lc/UuidCommand.size.<get-size>|<get-size>(){}[0]
    final val type // space.iseki.executables.macho.lc/UuidCommand.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho.lc/UuidCommand.type.<get-type>|<get-type>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/UuidCommand.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/UuidCommand.hashCode|hashCode(){}[0]
    final fun kotlinUuid(): kotlin.uuid/Uuid // space.iseki.executables.macho.lc/UuidCommand.kotlinUuid|kotlinUuid(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/UuidCommand.toString|toString(){}[0]

    final object Companion // space.iseki.executables.macho.lc/UuidCommand.Companion|null[0]
}

final class space.iseki.executables.macho/MachoFile : kotlin/AutoCloseable, space.iseki.executables.common/OpenedFile, space.iseki.executables.common/ReadableSectionContainer, space.iseki.executables.common/VirtualMemoryReadable { // space.iseki.executables.macho/MachoFile|null[0]
    final val header // space.iseki.executables.macho/MachoFile.header|{}header[0]
        final fun <get-header>(): space.iseki.executables.macho/MachoHeader // space.iseki.executables.macho/MachoFile.header.<get-header>|<get-header>(){}[0]
    final val loaderCommands // space.iseki.executables.macho/MachoFile.loaderCommands|{}loaderCommands[0]
        final fun <get-loaderCommands>(): space.iseki.executables.macho/MachoFile.LoaderCommands // space.iseki.executables.macho/MachoFile.loaderCommands.<get-loaderCommands>|<get-loaderCommands>(){}[0]
    final val rootHeaders // space.iseki.executables.macho/MachoFile.rootHeaders|{}rootHeaders[0]
        final fun <get-rootHeaders>(): kotlin.collections/Map<kotlin/String, space.iseki.executables.common/ReadableStructure> // space.iseki.executables.macho/MachoFile.rootHeaders.<get-rootHeaders>|<get-rootHeaders>(){}[0]
    final val sections // space.iseki.executables.macho/MachoFile.sections|{}sections[0]
        final fun <get-sections>(): kotlin.collections/List<space.iseki.executables.macho/MachoFile.Section> // space.iseki.executables.macho/MachoFile.sections.<get-sections>|<get-sections>(){}[0]

    final fun close() // space.iseki.executables.macho/MachoFile.close|close(){}[0]
    final fun virtualMemory(): space.iseki.executables.common/DataAccessor // space.iseki.executables.macho/MachoFile.virtualMemory|virtualMemory(){}[0]

    final inner class LoaderCommands : kotlin.collections/AbstractList<space.iseki.executables.macho.lc/MachoLoadCommand> { // space.iseki.executables.macho/MachoFile.LoaderCommands|null[0]
        final val bytes // space.iseki.executables.macho/MachoFile.LoaderCommands.bytes|{}bytes[0]
            final fun <get-bytes>(): kotlin/ByteArray // space.iseki.executables.macho/MachoFile.LoaderCommands.bytes.<get-bytes>|<get-bytes>(){}[0]
        final val size // space.iseki.executables.macho/MachoFile.LoaderCommands.size|{}size[0]
            final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoFile.LoaderCommands.size.<get-size>|<get-size>(){}[0]

        final fun get(kotlin/Int): space.iseki.executables.macho.lc/MachoLoadCommand // space.iseki.executables.macho/MachoFile.LoaderCommands.get|get(kotlin.Int){}[0]
    }

    final inner class Section : space.iseki.executables.common/ReadableSection { // space.iseki.executables.macho/MachoFile.Section|null[0]
        constructor <init>(kotlin/String, space.iseki.executables.macho/MachoSection) // space.iseki.executables.macho/MachoFile.Section.<init>|<init>(kotlin.String;space.iseki.executables.macho.MachoSection){}[0]

        final val header // space.iseki.executables.macho/MachoFile.Section.header|{}header[0]
            final fun <get-header>(): space.iseki.executables.macho/MachoSection // space.iseki.executables.macho/MachoFile.Section.header.<get-header>|<get-header>(){}[0]
        final val name // space.iseki.executables.macho/MachoFile.Section.name|{}name[0]
            final fun <get-name>(): kotlin/String // space.iseki.executables.macho/MachoFile.Section.name.<get-name>|<get-name>(){}[0]
        final val size // space.iseki.executables.macho/MachoFile.Section.size|{}size[0]
            final fun <get-size>(): kotlin/Long // space.iseki.executables.macho/MachoFile.Section.size.<get-size>|<get-size>(){}[0]

        final fun readAtMost(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/Int // space.iseki.executables.macho/MachoFile.Section.readAtMost|readAtMost(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
    }

    final object Companion : space.iseki.executables.common/FileFormat<space.iseki.executables.macho/MachoFile> { // space.iseki.executables.macho/MachoFile.Companion|null[0]
        final fun open(space.iseki.executables.common/DataAccessor): space.iseki.executables.macho/MachoFile // space.iseki.executables.macho/MachoFile.Companion.open|open(space.iseki.executables.common.DataAccessor){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.macho/MachoFile.Companion.toString|toString(){}[0]
    }
}

final class space.iseki.executables.macho/MachoFileException : space.iseki.executables.common/CommonFileException // space.iseki.executables.macho/MachoFileException|null[0]

final class space.iseki.executables.macho/MachoHeader : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.macho/MachoHeader|null[0]
    final val cpusubtype // space.iseki.executables.macho/MachoHeader.cpusubtype|{}cpusubtype[0]
        final fun <get-cpusubtype>(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.cpusubtype.<get-cpusubtype>|<get-cpusubtype>(){}[0]
    final val cputype // space.iseki.executables.macho/MachoHeader.cputype|{}cputype[0]
        final fun <get-cputype>(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.cputype.<get-cputype>|<get-cputype>(){}[0]
    final val fields // space.iseki.executables.macho/MachoHeader.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.macho/MachoHeader.fields.<get-fields>|<get-fields>(){}[0]
    final val filetype // space.iseki.executables.macho/MachoHeader.filetype|{}filetype[0]
        final fun <get-filetype>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoHeader.filetype.<get-filetype>|<get-filetype>(){}[0]
    final val flags // space.iseki.executables.macho/MachoHeader.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoHeader.flags.<get-flags>|<get-flags>(){}[0]
    final val isLittleEndian // space.iseki.executables.macho/MachoHeader.isLittleEndian|{}isLittleEndian[0]
        final fun <get-isLittleEndian>(): kotlin/Boolean // space.iseki.executables.macho/MachoHeader.isLittleEndian.<get-isLittleEndian>|<get-isLittleEndian>(){}[0]
    final val magic // space.iseki.executables.macho/MachoHeader.magic|{}magic[0]
        final fun <get-magic>(): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoHeader.magic.<get-magic>|<get-magic>(){}[0]
    final val ncmds // space.iseki.executables.macho/MachoHeader.ncmds|{}ncmds[0]
        final fun <get-ncmds>(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.ncmds.<get-ncmds>|<get-ncmds>(){}[0]
    final val reserved // space.iseki.executables.macho/MachoHeader.reserved|{}reserved[0]
        final fun <get-reserved>(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.reserved.<get-reserved>|<get-reserved>(){}[0]
    final val sizeofcmds // space.iseki.executables.macho/MachoHeader.sizeofcmds|{}sizeofcmds[0]
        final fun <get-sizeofcmds>(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.sizeofcmds.<get-sizeofcmds>|<get-sizeofcmds>(){}[0]

    final fun component1(): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoHeader.component1|component1(){}[0]
    final fun component2(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.component2|component2(){}[0]
    final fun component3(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoHeader.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.component5|component5(){}[0]
    final fun component6(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoHeader.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho/MachoHeader.component8|component8(){}[0]
    final fun component9(): kotlin/Boolean // space.iseki.executables.macho/MachoHeader.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoHeader.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.macho/MachoHeader> { // space.iseki.executables.macho/MachoHeader.$serializer|null[0]
        final val descriptor // space.iseki.executables.macho/MachoHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.macho/MachoHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.macho/MachoHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.macho/MachoHeader // space.iseki.executables.macho/MachoHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.macho/MachoHeader) // space.iseki.executables.macho/MachoHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.macho.MachoHeader){}[0]
    }

    final object Companion { // space.iseki.executables.macho/MachoHeader.Companion|null[0]
        final fun parse(kotlin/ByteArray, kotlin/Int): space.iseki.executables.macho/MachoHeader // space.iseki.executables.macho/MachoHeader.Companion.parse|parse(kotlin.ByteArray;kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoHeader> // space.iseki.executables.macho/MachoHeader.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.macho/MachoSection : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.macho/MachoSection|null[0]
    final val addr // space.iseki.executables.macho/MachoSection.addr|{}addr[0]
        final fun <get-addr>(): space.iseki.executables.common/Address64 // space.iseki.executables.macho/MachoSection.addr.<get-addr>|<get-addr>(){}[0]
    final val align // space.iseki.executables.macho/MachoSection.align|{}align[0]
        final fun <get-align>(): kotlin/UInt // space.iseki.executables.macho/MachoSection.align.<get-align>|<get-align>(){}[0]
    final val fields // space.iseki.executables.macho/MachoSection.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.macho/MachoSection.fields.<get-fields>|<get-fields>(){}[0]
    final val flags // space.iseki.executables.macho/MachoSection.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho.lc/MachoSectionFlag // space.iseki.executables.macho/MachoSection.flags.<get-flags>|<get-flags>(){}[0]
    final val nreloc // space.iseki.executables.macho/MachoSection.nreloc|{}nreloc[0]
        final fun <get-nreloc>(): kotlin/UInt // space.iseki.executables.macho/MachoSection.nreloc.<get-nreloc>|<get-nreloc>(){}[0]
    final val offset // space.iseki.executables.macho/MachoSection.offset|{}offset[0]
        final fun <get-offset>(): kotlin/UInt // space.iseki.executables.macho/MachoSection.offset.<get-offset>|<get-offset>(){}[0]
    final val reloff // space.iseki.executables.macho/MachoSection.reloff|{}reloff[0]
        final fun <get-reloff>(): kotlin/UInt // space.iseki.executables.macho/MachoSection.reloff.<get-reloff>|<get-reloff>(){}[0]
    final val sectName // space.iseki.executables.macho/MachoSection.sectName|{}sectName[0]
        final fun <get-sectName>(): kotlin/String // space.iseki.executables.macho/MachoSection.sectName.<get-sectName>|<get-sectName>(){}[0]
    final val segName // space.iseki.executables.macho/MachoSection.segName|{}segName[0]
        final fun <get-segName>(): kotlin/String // space.iseki.executables.macho/MachoSection.segName.<get-segName>|<get-segName>(){}[0]
    final val size // space.iseki.executables.macho/MachoSection.size|{}size[0]
        final fun <get-size>(): kotlin/ULong // space.iseki.executables.macho/MachoSection.size.<get-size>|<get-size>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho/MachoSection.component1|component1(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.macho/MachoSection.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.common/Address64 // space.iseki.executables.macho/MachoSection.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // space.iseki.executables.macho/MachoSection.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.macho/MachoSection.component5|component5(){}[0]
    final fun component6(): kotlin/UInt // space.iseki.executables.macho/MachoSection.component6|component6(){}[0]
    final fun component7(): kotlin/UInt // space.iseki.executables.macho/MachoSection.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho/MachoSection.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.macho.lc/MachoSectionFlag // space.iseki.executables.macho/MachoSection.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSection.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSection.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSection.toString|toString(){}[0]
}

final class space.iseki.executables.macho/MachoSegment : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.macho/MachoSegment|null[0]
    final val fields // space.iseki.executables.macho/MachoSegment.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.macho/MachoSegment.fields.<get-fields>|<get-fields>(){}[0]
    final val fileOff // space.iseki.executables.macho/MachoSegment.fileOff|{}fileOff[0]
        final fun <get-fileOff>(): kotlin/ULong // space.iseki.executables.macho/MachoSegment.fileOff.<get-fileOff>|<get-fileOff>(){}[0]
    final val fileSize // space.iseki.executables.macho/MachoSegment.fileSize|{}fileSize[0]
        final fun <get-fileSize>(): kotlin/ULong // space.iseki.executables.macho/MachoSegment.fileSize.<get-fileSize>|<get-fileSize>(){}[0]
    final val flags // space.iseki.executables.macho/MachoSegment.flags|{}flags[0]
        final fun <get-flags>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegment.flags.<get-flags>|<get-flags>(){}[0]
    final val initProt // space.iseki.executables.macho/MachoSegment.initProt|{}initProt[0]
        final fun <get-initProt>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoSegment.initProt.<get-initProt>|<get-initProt>(){}[0]
    final val maxProt // space.iseki.executables.macho/MachoSegment.maxProt|{}maxProt[0]
        final fun <get-maxProt>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoSegment.maxProt.<get-maxProt>|<get-maxProt>(){}[0]
    final val nsects // space.iseki.executables.macho/MachoSegment.nsects|{}nsects[0]
        final fun <get-nsects>(): kotlin/UInt // space.iseki.executables.macho/MachoSegment.nsects.<get-nsects>|<get-nsects>(){}[0]
    final val sections // space.iseki.executables.macho/MachoSegment.sections|{}sections[0]
        final fun <get-sections>(): kotlin.collections/List<space.iseki.executables.macho/MachoSection> // space.iseki.executables.macho/MachoSegment.sections.<get-sections>|<get-sections>(){}[0]
    final val segName // space.iseki.executables.macho/MachoSegment.segName|{}segName[0]
        final fun <get-segName>(): kotlin/String // space.iseki.executables.macho/MachoSegment.segName.<get-segName>|<get-segName>(){}[0]
    final val vmAddr // space.iseki.executables.macho/MachoSegment.vmAddr|{}vmAddr[0]
        final fun <get-vmAddr>(): space.iseki.executables.common/Address64 // space.iseki.executables.macho/MachoSegment.vmAddr.<get-vmAddr>|<get-vmAddr>(){}[0]
    final val vmSize // space.iseki.executables.macho/MachoSegment.vmSize|{}vmSize[0]
        final fun <get-vmSize>(): kotlin/ULong // space.iseki.executables.macho/MachoSegment.vmSize.<get-vmSize>|<get-vmSize>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.macho/MachoSegment.component1|component1(){}[0]
    final fun component10(): kotlin.collections/List<space.iseki.executables.macho/MachoSection> // space.iseki.executables.macho/MachoSegment.component10|component10(){}[0]
    final fun component2(): space.iseki.executables.common/Address64 // space.iseki.executables.macho/MachoSegment.component2|component2(){}[0]
    final fun component3(): kotlin/ULong // space.iseki.executables.macho/MachoSegment.component3|component3(){}[0]
    final fun component4(): kotlin/ULong // space.iseki.executables.macho/MachoSegment.component4|component4(){}[0]
    final fun component5(): kotlin/ULong // space.iseki.executables.macho/MachoSegment.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoSegment.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoSegment.component7|component7(){}[0]
    final fun component8(): kotlin/UInt // space.iseki.executables.macho/MachoSegment.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegment.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSegment.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSegment.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSegment.toString|toString(){}[0]
}

final class space.iseki.executables.pe.vi/FixedFileInfo : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.pe.vi/FixedFileInfo|null[0]
    final val fields // space.iseki.executables.pe.vi/FixedFileInfo.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe.vi/FixedFileInfo.fields.<get-fields>|<get-fields>(){}[0]
    final val fileDateLS // space.iseki.executables.pe.vi/FixedFileInfo.fileDateLS|{}fileDateLS[0]
        final fun <get-fileDateLS>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.fileDateLS.<get-fileDateLS>|<get-fileDateLS>(){}[0]
    final val fileDateMS // space.iseki.executables.pe.vi/FixedFileInfo.fileDateMS|{}fileDateMS[0]
        final fun <get-fileDateMS>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.fileDateMS.<get-fileDateMS>|<get-fileDateMS>(){}[0]
    final val fileFlags // space.iseki.executables.pe.vi/FixedFileInfo.fileFlags|{}fileFlags[0]
        final fun <get-fileFlags>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FixedFileInfo.fileFlags.<get-fileFlags>|<get-fileFlags>(){}[0]
    final val fileFlagsMask // space.iseki.executables.pe.vi/FixedFileInfo.fileFlagsMask|{}fileFlagsMask[0]
        final fun <get-fileFlagsMask>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.fileFlagsMask.<get-fileFlagsMask>|<get-fileFlagsMask>(){}[0]
    final val fileOS // space.iseki.executables.pe.vi/FixedFileInfo.fileOS|{}fileOS[0]
        final fun <get-fileOS>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FixedFileInfo.fileOS.<get-fileOS>|<get-fileOS>(){}[0]
    final val fileSubtype // space.iseki.executables.pe.vi/FixedFileInfo.fileSubtype|{}fileSubtype[0]
        final fun <get-fileSubtype>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.fileSubtype.<get-fileSubtype>|<get-fileSubtype>(){}[0]
    final val fileType // space.iseki.executables.pe.vi/FixedFileInfo.fileType|{}fileType[0]
        final fun <get-fileType>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FixedFileInfo.fileType.<get-fileType>|<get-fileType>(){}[0]
    final val fileVersion // space.iseki.executables.pe.vi/FixedFileInfo.fileVersion|{}fileVersion[0]
        final fun <get-fileVersion>(): space.iseki.executables.pe.vi/FixedFileInfo.Version // space.iseki.executables.pe.vi/FixedFileInfo.fileVersion.<get-fileVersion>|<get-fileVersion>(){}[0]
    final val fileVersionLS // space.iseki.executables.pe.vi/FixedFileInfo.fileVersionLS|{}fileVersionLS[0]
        final fun <get-fileVersionLS>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.fileVersionLS.<get-fileVersionLS>|<get-fileVersionLS>(){}[0]
    final val fileVersionMS // space.iseki.executables.pe.vi/FixedFileInfo.fileVersionMS|{}fileVersionMS[0]
        final fun <get-fileVersionMS>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.fileVersionMS.<get-fileVersionMS>|<get-fileVersionMS>(){}[0]
    final val productVersion // space.iseki.executables.pe.vi/FixedFileInfo.productVersion|{}productVersion[0]
        final fun <get-productVersion>(): space.iseki.executables.pe.vi/FixedFileInfo.Version // space.iseki.executables.pe.vi/FixedFileInfo.productVersion.<get-productVersion>|<get-productVersion>(){}[0]
    final val productVersionLS // space.iseki.executables.pe.vi/FixedFileInfo.productVersionLS|{}productVersionLS[0]
        final fun <get-productVersionLS>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.productVersionLS.<get-productVersionLS>|<get-productVersionLS>(){}[0]
    final val productVersionMS // space.iseki.executables.pe.vi/FixedFileInfo.productVersionMS|{}productVersionMS[0]
        final fun <get-productVersionMS>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.productVersionMS.<get-productVersionMS>|<get-productVersionMS>(){}[0]
    final val structVersion // space.iseki.executables.pe.vi/FixedFileInfo.structVersion|{}structVersion[0]
        final fun <get-structVersion>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.structVersion.<get-structVersion>|<get-structVersion>(){}[0]

    final fun component1(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component1|component1(){}[0]
    final fun component10(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component10|component10(){}[0]
    final fun component11(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component11|component11(){}[0]
    final fun component12(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component12|component12(){}[0]
    final fun component2(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component2|component2(){}[0]
    final fun component3(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component5|component5(){}[0]
    final fun component6(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FixedFileInfo.component7|component7(){}[0]
    final fun component8(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FixedFileInfo.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FixedFileInfo.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe.vi/FixedFileInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe.vi/FixedFileInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe.vi/FixedFileInfo.toString|toString(){}[0]

    final class Version : kotlin/Comparable<space.iseki.executables.pe.vi/FixedFileInfo.Version> { // space.iseki.executables.pe.vi/FixedFileInfo.Version|null[0]
        final val build // space.iseki.executables.pe.vi/FixedFileInfo.Version.build|{}build[0]
            final fun <get-build>(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.build.<get-build>|<get-build>(){}[0]
        final val ls // space.iseki.executables.pe.vi/FixedFileInfo.Version.ls|{}ls[0]
            final fun <get-ls>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.Version.ls.<get-ls>|<get-ls>(){}[0]
        final val major // space.iseki.executables.pe.vi/FixedFileInfo.Version.major|{}major[0]
            final fun <get-major>(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.major.<get-major>|<get-major>(){}[0]
        final val minor // space.iseki.executables.pe.vi/FixedFileInfo.Version.minor|{}minor[0]
            final fun <get-minor>(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.minor.<get-minor>|<get-minor>(){}[0]
        final val ms // space.iseki.executables.pe.vi/FixedFileInfo.Version.ms|{}ms[0]
            final fun <get-ms>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.Version.ms.<get-ms>|<get-ms>(){}[0]
        final val revision // space.iseki.executables.pe.vi/FixedFileInfo.Version.revision|{}revision[0]
            final fun <get-revision>(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.revision.<get-revision>|<get-revision>(){}[0]

        final fun compareTo(space.iseki.executables.pe.vi/FixedFileInfo.Version): kotlin/Int // space.iseki.executables.pe.vi/FixedFileInfo.Version.compareTo|compareTo(space.iseki.executables.pe.vi.FixedFileInfo.Version){}[0]
        final fun component1(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.component1|component1(){}[0]
        final fun component2(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.component2|component2(){}[0]
        final fun component3(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.component3|component3(){}[0]
        final fun component4(): kotlin/UShort // space.iseki.executables.pe.vi/FixedFileInfo.Version.component4|component4(){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe.vi/FixedFileInfo.Version.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // space.iseki.executables.pe.vi/FixedFileInfo.Version.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.pe.vi/FixedFileInfo.Version.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe.vi/FixedFileInfo.Version> { // space.iseki.executables.pe.vi/FixedFileInfo.Version.$serializer|null[0]
            final val descriptor // space.iseki.executables.pe.vi/FixedFileInfo.Version.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe.vi/FixedFileInfo.Version.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe.vi/FixedFileInfo.Version.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe.vi/FixedFileInfo.Version // space.iseki.executables.pe.vi/FixedFileInfo.Version.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe.vi/FixedFileInfo.Version) // space.iseki.executables.pe.vi/FixedFileInfo.Version.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.vi.FixedFileInfo.Version){}[0]
        }

        final object Companion { // space.iseki.executables.pe.vi/FixedFileInfo.Version.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe.vi/FixedFileInfo.Version> // space.iseki.executables.pe.vi/FixedFileInfo.Version.Companion.serializer|serializer(){}[0]
        }
    }

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe.vi/FixedFileInfo> { // space.iseki.executables.pe.vi/FixedFileInfo.$serializer|null[0]
        final val descriptor // space.iseki.executables.pe.vi/FixedFileInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe.vi/FixedFileInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe.vi/FixedFileInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe.vi/FixedFileInfo // space.iseki.executables.pe.vi/FixedFileInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe.vi/FixedFileInfo) // space.iseki.executables.pe.vi/FixedFileInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.vi.FixedFileInfo){}[0]
    }

    final object Companion { // space.iseki.executables.pe.vi/FixedFileInfo.Companion|null[0]
        final const val LENGTH // space.iseki.executables.pe.vi/FixedFileInfo.Companion.LENGTH|{}LENGTH[0]
            final fun <get-LENGTH>(): kotlin/Int // space.iseki.executables.pe.vi/FixedFileInfo.Companion.LENGTH.<get-LENGTH>|<get-LENGTH>(){}[0]
        final const val SIGNATURE // space.iseki.executables.pe.vi/FixedFileInfo.Companion.SIGNATURE|{}SIGNATURE[0]
            final fun <get-SIGNATURE>(): kotlin/UInt // space.iseki.executables.pe.vi/FixedFileInfo.Companion.SIGNATURE.<get-SIGNATURE>|<get-SIGNATURE>(){}[0]

        final fun parse(kotlin/ByteArray, kotlin/Int): space.iseki.executables.pe.vi/FixedFileInfo // space.iseki.executables.pe.vi/FixedFileInfo.Companion.parse|parse(kotlin.ByteArray;kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe.vi/FixedFileInfo> // space.iseki.executables.pe.vi/FixedFileInfo.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.pe.vi/PEVersionInfo { // space.iseki.executables.pe.vi/PEVersionInfo|null[0]
    final val fixedFileInfo // space.iseki.executables.pe.vi/PEVersionInfo.fixedFileInfo|{}fixedFileInfo[0]
        final fun <get-fixedFileInfo>(): space.iseki.executables.pe.vi/FixedFileInfo? // space.iseki.executables.pe.vi/PEVersionInfo.fixedFileInfo.<get-fixedFileInfo>|<get-fixedFileInfo>(){}[0]
    final val stringFileInfo // space.iseki.executables.pe.vi/PEVersionInfo.stringFileInfo|{}stringFileInfo[0]
        final fun <get-stringFileInfo>(): space.iseki.executables.pe.vi/StringTable? // space.iseki.executables.pe.vi/PEVersionInfo.stringFileInfo.<get-stringFileInfo>|<get-stringFileInfo>(){}[0]

    final fun component1(): space.iseki.executables.pe.vi/FixedFileInfo? // space.iseki.executables.pe.vi/PEVersionInfo.component1|component1(){}[0]
    final fun component2(): space.iseki.executables.pe.vi/StringTable? // space.iseki.executables.pe.vi/PEVersionInfo.component2|component2(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe.vi/PEVersionInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe.vi/PEVersionInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe.vi/PEVersionInfo.toString|toString(){}[0]
}

final class space.iseki.executables.pe.vi/StringTable { // space.iseki.executables.pe.vi/StringTable|null[0]
    final val langKey // space.iseki.executables.pe.vi/StringTable.langKey|{}langKey[0]
        final fun <get-langKey>(): kotlin/UInt // space.iseki.executables.pe.vi/StringTable.langKey.<get-langKey>|<get-langKey>(){}[0]
    final val strings // space.iseki.executables.pe.vi/StringTable.strings|{}strings[0]
        final fun <get-strings>(): kotlin.collections/List<kotlin/Pair<kotlin/String, kotlin/String>> // space.iseki.executables.pe.vi/StringTable.strings.<get-strings>|<get-strings>(){}[0]

    final fun toString(): kotlin/String // space.iseki.executables.pe.vi/StringTable.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe.vi/StringTable> { // space.iseki.executables.pe.vi/StringTable.$serializer|null[0]
        final val descriptor // space.iseki.executables.pe.vi/StringTable.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe.vi/StringTable.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe.vi/StringTable.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe.vi/StringTable // space.iseki.executables.pe.vi/StringTable.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe.vi/StringTable) // space.iseki.executables.pe.vi/StringTable.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.vi.StringTable){}[0]
    }

    final object Companion { // space.iseki.executables.pe.vi/StringTable.Companion|null[0]
        final val $childSerializers // space.iseki.executables.pe.vi/StringTable.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe.vi/StringTable> // space.iseki.executables.pe.vi/StringTable.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.pe/CoffHeader : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.pe/CoffHeader|null[0]
    constructor <init>(space.iseki.executables.pe/MachineType, kotlin/UShort, space.iseki.executables.common/TimeDateStamp32, kotlin/UShort, space.iseki.executables.pe/Characteristics) // space.iseki.executables.pe/CoffHeader.<init>|<init>(space.iseki.executables.pe.MachineType;kotlin.UShort;space.iseki.executables.common.TimeDateStamp32;kotlin.UShort;space.iseki.executables.pe.Characteristics){}[0]

    final val characteristics // space.iseki.executables.pe/CoffHeader.characteristics|{}characteristics[0]
        final fun <get-characteristics>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/CoffHeader.characteristics.<get-characteristics>|<get-characteristics>(){}[0]
    final val fields // space.iseki.executables.pe/CoffHeader.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe/CoffHeader.fields.<get-fields>|<get-fields>(){}[0]
    final val machine // space.iseki.executables.pe/CoffHeader.machine|{}machine[0]
        final fun <get-machine>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/CoffHeader.machine.<get-machine>|<get-machine>(){}[0]
    final val numbersOfSections // space.iseki.executables.pe/CoffHeader.numbersOfSections|{}numbersOfSections[0]
        final fun <get-numbersOfSections>(): kotlin/UShort // space.iseki.executables.pe/CoffHeader.numbersOfSections.<get-numbersOfSections>|<get-numbersOfSections>(){}[0]
    final val numbersOfSymbols // space.iseki.executables.pe/CoffHeader.numbersOfSymbols|{}numbersOfSymbols[0]
        final fun <get-numbersOfSymbols>(): kotlin/UInt // space.iseki.executables.pe/CoffHeader.numbersOfSymbols.<get-numbersOfSymbols>|<get-numbersOfSymbols>(){}[0]
    final val pointerToSymbolTable // space.iseki.executables.pe/CoffHeader.pointerToSymbolTable|{}pointerToSymbolTable[0]
        final fun <get-pointerToSymbolTable>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/CoffHeader.pointerToSymbolTable.<get-pointerToSymbolTable>|<get-pointerToSymbolTable>(){}[0]
    final val sizeOfOptionalHeader // space.iseki.executables.pe/CoffHeader.sizeOfOptionalHeader|{}sizeOfOptionalHeader[0]
        final fun <get-sizeOfOptionalHeader>(): kotlin/UShort // space.iseki.executables.pe/CoffHeader.sizeOfOptionalHeader.<get-sizeOfOptionalHeader>|<get-sizeOfOptionalHeader>(){}[0]
    final val timeDateStamp // space.iseki.executables.pe/CoffHeader.timeDateStamp|{}timeDateStamp[0]
        final fun <get-timeDateStamp>(): space.iseki.executables.common/TimeDateStamp32 // space.iseki.executables.pe/CoffHeader.timeDateStamp.<get-timeDateStamp>|<get-timeDateStamp>(){}[0]

    final fun component1(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/CoffHeader.component1|component1(){}[0]
    final fun component2(): kotlin/UShort // space.iseki.executables.pe/CoffHeader.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.common/TimeDateStamp32 // space.iseki.executables.pe/CoffHeader.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/CoffHeader.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.pe/CoffHeader.component5|component5(){}[0]
    final fun component6(): kotlin/UShort // space.iseki.executables.pe/CoffHeader.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/CoffHeader.component7|component7(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/CoffHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/CoffHeader.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/CoffHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe/CoffHeader> { // space.iseki.executables.pe/CoffHeader.$serializer|null[0]
        final val descriptor // space.iseki.executables.pe/CoffHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/CoffHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe/CoffHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/CoffHeader // space.iseki.executables.pe/CoffHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/CoffHeader) // space.iseki.executables.pe/CoffHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.CoffHeader){}[0]
    }

    final object Companion { // space.iseki.executables.pe/CoffHeader.Companion|null[0]
        final const val LENGTH // space.iseki.executables.pe/CoffHeader.Companion.LENGTH|{}LENGTH[0]
            final fun <get-LENGTH>(): kotlin/Int // space.iseki.executables.pe/CoffHeader.Companion.LENGTH.<get-LENGTH>|<get-LENGTH>(){}[0]

        final fun parse(kotlin/ByteArray, kotlin/Int): space.iseki.executables.pe/CoffHeader // space.iseki.executables.pe/CoffHeader.Companion.parse|parse(kotlin.ByteArray;kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/CoffHeader> // space.iseki.executables.pe/CoffHeader.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.pe/PEExportSymbol : space.iseki.executables.common/ExportSymbol { // space.iseki.executables.pe/PEExportSymbol|null[0]
    final val address // space.iseki.executables.pe/PEExportSymbol.address|{}address[0]
        final fun <get-address>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/PEExportSymbol.address.<get-address>|<get-address>(){}[0]
    final val fields // space.iseki.executables.pe/PEExportSymbol.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe/PEExportSymbol.fields.<get-fields>|<get-fields>(){}[0]
    final val forwarderString // space.iseki.executables.pe/PEExportSymbol.forwarderString|{}forwarderString[0]
        final fun <get-forwarderString>(): kotlin/String? // space.iseki.executables.pe/PEExportSymbol.forwarderString.<get-forwarderString>|<get-forwarderString>(){}[0]
    final val isForwarder // space.iseki.executables.pe/PEExportSymbol.isForwarder|{}isForwarder[0]
        final fun <get-isForwarder>(): kotlin/Boolean // space.iseki.executables.pe/PEExportSymbol.isForwarder.<get-isForwarder>|<get-isForwarder>(){}[0]
    final val name // space.iseki.executables.pe/PEExportSymbol.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.pe/PEExportSymbol.name.<get-name>|<get-name>(){}[0]
    final val ordinal // space.iseki.executables.pe/PEExportSymbol.ordinal|{}ordinal[0]
        final fun <get-ordinal>(): kotlin/UShort // space.iseki.executables.pe/PEExportSymbol.ordinal.<get-ordinal>|<get-ordinal>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.pe/PEExportSymbol.component1|component1(){}[0]
    final fun component2(): kotlin/UShort // space.iseki.executables.pe/PEExportSymbol.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/PEExportSymbol.component3|component3(){}[0]
    final fun component4(): kotlin/Boolean // space.iseki.executables.pe/PEExportSymbol.component4|component4(){}[0]
    final fun component5(): kotlin/String? // space.iseki.executables.pe/PEExportSymbol.component5|component5(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/PEExportSymbol.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/PEExportSymbol.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/PEExportSymbol.toString|toString(){}[0]
}

final class space.iseki.executables.pe/PEFile : kotlin/AutoCloseable, space.iseki.executables.common/ExportSymbolContainer, space.iseki.executables.common/ImportSymbolContainer, space.iseki.executables.common/OpenedFile, space.iseki.executables.common/ReadableSectionContainer, space.iseki.executables.common/VirtualMemoryReadable { // space.iseki.executables.pe/PEFile|null[0]
    final val coffHeader // space.iseki.executables.pe/PEFile.coffHeader|{}coffHeader[0]
        final fun <get-coffHeader>(): space.iseki.executables.pe/CoffHeader // space.iseki.executables.pe/PEFile.coffHeader.<get-coffHeader>|<get-coffHeader>(){}[0]
    final val exportSymbols // space.iseki.executables.pe/PEFile.exportSymbols|{}exportSymbols[0]
        final fun <get-exportSymbols>(): kotlin.collections/List<space.iseki.executables.common/ExportSymbol> // space.iseki.executables.pe/PEFile.exportSymbols.<get-exportSymbols>|<get-exportSymbols>(){}[0]
    final val importSymbols // space.iseki.executables.pe/PEFile.importSymbols|{}importSymbols[0]
        final fun <get-importSymbols>(): kotlin.collections/List<space.iseki.executables.common/ImportSymbol> // space.iseki.executables.pe/PEFile.importSymbols.<get-importSymbols>|<get-importSymbols>(){}[0]
    final val resourceRoot // space.iseki.executables.pe/PEFile.resourceRoot|{}resourceRoot[0]
        final fun <get-resourceRoot>(): space.iseki.executables.pe/ResourceNode // space.iseki.executables.pe/PEFile.resourceRoot.<get-resourceRoot>|<get-resourceRoot>(){}[0]
    final val rootHeaders // space.iseki.executables.pe/PEFile.rootHeaders|{}rootHeaders[0]
        final fun <get-rootHeaders>(): kotlin.collections/Map<kotlin/String, space.iseki.executables.common/ReadableStructure> // space.iseki.executables.pe/PEFile.rootHeaders.<get-rootHeaders>|<get-rootHeaders>(){}[0]
    final val sectionTable // space.iseki.executables.pe/PEFile.sectionTable|{}sectionTable[0]
        final fun <get-sectionTable>(): kotlin.collections/List<space.iseki.executables.pe/SectionTableItem> // space.iseki.executables.pe/PEFile.sectionTable.<get-sectionTable>|<get-sectionTable>(){}[0]
    final val sections // space.iseki.executables.pe/PEFile.sections|{}sections[0]
        final fun <get-sections>(): kotlin.collections/List<space.iseki.executables.pe/PEFile.Section> // space.iseki.executables.pe/PEFile.sections.<get-sections>|<get-sections>(){}[0]
    final val standardHeader // space.iseki.executables.pe/PEFile.standardHeader|{}standardHeader[0]
        final fun <get-standardHeader>(): space.iseki.executables.pe/StandardHeader // space.iseki.executables.pe/PEFile.standardHeader.<get-standardHeader>|<get-standardHeader>(){}[0]
    final val summary // space.iseki.executables.pe/PEFile.summary|{}summary[0]
        final fun <get-summary>(): space.iseki.executables.pe/PEFile.Summary // space.iseki.executables.pe/PEFile.summary.<get-summary>|<get-summary>(){}[0]
    final val versionInfo // space.iseki.executables.pe/PEFile.versionInfo|{}versionInfo[0]
        final fun <get-versionInfo>(): space.iseki.executables.pe.vi/PEVersionInfo? // space.iseki.executables.pe/PEFile.versionInfo.<get-versionInfo>|<get-versionInfo>(){}[0]
    final val windowsHeader // space.iseki.executables.pe/PEFile.windowsHeader|{}windowsHeader[0]
        final fun <get-windowsHeader>(): space.iseki.executables.pe/WindowsSpecifiedHeader // space.iseki.executables.pe/PEFile.windowsHeader.<get-windowsHeader>|<get-windowsHeader>(){}[0]

    final fun close() // space.iseki.executables.pe/PEFile.close|close(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/PEFile.toString|toString(){}[0]
    final fun virtualMemory(): space.iseki.executables.common/DataAccessor // space.iseki.executables.pe/PEFile.virtualMemory|virtualMemory(){}[0]

    final class Summary { // space.iseki.executables.pe/PEFile.Summary|null[0]
        final val coffHeader // space.iseki.executables.pe/PEFile.Summary.coffHeader|{}coffHeader[0]
            final fun <get-coffHeader>(): space.iseki.executables.pe/CoffHeader // space.iseki.executables.pe/PEFile.Summary.coffHeader.<get-coffHeader>|<get-coffHeader>(){}[0]
        final val sectionTable // space.iseki.executables.pe/PEFile.Summary.sectionTable|{}sectionTable[0]
            final fun <get-sectionTable>(): kotlin.collections/List<space.iseki.executables.pe/SectionTableItem> // space.iseki.executables.pe/PEFile.Summary.sectionTable.<get-sectionTable>|<get-sectionTable>(){}[0]
        final val standardHeader // space.iseki.executables.pe/PEFile.Summary.standardHeader|{}standardHeader[0]
            final fun <get-standardHeader>(): space.iseki.executables.pe/StandardHeader // space.iseki.executables.pe/PEFile.Summary.standardHeader.<get-standardHeader>|<get-standardHeader>(){}[0]
        final val windowsHeader // space.iseki.executables.pe/PEFile.Summary.windowsHeader|{}windowsHeader[0]
            final fun <get-windowsHeader>(): space.iseki.executables.pe/WindowsSpecifiedHeader // space.iseki.executables.pe/PEFile.Summary.windowsHeader.<get-windowsHeader>|<get-windowsHeader>(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe/PEFile.Summary> { // space.iseki.executables.pe/PEFile.Summary.$serializer|null[0]
            final val descriptor // space.iseki.executables.pe/PEFile.Summary.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/PEFile.Summary.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe/PEFile.Summary.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/PEFile.Summary // space.iseki.executables.pe/PEFile.Summary.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/PEFile.Summary) // space.iseki.executables.pe/PEFile.Summary.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.PEFile.Summary){}[0]
        }

        final object Companion { // space.iseki.executables.pe/PEFile.Summary.Companion|null[0]
            final val $childSerializers // space.iseki.executables.pe/PEFile.Summary.Companion.$childSerializers|{}$childSerializers[0]

            final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/PEFile.Summary> // space.iseki.executables.pe/PEFile.Summary.Companion.serializer|serializer(){}[0]
        }
    }

    final inner class Section : space.iseki.executables.common/ReadableSection { // space.iseki.executables.pe/PEFile.Section|null[0]
        final val characteristics // space.iseki.executables.pe/PEFile.Section.characteristics|{}characteristics[0]
            final fun <get-characteristics>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/PEFile.Section.characteristics.<get-characteristics>|<get-characteristics>(){}[0]
        final val header // space.iseki.executables.pe/PEFile.Section.header|{}header[0]
            final fun <get-header>(): space.iseki.executables.common/ReadableStructure // space.iseki.executables.pe/PEFile.Section.header.<get-header>|<get-header>(){}[0]
        final val name // space.iseki.executables.pe/PEFile.Section.name|{}name[0]
            final fun <get-name>(): kotlin/String // space.iseki.executables.pe/PEFile.Section.name.<get-name>|<get-name>(){}[0]
        final val numberOfLinenumbers // space.iseki.executables.pe/PEFile.Section.numberOfLinenumbers|{}numberOfLinenumbers[0]
            final fun <get-numberOfLinenumbers>(): kotlin/UShort // space.iseki.executables.pe/PEFile.Section.numberOfLinenumbers.<get-numberOfLinenumbers>|<get-numberOfLinenumbers>(){}[0]
        final val numberOfRelocations // space.iseki.executables.pe/PEFile.Section.numberOfRelocations|{}numberOfRelocations[0]
            final fun <get-numberOfRelocations>(): kotlin/UShort // space.iseki.executables.pe/PEFile.Section.numberOfRelocations.<get-numberOfRelocations>|<get-numberOfRelocations>(){}[0]
        final val pointerToLinenumbers // space.iseki.executables.pe/PEFile.Section.pointerToLinenumbers|{}pointerToLinenumbers[0]
            final fun <get-pointerToLinenumbers>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/PEFile.Section.pointerToLinenumbers.<get-pointerToLinenumbers>|<get-pointerToLinenumbers>(){}[0]
        final val pointerToRawData // space.iseki.executables.pe/PEFile.Section.pointerToRawData|{}pointerToRawData[0]
            final fun <get-pointerToRawData>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/PEFile.Section.pointerToRawData.<get-pointerToRawData>|<get-pointerToRawData>(){}[0]
        final val pointerToRelocations // space.iseki.executables.pe/PEFile.Section.pointerToRelocations|{}pointerToRelocations[0]
            final fun <get-pointerToRelocations>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/PEFile.Section.pointerToRelocations.<get-pointerToRelocations>|<get-pointerToRelocations>(){}[0]
        final val size // space.iseki.executables.pe/PEFile.Section.size|{}size[0]
            final fun <get-size>(): kotlin/Long // space.iseki.executables.pe/PEFile.Section.size.<get-size>|<get-size>(){}[0]
        final val sizeOfRawData // space.iseki.executables.pe/PEFile.Section.sizeOfRawData|{}sizeOfRawData[0]
            final fun <get-sizeOfRawData>(): kotlin/UInt // space.iseki.executables.pe/PEFile.Section.sizeOfRawData.<get-sizeOfRawData>|<get-sizeOfRawData>(){}[0]
        final val tableItem // space.iseki.executables.pe/PEFile.Section.tableItem|{}tableItem[0]
            final fun <get-tableItem>(): space.iseki.executables.pe/SectionTableItem // space.iseki.executables.pe/PEFile.Section.tableItem.<get-tableItem>|<get-tableItem>(){}[0]
        final val virtualAddress // space.iseki.executables.pe/PEFile.Section.virtualAddress|{}virtualAddress[0]
            final fun <get-virtualAddress>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/PEFile.Section.virtualAddress.<get-virtualAddress>|<get-virtualAddress>(){}[0]
        final val virtualSize // space.iseki.executables.pe/PEFile.Section.virtualSize|{}virtualSize[0]
            final fun <get-virtualSize>(): kotlin/UInt // space.iseki.executables.pe/PEFile.Section.virtualSize.<get-virtualSize>|<get-virtualSize>(){}[0]

        final fun readAtMost(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/Int // space.iseki.executables.pe/PEFile.Section.readAtMost|readAtMost(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.pe/PEFile.Section.toString|toString(){}[0]
    }

    final object Companion : space.iseki.executables.common/FileFormat<space.iseki.executables.pe/PEFile> { // space.iseki.executables.pe/PEFile.Companion|null[0]
        final fun open(space.iseki.executables.common/DataAccessor): space.iseki.executables.pe/PEFile // space.iseki.executables.pe/PEFile.Companion.open|open(space.iseki.executables.common.DataAccessor){}[0]
        final fun toString(): kotlin/String // space.iseki.executables.pe/PEFile.Companion.toString|toString(){}[0]
    }
}

final class space.iseki.executables.pe/PEImportSymbol : space.iseki.executables.common/ImportSymbol { // space.iseki.executables.pe/PEImportSymbol|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/UShort? = ..., kotlin/Boolean = ...) // space.iseki.executables.pe/PEImportSymbol.<init>|<init>(kotlin.String;kotlin.String;kotlin.UShort?;kotlin.Boolean){}[0]

    final val fields // space.iseki.executables.pe/PEImportSymbol.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe/PEImportSymbol.fields.<get-fields>|<get-fields>(){}[0]
    final val file // space.iseki.executables.pe/PEImportSymbol.file|{}file[0]
        final fun <get-file>(): kotlin/String // space.iseki.executables.pe/PEImportSymbol.file.<get-file>|<get-file>(){}[0]
    final val isOrdinal // space.iseki.executables.pe/PEImportSymbol.isOrdinal|{}isOrdinal[0]
        final fun <get-isOrdinal>(): kotlin/Boolean // space.iseki.executables.pe/PEImportSymbol.isOrdinal.<get-isOrdinal>|<get-isOrdinal>(){}[0]
    final val name // space.iseki.executables.pe/PEImportSymbol.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.pe/PEImportSymbol.name.<get-name>|<get-name>(){}[0]
    final val ordinal // space.iseki.executables.pe/PEImportSymbol.ordinal|{}ordinal[0]
        final fun <get-ordinal>(): kotlin/UShort? // space.iseki.executables.pe/PEImportSymbol.ordinal.<get-ordinal>|<get-ordinal>(){}[0]

    final fun _component3-XRpZGF0(): kotlin/UShort? // space.iseki.executables.pe/PEImportSymbol._component3-XRpZGF0|_component3-XRpZGF0(){}[0]
    final fun component1(): kotlin/String // space.iseki.executables.pe/PEImportSymbol.component1|component1(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.pe/PEImportSymbol.component2|component2(){}[0]
    final fun component4(): kotlin/Boolean // space.iseki.executables.pe/PEImportSymbol.component4|component4(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/PEImportSymbol.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/PEImportSymbol.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/PEImportSymbol.toString|toString(){}[0]
}

final class space.iseki.executables.pe/SectionTableItem : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.pe/SectionTableItem|null[0]
    final val characteristics // space.iseki.executables.pe/SectionTableItem.characteristics|{}characteristics[0]
        final fun <get-characteristics>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionTableItem.characteristics.<get-characteristics>|<get-characteristics>(){}[0]
    final val fields // space.iseki.executables.pe/SectionTableItem.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe/SectionTableItem.fields.<get-fields>|<get-fields>(){}[0]
    final val name // space.iseki.executables.pe/SectionTableItem.name|{}name[0]
        final fun <get-name>(): kotlin/String // space.iseki.executables.pe/SectionTableItem.name.<get-name>|<get-name>(){}[0]
    final val numberOfLinenumbers // space.iseki.executables.pe/SectionTableItem.numberOfLinenumbers|{}numberOfLinenumbers[0]
        final fun <get-numberOfLinenumbers>(): kotlin/UShort // space.iseki.executables.pe/SectionTableItem.numberOfLinenumbers.<get-numberOfLinenumbers>|<get-numberOfLinenumbers>(){}[0]
    final val numberOfRelocations // space.iseki.executables.pe/SectionTableItem.numberOfRelocations|{}numberOfRelocations[0]
        final fun <get-numberOfRelocations>(): kotlin/UShort // space.iseki.executables.pe/SectionTableItem.numberOfRelocations.<get-numberOfRelocations>|<get-numberOfRelocations>(){}[0]
    final val pointerToLinenumbers // space.iseki.executables.pe/SectionTableItem.pointerToLinenumbers|{}pointerToLinenumbers[0]
        final fun <get-pointerToLinenumbers>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.pointerToLinenumbers.<get-pointerToLinenumbers>|<get-pointerToLinenumbers>(){}[0]
    final val pointerToRawData // space.iseki.executables.pe/SectionTableItem.pointerToRawData|{}pointerToRawData[0]
        final fun <get-pointerToRawData>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.pointerToRawData.<get-pointerToRawData>|<get-pointerToRawData>(){}[0]
    final val pointerToRelocations // space.iseki.executables.pe/SectionTableItem.pointerToRelocations|{}pointerToRelocations[0]
        final fun <get-pointerToRelocations>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.pointerToRelocations.<get-pointerToRelocations>|<get-pointerToRelocations>(){}[0]
    final val sizeOfRawData // space.iseki.executables.pe/SectionTableItem.sizeOfRawData|{}sizeOfRawData[0]
        final fun <get-sizeOfRawData>(): kotlin/UInt // space.iseki.executables.pe/SectionTableItem.sizeOfRawData.<get-sizeOfRawData>|<get-sizeOfRawData>(){}[0]
    final val virtualAddress // space.iseki.executables.pe/SectionTableItem.virtualAddress|{}virtualAddress[0]
        final fun <get-virtualAddress>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.virtualAddress.<get-virtualAddress>|<get-virtualAddress>(){}[0]
    final val virtualSize // space.iseki.executables.pe/SectionTableItem.virtualSize|{}virtualSize[0]
        final fun <get-virtualSize>(): kotlin/UInt // space.iseki.executables.pe/SectionTableItem.virtualSize.<get-virtualSize>|<get-virtualSize>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.pe/SectionTableItem.component1|component1(){}[0]
    final fun component10(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionTableItem.component10|component10(){}[0]
    final fun component2(): kotlin/UInt // space.iseki.executables.pe/SectionTableItem.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.pe/SectionTableItem.component4|component4(){}[0]
    final fun component5(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.component5|component5(){}[0]
    final fun component6(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/SectionTableItem.component7|component7(){}[0]
    final fun component8(): kotlin/UShort // space.iseki.executables.pe/SectionTableItem.component8|component8(){}[0]
    final fun component9(): kotlin/UShort // space.iseki.executables.pe/SectionTableItem.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/SectionTableItem.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/SectionTableItem.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/SectionTableItem.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe/SectionTableItem> { // space.iseki.executables.pe/SectionTableItem.$serializer|null[0]
        final val descriptor // space.iseki.executables.pe/SectionTableItem.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/SectionTableItem.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe/SectionTableItem.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/SectionTableItem // space.iseki.executables.pe/SectionTableItem.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/SectionTableItem) // space.iseki.executables.pe/SectionTableItem.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.SectionTableItem){}[0]
    }

    final object Companion { // space.iseki.executables.pe/SectionTableItem.Companion|null[0]
        final const val LENGTH // space.iseki.executables.pe/SectionTableItem.Companion.LENGTH|{}LENGTH[0]
            final fun <get-LENGTH>(): kotlin/Int // space.iseki.executables.pe/SectionTableItem.Companion.LENGTH.<get-LENGTH>|<get-LENGTH>(){}[0]

        final fun parse(kotlin/ByteArray, kotlin/Int): space.iseki.executables.pe/SectionTableItem // space.iseki.executables.pe/SectionTableItem.Companion.parse|parse(kotlin.ByteArray;kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/SectionTableItem> // space.iseki.executables.pe/SectionTableItem.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.pe/StandardHeader : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.pe/StandardHeader|null[0]
    final val addressOfEntryPoint // space.iseki.executables.pe/StandardHeader.addressOfEntryPoint|{}addressOfEntryPoint[0]
        final fun <get-addressOfEntryPoint>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/StandardHeader.addressOfEntryPoint.<get-addressOfEntryPoint>|<get-addressOfEntryPoint>(){}[0]
    final val baseOfCode // space.iseki.executables.pe/StandardHeader.baseOfCode|{}baseOfCode[0]
        final fun <get-baseOfCode>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/StandardHeader.baseOfCode.<get-baseOfCode>|<get-baseOfCode>(){}[0]
    final val baseOfData // space.iseki.executables.pe/StandardHeader.baseOfData|{}baseOfData[0]
        final fun <get-baseOfData>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/StandardHeader.baseOfData.<get-baseOfData>|<get-baseOfData>(){}[0]
    final val fields // space.iseki.executables.pe/StandardHeader.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe/StandardHeader.fields.<get-fields>|<get-fields>(){}[0]
    final val magic // space.iseki.executables.pe/StandardHeader.magic|{}magic[0]
        final fun <get-magic>(): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/StandardHeader.magic.<get-magic>|<get-magic>(){}[0]
    final val majorLinkerVersion // space.iseki.executables.pe/StandardHeader.majorLinkerVersion|{}majorLinkerVersion[0]
        final fun <get-majorLinkerVersion>(): kotlin/Byte // space.iseki.executables.pe/StandardHeader.majorLinkerVersion.<get-majorLinkerVersion>|<get-majorLinkerVersion>(){}[0]
    final val minorLinkerVersion // space.iseki.executables.pe/StandardHeader.minorLinkerVersion|{}minorLinkerVersion[0]
        final fun <get-minorLinkerVersion>(): kotlin/Byte // space.iseki.executables.pe/StandardHeader.minorLinkerVersion.<get-minorLinkerVersion>|<get-minorLinkerVersion>(){}[0]
    final val sizeOfCode // space.iseki.executables.pe/StandardHeader.sizeOfCode|{}sizeOfCode[0]
        final fun <get-sizeOfCode>(): kotlin/UInt // space.iseki.executables.pe/StandardHeader.sizeOfCode.<get-sizeOfCode>|<get-sizeOfCode>(){}[0]
    final val sizeOfInitializedData // space.iseki.executables.pe/StandardHeader.sizeOfInitializedData|{}sizeOfInitializedData[0]
        final fun <get-sizeOfInitializedData>(): kotlin/UInt // space.iseki.executables.pe/StandardHeader.sizeOfInitializedData.<get-sizeOfInitializedData>|<get-sizeOfInitializedData>(){}[0]
    final val sizeOfUninitializedData // space.iseki.executables.pe/StandardHeader.sizeOfUninitializedData|{}sizeOfUninitializedData[0]
        final fun <get-sizeOfUninitializedData>(): kotlin/UInt // space.iseki.executables.pe/StandardHeader.sizeOfUninitializedData.<get-sizeOfUninitializedData>|<get-sizeOfUninitializedData>(){}[0]

    final fun component1(): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/StandardHeader.component1|component1(){}[0]
    final fun component2(): kotlin/Byte // space.iseki.executables.pe/StandardHeader.component2|component2(){}[0]
    final fun component3(): kotlin/Byte // space.iseki.executables.pe/StandardHeader.component3|component3(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.pe/StandardHeader.component4|component4(){}[0]
    final fun component5(): kotlin/UInt // space.iseki.executables.pe/StandardHeader.component5|component5(){}[0]
    final fun component6(): kotlin/UInt // space.iseki.executables.pe/StandardHeader.component6|component6(){}[0]
    final fun component7(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/StandardHeader.component7|component7(){}[0]
    final fun component8(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/StandardHeader.component8|component8(){}[0]
    final fun component9(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/StandardHeader.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/StandardHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/StandardHeader.hashCode|hashCode(){}[0]
    final fun length(): kotlin/Int // space.iseki.executables.pe/StandardHeader.length|length(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/StandardHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe/StandardHeader> { // space.iseki.executables.pe/StandardHeader.$serializer|null[0]
        final val descriptor // space.iseki.executables.pe/StandardHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/StandardHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe/StandardHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/StandardHeader // space.iseki.executables.pe/StandardHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/StandardHeader) // space.iseki.executables.pe/StandardHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.StandardHeader){}[0]
    }

    final object Companion { // space.iseki.executables.pe/StandardHeader.Companion|null[0]
        final const val MAX_LENGTH // space.iseki.executables.pe/StandardHeader.Companion.MAX_LENGTH|{}MAX_LENGTH[0]
            final fun <get-MAX_LENGTH>(): kotlin/Int // space.iseki.executables.pe/StandardHeader.Companion.MAX_LENGTH.<get-MAX_LENGTH>|<get-MAX_LENGTH>(){}[0]

        final fun parse(kotlin/ByteArray, kotlin/Int): space.iseki.executables.pe/StandardHeader // space.iseki.executables.pe/StandardHeader.Companion.parse|parse(kotlin.ByteArray;kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/StandardHeader> // space.iseki.executables.pe/StandardHeader.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.pe/WindowsSpecifiedHeader : space.iseki.executables.common/ReadableStructure { // space.iseki.executables.pe/WindowsSpecifiedHeader|null[0]
    final val architecture // space.iseki.executables.pe/WindowsSpecifiedHeader.architecture|{}architecture[0]
        final fun <get-architecture>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.architecture.<get-architecture>|<get-architecture>(){}[0]
    final val baseRelocationTable // space.iseki.executables.pe/WindowsSpecifiedHeader.baseRelocationTable|{}baseRelocationTable[0]
        final fun <get-baseRelocationTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.baseRelocationTable.<get-baseRelocationTable>|<get-baseRelocationTable>(){}[0]
    final val boundImport // space.iseki.executables.pe/WindowsSpecifiedHeader.boundImport|{}boundImport[0]
        final fun <get-boundImport>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.boundImport.<get-boundImport>|<get-boundImport>(){}[0]
    final val certificateTable // space.iseki.executables.pe/WindowsSpecifiedHeader.certificateTable|{}certificateTable[0]
        final fun <get-certificateTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.certificateTable.<get-certificateTable>|<get-certificateTable>(){}[0]
    final val checkSum // space.iseki.executables.pe/WindowsSpecifiedHeader.checkSum|{}checkSum[0]
        final fun <get-checkSum>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.checkSum.<get-checkSum>|<get-checkSum>(){}[0]
    final val clrRuntimeHeader // space.iseki.executables.pe/WindowsSpecifiedHeader.clrRuntimeHeader|{}clrRuntimeHeader[0]
        final fun <get-clrRuntimeHeader>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.clrRuntimeHeader.<get-clrRuntimeHeader>|<get-clrRuntimeHeader>(){}[0]
    final val debug // space.iseki.executables.pe/WindowsSpecifiedHeader.debug|{}debug[0]
        final fun <get-debug>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.debug.<get-debug>|<get-debug>(){}[0]
    final val delayImportDescriptor // space.iseki.executables.pe/WindowsSpecifiedHeader.delayImportDescriptor|{}delayImportDescriptor[0]
        final fun <get-delayImportDescriptor>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.delayImportDescriptor.<get-delayImportDescriptor>|<get-delayImportDescriptor>(){}[0]
    final val dllCharacteristics // space.iseki.executables.pe/WindowsSpecifiedHeader.dllCharacteristics|{}dllCharacteristics[0]
        final fun <get-dllCharacteristics>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/WindowsSpecifiedHeader.dllCharacteristics.<get-dllCharacteristics>|<get-dllCharacteristics>(){}[0]
    final val exceptionTable // space.iseki.executables.pe/WindowsSpecifiedHeader.exceptionTable|{}exceptionTable[0]
        final fun <get-exceptionTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.exceptionTable.<get-exceptionTable>|<get-exceptionTable>(){}[0]
    final val exportTable // space.iseki.executables.pe/WindowsSpecifiedHeader.exportTable|{}exportTable[0]
        final fun <get-exportTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.exportTable.<get-exportTable>|<get-exportTable>(){}[0]
    final val fields // space.iseki.executables.pe/WindowsSpecifiedHeader.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any> // space.iseki.executables.pe/WindowsSpecifiedHeader.fields.<get-fields>|<get-fields>(){}[0]
    final val fileAlignment // space.iseki.executables.pe/WindowsSpecifiedHeader.fileAlignment|{}fileAlignment[0]
        final fun <get-fileAlignment>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.fileAlignment.<get-fileAlignment>|<get-fileAlignment>(){}[0]
    final val globalPtr // space.iseki.executables.pe/WindowsSpecifiedHeader.globalPtr|{}globalPtr[0]
        final fun <get-globalPtr>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.globalPtr.<get-globalPtr>|<get-globalPtr>(){}[0]
    final val iat // space.iseki.executables.pe/WindowsSpecifiedHeader.iat|{}iat[0]
        final fun <get-iat>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.iat.<get-iat>|<get-iat>(){}[0]
    final val imageBase // space.iseki.executables.pe/WindowsSpecifiedHeader.imageBase|{}imageBase[0]
        final fun <get-imageBase>(): space.iseki.executables.common/Address64 // space.iseki.executables.pe/WindowsSpecifiedHeader.imageBase.<get-imageBase>|<get-imageBase>(){}[0]
    final val importTable // space.iseki.executables.pe/WindowsSpecifiedHeader.importTable|{}importTable[0]
        final fun <get-importTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.importTable.<get-importTable>|<get-importTable>(){}[0]
    final val loadConfigTable // space.iseki.executables.pe/WindowsSpecifiedHeader.loadConfigTable|{}loadConfigTable[0]
        final fun <get-loadConfigTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.loadConfigTable.<get-loadConfigTable>|<get-loadConfigTable>(){}[0]
    final val loaderFlags // space.iseki.executables.pe/WindowsSpecifiedHeader.loaderFlags|{}loaderFlags[0]
        final fun <get-loaderFlags>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.loaderFlags.<get-loaderFlags>|<get-loaderFlags>(){}[0]
    final val magic // space.iseki.executables.pe/WindowsSpecifiedHeader.magic|{}magic[0]
        final fun <get-magic>(): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/WindowsSpecifiedHeader.magic.<get-magic>|<get-magic>(){}[0]
    final val majorImageVersion // space.iseki.executables.pe/WindowsSpecifiedHeader.majorImageVersion|{}majorImageVersion[0]
        final fun <get-majorImageVersion>(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.majorImageVersion.<get-majorImageVersion>|<get-majorImageVersion>(){}[0]
    final val majorOperatingSystemVersion // space.iseki.executables.pe/WindowsSpecifiedHeader.majorOperatingSystemVersion|{}majorOperatingSystemVersion[0]
        final fun <get-majorOperatingSystemVersion>(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.majorOperatingSystemVersion.<get-majorOperatingSystemVersion>|<get-majorOperatingSystemVersion>(){}[0]
    final val majorSubsystemVersion // space.iseki.executables.pe/WindowsSpecifiedHeader.majorSubsystemVersion|{}majorSubsystemVersion[0]
        final fun <get-majorSubsystemVersion>(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.majorSubsystemVersion.<get-majorSubsystemVersion>|<get-majorSubsystemVersion>(){}[0]
    final val minorImageVersion // space.iseki.executables.pe/WindowsSpecifiedHeader.minorImageVersion|{}minorImageVersion[0]
        final fun <get-minorImageVersion>(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.minorImageVersion.<get-minorImageVersion>|<get-minorImageVersion>(){}[0]
    final val minorOperatingSystemVersion // space.iseki.executables.pe/WindowsSpecifiedHeader.minorOperatingSystemVersion|{}minorOperatingSystemVersion[0]
        final fun <get-minorOperatingSystemVersion>(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.minorOperatingSystemVersion.<get-minorOperatingSystemVersion>|<get-minorOperatingSystemVersion>(){}[0]
    final val minorSubsystemVersion // space.iseki.executables.pe/WindowsSpecifiedHeader.minorSubsystemVersion|{}minorSubsystemVersion[0]
        final fun <get-minorSubsystemVersion>(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.minorSubsystemVersion.<get-minorSubsystemVersion>|<get-minorSubsystemVersion>(){}[0]
    final val numbersOfRvaAndSizes // space.iseki.executables.pe/WindowsSpecifiedHeader.numbersOfRvaAndSizes|{}numbersOfRvaAndSizes[0]
        final fun <get-numbersOfRvaAndSizes>(): kotlin/Int // space.iseki.executables.pe/WindowsSpecifiedHeader.numbersOfRvaAndSizes.<get-numbersOfRvaAndSizes>|<get-numbersOfRvaAndSizes>(){}[0]
    final val resourceTable // space.iseki.executables.pe/WindowsSpecifiedHeader.resourceTable|{}resourceTable[0]
        final fun <get-resourceTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.resourceTable.<get-resourceTable>|<get-resourceTable>(){}[0]
    final val rvaList // space.iseki.executables.pe/WindowsSpecifiedHeader.rvaList|{}rvaList[0]
        final fun <get-rvaList>(): kotlin.collections/Map<kotlin/String, space.iseki.executables.pe/DataDirectoryItem> // space.iseki.executables.pe/WindowsSpecifiedHeader.rvaList.<get-rvaList>|<get-rvaList>(){}[0]
    final val sectionAlignment // space.iseki.executables.pe/WindowsSpecifiedHeader.sectionAlignment|{}sectionAlignment[0]
        final fun <get-sectionAlignment>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.sectionAlignment.<get-sectionAlignment>|<get-sectionAlignment>(){}[0]
    final val sizeOfHeaders // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfHeaders|{}sizeOfHeaders[0]
        final fun <get-sizeOfHeaders>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfHeaders.<get-sizeOfHeaders>|<get-sizeOfHeaders>(){}[0]
    final val sizeOfHeapCommit // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfHeapCommit|{}sizeOfHeapCommit[0]
        final fun <get-sizeOfHeapCommit>(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfHeapCommit.<get-sizeOfHeapCommit>|<get-sizeOfHeapCommit>(){}[0]
    final val sizeOfHeapReserve // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfHeapReserve|{}sizeOfHeapReserve[0]
        final fun <get-sizeOfHeapReserve>(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfHeapReserve.<get-sizeOfHeapReserve>|<get-sizeOfHeapReserve>(){}[0]
    final val sizeOfImage // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfImage|{}sizeOfImage[0]
        final fun <get-sizeOfImage>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfImage.<get-sizeOfImage>|<get-sizeOfImage>(){}[0]
    final val sizeOfStackCommit // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfStackCommit|{}sizeOfStackCommit[0]
        final fun <get-sizeOfStackCommit>(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfStackCommit.<get-sizeOfStackCommit>|<get-sizeOfStackCommit>(){}[0]
    final val sizeOfStackReserve // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfStackReserve|{}sizeOfStackReserve[0]
        final fun <get-sizeOfStackReserve>(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.sizeOfStackReserve.<get-sizeOfStackReserve>|<get-sizeOfStackReserve>(){}[0]
    final val subsystem // space.iseki.executables.pe/WindowsSpecifiedHeader.subsystem|{}subsystem[0]
        final fun <get-subsystem>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSpecifiedHeader.subsystem.<get-subsystem>|<get-subsystem>(){}[0]
    final val tlsTable // space.iseki.executables.pe/WindowsSpecifiedHeader.tlsTable|{}tlsTable[0]
        final fun <get-tlsTable>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.tlsTable.<get-tlsTable>|<get-tlsTable>(){}[0]
    final val win32VersionValue // space.iseki.executables.pe/WindowsSpecifiedHeader.win32VersionValue|{}win32VersionValue[0]
        final fun <get-win32VersionValue>(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.win32VersionValue.<get-win32VersionValue>|<get-win32VersionValue>(){}[0]

    final fun component1(): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/WindowsSpecifiedHeader.component1|component1(){}[0]
    final fun component10(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.component10|component10(){}[0]
    final fun component11(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component11|component11(){}[0]
    final fun component12(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component12|component12(){}[0]
    final fun component13(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component13|component13(){}[0]
    final fun component14(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component14|component14(){}[0]
    final fun component15(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSpecifiedHeader.component15|component15(){}[0]
    final fun component16(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/WindowsSpecifiedHeader.component16|component16(){}[0]
    final fun component17(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.component17|component17(){}[0]
    final fun component18(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.component18|component18(){}[0]
    final fun component19(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.component19|component19(){}[0]
    final fun component2(): space.iseki.executables.common/Address64 // space.iseki.executables.pe/WindowsSpecifiedHeader.component2|component2(){}[0]
    final fun component20(): kotlin/ULong // space.iseki.executables.pe/WindowsSpecifiedHeader.component20|component20(){}[0]
    final fun component21(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component21|component21(){}[0]
    final fun component22(): kotlin/Int // space.iseki.executables.pe/WindowsSpecifiedHeader.component22|component22(){}[0]
    final fun component23(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component23|component23(){}[0]
    final fun component24(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component24|component24(){}[0]
    final fun component25(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component25|component25(){}[0]
    final fun component26(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component26|component26(){}[0]
    final fun component27(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component27|component27(){}[0]
    final fun component28(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component28|component28(){}[0]
    final fun component29(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component29|component29(){}[0]
    final fun component3(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component3|component3(){}[0]
    final fun component30(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component30|component30(){}[0]
    final fun component31(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component31|component31(){}[0]
    final fun component32(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component32|component32(){}[0]
    final fun component33(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component33|component33(){}[0]
    final fun component34(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component34|component34(){}[0]
    final fun component35(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component35|component35(){}[0]
    final fun component36(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component36|component36(){}[0]
    final fun component37(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/WindowsSpecifiedHeader.component37|component37(){}[0]
    final fun component4(): kotlin/UInt // space.iseki.executables.pe/WindowsSpecifiedHeader.component4|component4(){}[0]
    final fun component5(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.component5|component5(){}[0]
    final fun component6(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.component6|component6(){}[0]
    final fun component7(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.component7|component7(){}[0]
    final fun component8(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.component8|component8(){}[0]
    final fun component9(): kotlin/UShort // space.iseki.executables.pe/WindowsSpecifiedHeader.component9|component9(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/WindowsSpecifiedHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/WindowsSpecifiedHeader.hashCode|hashCode(){}[0]
    final fun length(): kotlin/Int // space.iseki.executables.pe/WindowsSpecifiedHeader.length|length(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/WindowsSpecifiedHeader.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.pe/WindowsSpecifiedHeader> { // space.iseki.executables.pe/WindowsSpecifiedHeader.$serializer|null[0]
        final val descriptor // space.iseki.executables.pe/WindowsSpecifiedHeader.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/WindowsSpecifiedHeader.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.pe/WindowsSpecifiedHeader.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/WindowsSpecifiedHeader // space.iseki.executables.pe/WindowsSpecifiedHeader.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/WindowsSpecifiedHeader) // space.iseki.executables.pe/WindowsSpecifiedHeader.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.WindowsSpecifiedHeader){}[0]
    }

    final object Companion { // space.iseki.executables.pe/WindowsSpecifiedHeader.Companion|null[0]
        final fun parse(kotlin/ByteArray, kotlin/Int, space.iseki.executables.pe/PE32Magic): space.iseki.executables.pe/WindowsSpecifiedHeader // space.iseki.executables.pe/WindowsSpecifiedHeader.Companion.parse|parse(kotlin.ByteArray;kotlin.Int;space.iseki.executables.pe.PE32Magic){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/WindowsSpecifiedHeader> // space.iseki.executables.pe/WindowsSpecifiedHeader.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.sbom/GoBuildInfo { // space.iseki.executables.sbom/GoBuildInfo|null[0]
    final val deps // space.iseki.executables.sbom/GoBuildInfo.deps|{}deps[0]
        final fun <get-deps>(): kotlin.collections/List<space.iseki.executables.sbom/GoModule> // space.iseki.executables.sbom/GoBuildInfo.deps.<get-deps>|<get-deps>(){}[0]
    final val goVersion // space.iseki.executables.sbom/GoBuildInfo.goVersion|{}goVersion[0]
        final fun <get-goVersion>(): kotlin/String // space.iseki.executables.sbom/GoBuildInfo.goVersion.<get-goVersion>|<get-goVersion>(){}[0]
    final val main // space.iseki.executables.sbom/GoBuildInfo.main|{}main[0]
        final fun <get-main>(): space.iseki.executables.sbom/GoModule? // space.iseki.executables.sbom/GoBuildInfo.main.<get-main>|<get-main>(){}[0]
    final val path // space.iseki.executables.sbom/GoBuildInfo.path|{}path[0]
        final fun <get-path>(): kotlin/String // space.iseki.executables.sbom/GoBuildInfo.path.<get-path>|<get-path>(){}[0]
    final val settings // space.iseki.executables.sbom/GoBuildInfo.settings|{}settings[0]
        final fun <get-settings>(): kotlin.collections/List<space.iseki.executables.sbom/GoBuildSetting> // space.iseki.executables.sbom/GoBuildInfo.settings.<get-settings>|<get-settings>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.sbom/GoBuildInfo.component1|component1(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.sbom/GoBuildInfo.component2|component2(){}[0]
    final fun component3(): space.iseki.executables.sbom/GoModule? // space.iseki.executables.sbom/GoBuildInfo.component3|component3(){}[0]
    final fun component4(): kotlin.collections/List<space.iseki.executables.sbom/GoModule> // space.iseki.executables.sbom/GoBuildInfo.component4|component4(){}[0]
    final fun component5(): kotlin.collections/List<space.iseki.executables.sbom/GoBuildSetting> // space.iseki.executables.sbom/GoBuildInfo.component5|component5(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.sbom/GoBuildInfo.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.sbom/GoBuildInfo.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.sbom/GoBuildInfo.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.sbom/GoBuildInfo> { // space.iseki.executables.sbom/GoBuildInfo.$serializer|null[0]
        final val descriptor // space.iseki.executables.sbom/GoBuildInfo.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.sbom/GoBuildInfo.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.sbom/GoBuildInfo.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.sbom/GoBuildInfo // space.iseki.executables.sbom/GoBuildInfo.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.sbom/GoBuildInfo) // space.iseki.executables.sbom/GoBuildInfo.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.sbom.GoBuildInfo){}[0]
    }

    final object Companion { // space.iseki.executables.sbom/GoBuildInfo.Companion|null[0]
        final val $childSerializers // space.iseki.executables.sbom/GoBuildInfo.Companion.$childSerializers|{}$childSerializers[0]

        final fun parse(kotlin/String): space.iseki.executables.sbom/GoBuildInfo // space.iseki.executables.sbom/GoBuildInfo.Companion.parse|parse(kotlin.String){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.sbom/GoBuildInfo> // space.iseki.executables.sbom/GoBuildInfo.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.sbom/GoBuildSetting { // space.iseki.executables.sbom/GoBuildSetting|null[0]
    final val key // space.iseki.executables.sbom/GoBuildSetting.key|{}key[0]
        final fun <get-key>(): kotlin/String // space.iseki.executables.sbom/GoBuildSetting.key.<get-key>|<get-key>(){}[0]
    final val value // space.iseki.executables.sbom/GoBuildSetting.value|{}value[0]
        final fun <get-value>(): kotlin/String // space.iseki.executables.sbom/GoBuildSetting.value.<get-value>|<get-value>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.sbom/GoBuildSetting.component1|component1(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.sbom/GoBuildSetting.component2|component2(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.sbom/GoBuildSetting.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.sbom/GoBuildSetting.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.sbom/GoBuildSetting.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.sbom/GoBuildSetting> { // space.iseki.executables.sbom/GoBuildSetting.$serializer|null[0]
        final val descriptor // space.iseki.executables.sbom/GoBuildSetting.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.sbom/GoBuildSetting.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.sbom/GoBuildSetting.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.sbom/GoBuildSetting // space.iseki.executables.sbom/GoBuildSetting.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.sbom/GoBuildSetting) // space.iseki.executables.sbom/GoBuildSetting.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.sbom.GoBuildSetting){}[0]
    }

    final object Companion { // space.iseki.executables.sbom/GoBuildSetting.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.sbom/GoBuildSetting> // space.iseki.executables.sbom/GoBuildSetting.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.sbom/GoModule { // space.iseki.executables.sbom/GoModule|null[0]
    final val path // space.iseki.executables.sbom/GoModule.path|{}path[0]
        final fun <get-path>(): kotlin/String // space.iseki.executables.sbom/GoModule.path.<get-path>|<get-path>(){}[0]
    final val purl // space.iseki.executables.sbom/GoModule.purl|{}purl[0]
        final fun <get-purl>(): kotlin/String // space.iseki.executables.sbom/GoModule.purl.<get-purl>|<get-purl>(){}[0]
    final val replace // space.iseki.executables.sbom/GoModule.replace|{}replace[0]
        final fun <get-replace>(): space.iseki.executables.sbom/GoModule? // space.iseki.executables.sbom/GoModule.replace.<get-replace>|<get-replace>(){}[0]
    final val sum // space.iseki.executables.sbom/GoModule.sum|{}sum[0]
        final fun <get-sum>(): kotlin/String? // space.iseki.executables.sbom/GoModule.sum.<get-sum>|<get-sum>(){}[0]
    final val version // space.iseki.executables.sbom/GoModule.version|{}version[0]
        final fun <get-version>(): kotlin/String // space.iseki.executables.sbom/GoModule.version.<get-version>|<get-version>(){}[0]

    final fun component1(): kotlin/String // space.iseki.executables.sbom/GoModule.component1|component1(){}[0]
    final fun component2(): kotlin/String // space.iseki.executables.sbom/GoModule.component2|component2(){}[0]
    final fun component3(): kotlin/String? // space.iseki.executables.sbom/GoModule.component3|component3(){}[0]
    final fun component4(): space.iseki.executables.sbom/GoModule? // space.iseki.executables.sbom/GoModule.component4|component4(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.sbom/GoModule.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.sbom/GoModule.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.sbom/GoModule.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<space.iseki.executables.sbom/GoModule> { // space.iseki.executables.sbom/GoModule.$serializer|null[0]
        final val descriptor // space.iseki.executables.sbom/GoModule.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.sbom/GoModule.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // space.iseki.executables.sbom/GoModule.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.sbom/GoModule // space.iseki.executables.sbom/GoModule.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.sbom/GoModule) // space.iseki.executables.sbom/GoModule.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.sbom.GoModule){}[0]
    }

    final object Companion { // space.iseki.executables.sbom/GoModule.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.sbom/GoModule> // space.iseki.executables.sbom/GoModule.Companion.serializer|serializer(){}[0]
    }
}

final class space.iseki.executables.sbom/GoSBom { // space.iseki.executables.sbom/GoSBom|null[0]
    final val buildInfo // space.iseki.executables.sbom/GoSBom.buildInfo|{}buildInfo[0]
        final fun <get-buildInfo>(): space.iseki.executables.sbom/GoBuildInfo? // space.iseki.executables.sbom/GoSBom.buildInfo.<get-buildInfo>|<get-buildInfo>(){}[0]

    final object Companion { // space.iseki.executables.sbom/GoSBom.Companion|null[0]
        final fun readFrom(space.iseki.executables.common/OpenedFile): space.iseki.executables.sbom/GoSBom // space.iseki.executables.sbom/GoSBom.Companion.readFrom|readFrom(space.iseki.executables.common.OpenedFile){}[0]
        final fun readFromOrNull(space.iseki.executables.common/OpenedFile): space.iseki.executables.sbom/GoSBom? // space.iseki.executables.sbom/GoSBom.Companion.readFromOrNull|readFromOrNull(space.iseki.executables.common.OpenedFile){}[0]
    }
}

final class space.iseki.executables.sbom/GoSBomReadingException : space.iseki.executables.sbom/SBomReadingException { // space.iseki.executables.sbom/GoSBomReadingException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // space.iseki.executables.sbom/GoSBomReadingException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

final class space.iseki.executables.sbom/SBomNotFoundException : space.iseki.executables.sbom/SBomReadingException { // space.iseki.executables.sbom/SBomNotFoundException|null[0]
    constructor <init>(kotlin/String) // space.iseki.executables.sbom/SBomNotFoundException.<init>|<init>(kotlin.String){}[0]
}

final value class space.iseki.executables.common/Address32 : kotlin/Comparable<space.iseki.executables.common/Address32> { // space.iseki.executables.common/Address32|null[0]
    constructor <init>(kotlin/UInt) // space.iseki.executables.common/Address32.<init>|<init>(kotlin.UInt){}[0]

    final val value // space.iseki.executables.common/Address32.value|{}value[0]
        final fun <get-value>(): kotlin/UInt // space.iseki.executables.common/Address32.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.common/Address32): kotlin/Int // space.iseki.executables.common/Address32.compareTo|compareTo(space.iseki.executables.common.Address32){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.common/Address32.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.common/Address32.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.common/Address32.toString|toString(){}[0]
    final inline fun alignDown(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.alignDown|alignDown(kotlin.UInt){}[0]
    final inline fun alignUp(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.alignUp|alignUp(kotlin.UInt){}[0]
    final inline fun and(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.and|and(kotlin.Int){}[0]
    final inline fun and(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.and|and(kotlin.UInt){}[0]
    final inline fun and(space.iseki.executables.common/Address32): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.and|and(space.iseki.executables.common.Address32){}[0]
    final inline fun inv(): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.inv|inv(){}[0]
    final inline fun isAlignedTo(kotlin/UInt): kotlin/Boolean // space.iseki.executables.common/Address32.isAlignedTo|isAlignedTo(kotlin.UInt){}[0]
    final inline fun minus(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.minus|minus(kotlin.Int){}[0]
    final inline fun minus(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.minus|minus(kotlin.UInt){}[0]
    final inline fun or(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.or|or(kotlin.Int){}[0]
    final inline fun or(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.or|or(kotlin.UInt){}[0]
    final inline fun or(space.iseki.executables.common/Address32): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.or|or(space.iseki.executables.common.Address32){}[0]
    final inline fun plus(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.plus|plus(kotlin.Int){}[0]
    final inline fun plus(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.plus|plus(kotlin.UInt){}[0]
    final inline fun rem(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.rem|rem(kotlin.Int){}[0]
    final inline fun rem(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.rem|rem(kotlin.UInt){}[0]
    final inline fun shl(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.shl|shl(kotlin.Int){}[0]
    final inline fun shr(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.shr|shr(kotlin.Int){}[0]
    final inline fun toInt(): kotlin/Int // space.iseki.executables.common/Address32.toInt|toInt(){}[0]
    final inline fun toUInt(): kotlin/UInt // space.iseki.executables.common/Address32.toUInt|toUInt(){}[0]
    final inline fun xor(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.xor|xor(kotlin.Int){}[0]
    final inline fun xor(kotlin/UInt): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.xor|xor(kotlin.UInt){}[0]
    final inline fun xor(space.iseki.executables.common/Address32): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.xor|xor(space.iseki.executables.common.Address32){}[0]

    final object Companion { // space.iseki.executables.common/Address32.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.common/Address32> // space.iseki.executables.common/Address32.Companion.serializer|serializer(){}[0]
        final fun toString(kotlin/Int): kotlin/String // space.iseki.executables.common/Address32.Companion.toString|toString(kotlin.Int){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<space.iseki.executables.common/Address32> { // space.iseki.executables.common/Address32.Serializer|null[0]
        final val descriptor // space.iseki.executables.common/Address32.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.common/Address32.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.common/Address32) // space.iseki.executables.common/Address32.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.common.Address32){}[0]
    }
}

final value class space.iseki.executables.common/Address32Array : kotlin.collections/Collection<space.iseki.executables.common/Address32> { // space.iseki.executables.common/Address32Array|null[0]
    constructor <init>(kotlin/UIntArray) // space.iseki.executables.common/Address32Array.<init>|<init>(kotlin.UIntArray){}[0]

    final val size // space.iseki.executables.common/Address32Array.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.common/Address32Array.size.<get-size>|<get-size>(){}[0]

    final fun contains(space.iseki.executables.common/Address32): kotlin/Boolean // space.iseki.executables.common/Address32Array.contains|contains(space.iseki.executables.common.Address32){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.common/Address32>): kotlin/Boolean // space.iseki.executables.common/Address32Array.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.common.Address32>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.common/Address32Array.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32Array.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.common/Address32Array.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.common/Address32Array.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.common/Address32> // space.iseki.executables.common/Address32Array.iterator|iterator(){}[0]
    final fun set(kotlin/Int, space.iseki.executables.common/Address32) // space.iseki.executables.common/Address32Array.set|set(kotlin.Int;space.iseki.executables.common.Address32){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.common/Address32Array.toString|toString(){}[0]
}

final value class space.iseki.executables.common/Address64 : kotlin/Comparable<space.iseki.executables.common/Address64> { // space.iseki.executables.common/Address64|null[0]
    constructor <init>(kotlin/ULong) // space.iseki.executables.common/Address64.<init>|<init>(kotlin.ULong){}[0]

    final val value // space.iseki.executables.common/Address64.value|{}value[0]
        final fun <get-value>(): kotlin/ULong // space.iseki.executables.common/Address64.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.common/Address64): kotlin/Int // space.iseki.executables.common/Address64.compareTo|compareTo(space.iseki.executables.common.Address64){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.common/Address64.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.common/Address64.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.common/Address64.toString|toString(){}[0]
    final inline fun alignDown(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.alignDown|alignDown(kotlin.ULong){}[0]
    final inline fun alignUp(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.alignUp|alignUp(kotlin.ULong){}[0]
    final inline fun and(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.and|and(kotlin.Long){}[0]
    final inline fun and(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.and|and(kotlin.ULong){}[0]
    final inline fun and(space.iseki.executables.common/Address64): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.and|and(space.iseki.executables.common.Address64){}[0]
    final inline fun inv(): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.inv|inv(){}[0]
    final inline fun isAlignedTo(kotlin/ULong): kotlin/Boolean // space.iseki.executables.common/Address64.isAlignedTo|isAlignedTo(kotlin.ULong){}[0]
    final inline fun minus(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.minus|minus(kotlin.Int){}[0]
    final inline fun minus(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.minus|minus(kotlin.Long){}[0]
    final inline fun minus(kotlin/UInt): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.minus|minus(kotlin.UInt){}[0]
    final inline fun minus(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.minus|minus(kotlin.ULong){}[0]
    final inline fun or(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.or|or(kotlin.Long){}[0]
    final inline fun or(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.or|or(kotlin.ULong){}[0]
    final inline fun or(space.iseki.executables.common/Address64): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.or|or(space.iseki.executables.common.Address64){}[0]
    final inline fun plus(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.plus|plus(kotlin.Int){}[0]
    final inline fun plus(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.plus|plus(kotlin.Long){}[0]
    final inline fun plus(kotlin/UInt): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.plus|plus(kotlin.UInt){}[0]
    final inline fun plus(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.plus|plus(kotlin.ULong){}[0]
    final inline fun rem(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.rem|rem(kotlin.Int){}[0]
    final inline fun rem(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.rem|rem(kotlin.Long){}[0]
    final inline fun rem(kotlin/UInt): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.rem|rem(kotlin.UInt){}[0]
    final inline fun rem(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.rem|rem(kotlin.ULong){}[0]
    final inline fun shl(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.shl|shl(kotlin.Int){}[0]
    final inline fun shr(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.shr|shr(kotlin.Int){}[0]
    final inline fun toLong(): kotlin/Long // space.iseki.executables.common/Address64.toLong|toLong(){}[0]
    final inline fun toULong(): kotlin/ULong // space.iseki.executables.common/Address64.toULong|toULong(){}[0]
    final inline fun xor(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.xor|xor(kotlin.Long){}[0]
    final inline fun xor(kotlin/ULong): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.xor|xor(kotlin.ULong){}[0]
    final inline fun xor(space.iseki.executables.common/Address64): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.xor|xor(space.iseki.executables.common.Address64){}[0]

    final object Companion { // space.iseki.executables.common/Address64.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.common/Address64> // space.iseki.executables.common/Address64.Companion.serializer|serializer(){}[0]
        final fun toString(kotlin/Long): kotlin/String // space.iseki.executables.common/Address64.Companion.toString|toString(kotlin.Long){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<space.iseki.executables.common/Address64> { // space.iseki.executables.common/Address64.Serializer|null[0]
        final val descriptor // space.iseki.executables.common/Address64.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.common/Address64.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.common/Address64) // space.iseki.executables.common/Address64.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.common.Address64){}[0]
    }
}

final value class space.iseki.executables.common/Address64Array : kotlin.collections/Collection<space.iseki.executables.common/Address64> { // space.iseki.executables.common/Address64Array|null[0]
    constructor <init>(kotlin/ULongArray) // space.iseki.executables.common/Address64Array.<init>|<init>(kotlin.ULongArray){}[0]

    final val size // space.iseki.executables.common/Address64Array.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.common/Address64Array.size.<get-size>|<get-size>(){}[0]

    final fun contains(space.iseki.executables.common/Address64): kotlin/Boolean // space.iseki.executables.common/Address64Array.contains|contains(space.iseki.executables.common.Address64){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.common/Address64>): kotlin/Boolean // space.iseki.executables.common/Address64Array.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.common.Address64>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.common/Address64Array.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64Array.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.common/Address64Array.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.common/Address64Array.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.common/Address64> // space.iseki.executables.common/Address64Array.iterator|iterator(){}[0]
    final fun set(kotlin/Int, space.iseki.executables.common/Address64) // space.iseki.executables.common/Address64Array.set|set(kotlin.Int;space.iseki.executables.common.Address64){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.common/Address64Array.toString|toString(){}[0]
}

final value class space.iseki.executables.common/TimeDateStamp32 : kotlin/Comparable<space.iseki.executables.common/TimeDateStamp32> { // space.iseki.executables.common/TimeDateStamp32|null[0]
    constructor <init>(kotlin/UInt) // space.iseki.executables.common/TimeDateStamp32.<init>|<init>(kotlin.UInt){}[0]

    final val value // space.iseki.executables.common/TimeDateStamp32.value|{}value[0]
        final fun <get-value>(): kotlin/UInt // space.iseki.executables.common/TimeDateStamp32.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.common/TimeDateStamp32): kotlin/Int // space.iseki.executables.common/TimeDateStamp32.compareTo|compareTo(space.iseki.executables.common.TimeDateStamp32){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.common/TimeDateStamp32.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.common/TimeDateStamp32.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.common/TimeDateStamp32.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.common/TimeDateStamp32.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.common/TimeDateStamp32> // space.iseki.executables.common/TimeDateStamp32.Companion.serializer|serializer(){}[0]
        final fun toString(kotlin/Int): kotlin/String // space.iseki.executables.common/TimeDateStamp32.Companion.toString|toString(kotlin.Int){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<space.iseki.executables.common/TimeDateStamp32> { // space.iseki.executables.common/TimeDateStamp32.Serializer|null[0]
        final val descriptor // space.iseki.executables.common/TimeDateStamp32.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.common/TimeDateStamp32.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.common/TimeDateStamp32 // space.iseki.executables.common/TimeDateStamp32.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.common/TimeDateStamp32) // space.iseki.executables.common/TimeDateStamp32.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.common.TimeDateStamp32){}[0]
    }
}

final value class space.iseki.executables.elf/ElfClass : kotlin/Comparable<space.iseki.executables.elf/ElfClass> { // space.iseki.executables.elf/ElfClass|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.elf/ElfClass.<init>|<init>(kotlin.Byte){}[0]

    final val value // space.iseki.executables.elf/ElfClass.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.elf/ElfClass.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfClass): kotlin/Int // space.iseki.executables.elf/ElfClass.compareTo|compareTo(space.iseki.executables.elf.ElfClass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfClass.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfClass.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfClass.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfClass.Companion|null[0]
        final val ELFCLASS32 // space.iseki.executables.elf/ElfClass.Companion.ELFCLASS32|{}ELFCLASS32[0]
            final fun <get-ELFCLASS32>(): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfClass.Companion.ELFCLASS32.<get-ELFCLASS32>|<get-ELFCLASS32>(){}[0]
        final val ELFCLASS64 // space.iseki.executables.elf/ElfClass.Companion.ELFCLASS64|{}ELFCLASS64[0]
            final fun <get-ELFCLASS64>(): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfClass.Companion.ELFCLASS64.<get-ELFCLASS64>|<get-ELFCLASS64>(){}[0]
        final val ELFCLASSNONE // space.iseki.executables.elf/ElfClass.Companion.ELFCLASSNONE|{}ELFCLASSNONE[0]
            final fun <get-ELFCLASSNONE>(): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfClass.Companion.ELFCLASSNONE.<get-ELFCLASSNONE>|<get-ELFCLASSNONE>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfClass> // space.iseki.executables.elf/ElfClass.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfClass.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfClass? // space.iseki.executables.elf/ElfClass.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfClass.Constants|null[0]
        final const val ELFCLASS32 // space.iseki.executables.elf/ElfClass.Constants.ELFCLASS32|{}ELFCLASS32[0]
            final fun <get-ELFCLASS32>(): kotlin/Byte // space.iseki.executables.elf/ElfClass.Constants.ELFCLASS32.<get-ELFCLASS32>|<get-ELFCLASS32>(){}[0]
        final const val ELFCLASS64 // space.iseki.executables.elf/ElfClass.Constants.ELFCLASS64|{}ELFCLASS64[0]
            final fun <get-ELFCLASS64>(): kotlin/Byte // space.iseki.executables.elf/ElfClass.Constants.ELFCLASS64.<get-ELFCLASS64>|<get-ELFCLASS64>(){}[0]
        final const val ELFCLASSNONE // space.iseki.executables.elf/ElfClass.Constants.ELFCLASSNONE|{}ELFCLASSNONE[0]
            final fun <get-ELFCLASSNONE>(): kotlin/Byte // space.iseki.executables.elf/ElfClass.Constants.ELFCLASSNONE.<get-ELFCLASSNONE>|<get-ELFCLASSNONE>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfData : kotlin/Comparable<space.iseki.executables.elf/ElfData> { // space.iseki.executables.elf/ElfData|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.elf/ElfData.<init>|<init>(kotlin.Byte){}[0]

    final val value // space.iseki.executables.elf/ElfData.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.elf/ElfData.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfData): kotlin/Int // space.iseki.executables.elf/ElfData.compareTo|compareTo(space.iseki.executables.elf.ElfData){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfData.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfData.Companion|null[0]
        final val ELFDATA2LSB // space.iseki.executables.elf/ElfData.Companion.ELFDATA2LSB|{}ELFDATA2LSB[0]
            final fun <get-ELFDATA2LSB>(): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfData.Companion.ELFDATA2LSB.<get-ELFDATA2LSB>|<get-ELFDATA2LSB>(){}[0]
        final val ELFDATA2MSB // space.iseki.executables.elf/ElfData.Companion.ELFDATA2MSB|{}ELFDATA2MSB[0]
            final fun <get-ELFDATA2MSB>(): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfData.Companion.ELFDATA2MSB.<get-ELFDATA2MSB>|<get-ELFDATA2MSB>(){}[0]
        final val ELFDATANONE // space.iseki.executables.elf/ElfData.Companion.ELFDATANONE|{}ELFDATANONE[0]
            final fun <get-ELFDATANONE>(): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfData.Companion.ELFDATANONE.<get-ELFDATANONE>|<get-ELFDATANONE>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfData> // space.iseki.executables.elf/ElfData.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfData.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfData? // space.iseki.executables.elf/ElfData.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfData.Constants|null[0]
        final const val ELFDATA2LSB // space.iseki.executables.elf/ElfData.Constants.ELFDATA2LSB|{}ELFDATA2LSB[0]
            final fun <get-ELFDATA2LSB>(): kotlin/Byte // space.iseki.executables.elf/ElfData.Constants.ELFDATA2LSB.<get-ELFDATA2LSB>|<get-ELFDATA2LSB>(){}[0]
        final const val ELFDATA2MSB // space.iseki.executables.elf/ElfData.Constants.ELFDATA2MSB|{}ELFDATA2MSB[0]
            final fun <get-ELFDATA2MSB>(): kotlin/Byte // space.iseki.executables.elf/ElfData.Constants.ELFDATA2MSB.<get-ELFDATA2MSB>|<get-ELFDATA2MSB>(){}[0]
        final const val ELFDATANONE // space.iseki.executables.elf/ElfData.Constants.ELFDATANONE|{}ELFDATANONE[0]
            final fun <get-ELFDATANONE>(): kotlin/Byte // space.iseki.executables.elf/ElfData.Constants.ELFDATANONE.<get-ELFDATANONE>|<get-ELFDATANONE>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfMachine : kotlin/Comparable<space.iseki.executables.elf/ElfMachine> { // space.iseki.executables.elf/ElfMachine|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.elf/ElfMachine.<init>|<init>(kotlin.Short){}[0]

    final val value // space.iseki.executables.elf/ElfMachine.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfMachine): kotlin/Int // space.iseki.executables.elf/ElfMachine.compareTo|compareTo(space.iseki.executables.elf.ElfMachine){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfMachine.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfMachine.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfMachine.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfMachine.Companion|null[0]
        final val ALPHA // space.iseki.executables.elf/ElfMachine.Companion.ALPHA|{}ALPHA[0]
            final fun <get-ALPHA>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ALPHA.<get-ALPHA>|<get-ALPHA>(){}[0]
        final val ARC // space.iseki.executables.elf/ElfMachine.Companion.ARC|{}ARC[0]
            final fun <get-ARC>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ARC.<get-ARC>|<get-ARC>(){}[0]
        final val ARC_A5 // space.iseki.executables.elf/ElfMachine.Companion.ARC_A5|{}ARC_A5[0]
            final fun <get-ARC_A5>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ARC_A5.<get-ARC_A5>|<get-ARC_A5>(){}[0]
        final val ARM // space.iseki.executables.elf/ElfMachine.Companion.ARM|{}ARM[0]
            final fun <get-ARM>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ARM.<get-ARM>|<get-ARM>(){}[0]
        final val AVR // space.iseki.executables.elf/ElfMachine.Companion.AVR|{}AVR[0]
            final fun <get-AVR>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.AVR.<get-AVR>|<get-AVR>(){}[0]
        final val COLDFIRE // space.iseki.executables.elf/ElfMachine.Companion.COLDFIRE|{}COLDFIRE[0]
            final fun <get-COLDFIRE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.COLDFIRE.<get-COLDFIRE>|<get-COLDFIRE>(){}[0]
        final val CRIS // space.iseki.executables.elf/ElfMachine.Companion.CRIS|{}CRIS[0]
            final fun <get-CRIS>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.CRIS.<get-CRIS>|<get-CRIS>(){}[0]
        final val D10V // space.iseki.executables.elf/ElfMachine.Companion.D10V|{}D10V[0]
            final fun <get-D10V>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.D10V.<get-D10V>|<get-D10V>(){}[0]
        final val D30V // space.iseki.executables.elf/ElfMachine.Companion.D30V|{}D30V[0]
            final fun <get-D30V>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.D30V.<get-D30V>|<get-D30V>(){}[0]
        final val FIREPATH // space.iseki.executables.elf/ElfMachine.Companion.FIREPATH|{}FIREPATH[0]
            final fun <get-FIREPATH>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.FIREPATH.<get-FIREPATH>|<get-FIREPATH>(){}[0]
        final val FR20 // space.iseki.executables.elf/ElfMachine.Companion.FR20|{}FR20[0]
            final fun <get-FR20>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.FR20.<get-FR20>|<get-FR20>(){}[0]
        final val FR30 // space.iseki.executables.elf/ElfMachine.Companion.FR30|{}FR30[0]
            final fun <get-FR30>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.FR30.<get-FR30>|<get-FR30>(){}[0]
        final val FX66 // space.iseki.executables.elf/ElfMachine.Companion.FX66|{}FX66[0]
            final fun <get-FX66>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.FX66.<get-FX66>|<get-FX66>(){}[0]
        final val H8S // space.iseki.executables.elf/ElfMachine.Companion.H8S|{}H8S[0]
            final fun <get-H8S>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.H8S.<get-H8S>|<get-H8S>(){}[0]
        final val H8_300 // space.iseki.executables.elf/ElfMachine.Companion.H8_300|{}H8_300[0]
            final fun <get-H8_300>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.H8_300.<get-H8_300>|<get-H8_300>(){}[0]
        final val H8_300H // space.iseki.executables.elf/ElfMachine.Companion.H8_300H|{}H8_300H[0]
            final fun <get-H8_300H>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.H8_300H.<get-H8_300H>|<get-H8_300H>(){}[0]
        final val H8_500 // space.iseki.executables.elf/ElfMachine.Companion.H8_500|{}H8_500[0]
            final fun <get-H8_500>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.H8_500.<get-H8_500>|<get-H8_500>(){}[0]
        final val HUANY // space.iseki.executables.elf/ElfMachine.Companion.HUANY|{}HUANY[0]
            final fun <get-HUANY>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.HUANY.<get-HUANY>|<get-HUANY>(){}[0]
        final val I386 // space.iseki.executables.elf/ElfMachine.Companion.I386|{}I386[0]
            final fun <get-I386>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.I386.<get-I386>|<get-I386>(){}[0]
        final val I860 // space.iseki.executables.elf/ElfMachine.Companion.I860|{}I860[0]
            final fun <get-I860>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.I860.<get-I860>|<get-I860>(){}[0]
        final val I960 // space.iseki.executables.elf/ElfMachine.Companion.I960|{}I960[0]
            final fun <get-I960>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.I960.<get-I960>|<get-I960>(){}[0]
        final val IA_64 // space.iseki.executables.elf/ElfMachine.Companion.IA_64|{}IA_64[0]
            final fun <get-IA_64>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.IA_64.<get-IA_64>|<get-IA_64>(){}[0]
        final val JAVELIN // space.iseki.executables.elf/ElfMachine.Companion.JAVELIN|{}JAVELIN[0]
            final fun <get-JAVELIN>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.JAVELIN.<get-JAVELIN>|<get-JAVELIN>(){}[0]
        final val M32 // space.iseki.executables.elf/ElfMachine.Companion.M32|{}M32[0]
            final fun <get-M32>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M32.<get-M32>|<get-M32>(){}[0]
        final val M32R // space.iseki.executables.elf/ElfMachine.Companion.M32R|{}M32R[0]
            final fun <get-M32R>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M32R.<get-M32R>|<get-M32R>(){}[0]
        final val M68HC05 // space.iseki.executables.elf/ElfMachine.Companion.M68HC05|{}M68HC05[0]
            final fun <get-M68HC05>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M68HC05.<get-M68HC05>|<get-M68HC05>(){}[0]
        final val M68HC08 // space.iseki.executables.elf/ElfMachine.Companion.M68HC08|{}M68HC08[0]
            final fun <get-M68HC08>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M68HC08.<get-M68HC08>|<get-M68HC08>(){}[0]
        final val M68HC11 // space.iseki.executables.elf/ElfMachine.Companion.M68HC11|{}M68HC11[0]
            final fun <get-M68HC11>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M68HC11.<get-M68HC11>|<get-M68HC11>(){}[0]
        final val M68HC12 // space.iseki.executables.elf/ElfMachine.Companion.M68HC12|{}M68HC12[0]
            final fun <get-M68HC12>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M68HC12.<get-M68HC12>|<get-M68HC12>(){}[0]
        final val M68HC16 // space.iseki.executables.elf/ElfMachine.Companion.M68HC16|{}M68HC16[0]
            final fun <get-M68HC16>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M68HC16.<get-M68HC16>|<get-M68HC16>(){}[0]
        final val M68K // space.iseki.executables.elf/ElfMachine.Companion.M68K|{}M68K[0]
            final fun <get-M68K>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M68K.<get-M68K>|<get-M68K>(){}[0]
        final val M88K // space.iseki.executables.elf/ElfMachine.Companion.M88K|{}M88K[0]
            final fun <get-M88K>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.M88K.<get-M88K>|<get-M88K>(){}[0]
        final val ME16 // space.iseki.executables.elf/ElfMachine.Companion.ME16|{}ME16[0]
            final fun <get-ME16>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ME16.<get-ME16>|<get-ME16>(){}[0]
        final val MIPS // space.iseki.executables.elf/ElfMachine.Companion.MIPS|{}MIPS[0]
            final fun <get-MIPS>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MIPS.<get-MIPS>|<get-MIPS>(){}[0]
        final val MIPS_RS3_LE // space.iseki.executables.elf/ElfMachine.Companion.MIPS_RS3_LE|{}MIPS_RS3_LE[0]
            final fun <get-MIPS_RS3_LE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MIPS_RS3_LE.<get-MIPS_RS3_LE>|<get-MIPS_RS3_LE>(){}[0]
        final val MIPS_X // space.iseki.executables.elf/ElfMachine.Companion.MIPS_X|{}MIPS_X[0]
            final fun <get-MIPS_X>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MIPS_X.<get-MIPS_X>|<get-MIPS_X>(){}[0]
        final val MMA // space.iseki.executables.elf/ElfMachine.Companion.MMA|{}MMA[0]
            final fun <get-MMA>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MMA.<get-MMA>|<get-MMA>(){}[0]
        final val MMIX // space.iseki.executables.elf/ElfMachine.Companion.MMIX|{}MMIX[0]
            final fun <get-MMIX>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MMIX.<get-MMIX>|<get-MMIX>(){}[0]
        final val MN10200 // space.iseki.executables.elf/ElfMachine.Companion.MN10200|{}MN10200[0]
            final fun <get-MN10200>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MN10200.<get-MN10200>|<get-MN10200>(){}[0]
        final val MN10300 // space.iseki.executables.elf/ElfMachine.Companion.MN10300|{}MN10300[0]
            final fun <get-MN10300>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.MN10300.<get-MN10300>|<get-MN10300>(){}[0]
        final val NCPU // space.iseki.executables.elf/ElfMachine.Companion.NCPU|{}NCPU[0]
            final fun <get-NCPU>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.NCPU.<get-NCPU>|<get-NCPU>(){}[0]
        final val NDR1 // space.iseki.executables.elf/ElfMachine.Companion.NDR1|{}NDR1[0]
            final fun <get-NDR1>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.NDR1.<get-NDR1>|<get-NDR1>(){}[0]
        final val NONE // space.iseki.executables.elf/ElfMachine.Companion.NONE|{}NONE[0]
            final fun <get-NONE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.NONE.<get-NONE>|<get-NONE>(){}[0]
        final val NS32K // space.iseki.executables.elf/ElfMachine.Companion.NS32K|{}NS32K[0]
            final fun <get-NS32K>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.NS32K.<get-NS32K>|<get-NS32K>(){}[0]
        final val OPENRISC // space.iseki.executables.elf/ElfMachine.Companion.OPENRISC|{}OPENRISC[0]
            final fun <get-OPENRISC>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.OPENRISC.<get-OPENRISC>|<get-OPENRISC>(){}[0]
        final val PARISC // space.iseki.executables.elf/ElfMachine.Companion.PARISC|{}PARISC[0]
            final fun <get-PARISC>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PARISC.<get-PARISC>|<get-PARISC>(){}[0]
        final val PCP // space.iseki.executables.elf/ElfMachine.Companion.PCP|{}PCP[0]
            final fun <get-PCP>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PCP.<get-PCP>|<get-PCP>(){}[0]
        final val PDP10 // space.iseki.executables.elf/ElfMachine.Companion.PDP10|{}PDP10[0]
            final fun <get-PDP10>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PDP10.<get-PDP10>|<get-PDP10>(){}[0]
        final val PDP11 // space.iseki.executables.elf/ElfMachine.Companion.PDP11|{}PDP11[0]
            final fun <get-PDP11>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PDP11.<get-PDP11>|<get-PDP11>(){}[0]
        final val PDSP // space.iseki.executables.elf/ElfMachine.Companion.PDSP|{}PDSP[0]
            final fun <get-PDSP>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PDSP.<get-PDSP>|<get-PDSP>(){}[0]
        final val PJ // space.iseki.executables.elf/ElfMachine.Companion.PJ|{}PJ[0]
            final fun <get-PJ>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PJ.<get-PJ>|<get-PJ>(){}[0]
        final val PPC // space.iseki.executables.elf/ElfMachine.Companion.PPC|{}PPC[0]
            final fun <get-PPC>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PPC.<get-PPC>|<get-PPC>(){}[0]
        final val PPC64 // space.iseki.executables.elf/ElfMachine.Companion.PPC64|{}PPC64[0]
            final fun <get-PPC64>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PPC64.<get-PPC64>|<get-PPC64>(){}[0]
        final val PRISM // space.iseki.executables.elf/ElfMachine.Companion.PRISM|{}PRISM[0]
            final fun <get-PRISM>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.PRISM.<get-PRISM>|<get-PRISM>(){}[0]
        final val RCE // space.iseki.executables.elf/ElfMachine.Companion.RCE|{}RCE[0]
            final fun <get-RCE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.RCE.<get-RCE>|<get-RCE>(){}[0]
        final val RH32 // space.iseki.executables.elf/ElfMachine.Companion.RH32|{}RH32[0]
            final fun <get-RH32>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.RH32.<get-RH32>|<get-RH32>(){}[0]
        final val S370 // space.iseki.executables.elf/ElfMachine.Companion.S370|{}S370[0]
            final fun <get-S370>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.S370.<get-S370>|<get-S370>(){}[0]
        final val S390 // space.iseki.executables.elf/ElfMachine.Companion.S390|{}S390[0]
            final fun <get-S390>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.S390.<get-S390>|<get-S390>(){}[0]
        final val SH // space.iseki.executables.elf/ElfMachine.Companion.SH|{}SH[0]
            final fun <get-SH>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.SH.<get-SH>|<get-SH>(){}[0]
        final val SNP1K // space.iseki.executables.elf/ElfMachine.Companion.SNP1K|{}SNP1K[0]
            final fun <get-SNP1K>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.SNP1K.<get-SNP1K>|<get-SNP1K>(){}[0]
        final val SPARC // space.iseki.executables.elf/ElfMachine.Companion.SPARC|{}SPARC[0]
            final fun <get-SPARC>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.SPARC.<get-SPARC>|<get-SPARC>(){}[0]
        final val SPARC32PLUS // space.iseki.executables.elf/ElfMachine.Companion.SPARC32PLUS|{}SPARC32PLUS[0]
            final fun <get-SPARC32PLUS>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.SPARC32PLUS.<get-SPARC32PLUS>|<get-SPARC32PLUS>(){}[0]
        final val SPARCV9 // space.iseki.executables.elf/ElfMachine.Companion.SPARCV9|{}SPARCV9[0]
            final fun <get-SPARCV9>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.SPARCV9.<get-SPARCV9>|<get-SPARCV9>(){}[0]
        final val ST100 // space.iseki.executables.elf/ElfMachine.Companion.ST100|{}ST100[0]
            final fun <get-ST100>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ST100.<get-ST100>|<get-ST100>(){}[0]
        final val ST19 // space.iseki.executables.elf/ElfMachine.Companion.ST19|{}ST19[0]
            final fun <get-ST19>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ST19.<get-ST19>|<get-ST19>(){}[0]
        final val ST200 // space.iseki.executables.elf/ElfMachine.Companion.ST200|{}ST200[0]
            final fun <get-ST200>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ST200.<get-ST200>|<get-ST200>(){}[0]
        final val ST7 // space.iseki.executables.elf/ElfMachine.Companion.ST7|{}ST7[0]
            final fun <get-ST7>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ST7.<get-ST7>|<get-ST7>(){}[0]
        final val ST9PLUS // space.iseki.executables.elf/ElfMachine.Companion.ST9PLUS|{}ST9PLUS[0]
            final fun <get-ST9PLUS>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ST9PLUS.<get-ST9PLUS>|<get-ST9PLUS>(){}[0]
        final val STARCORE // space.iseki.executables.elf/ElfMachine.Companion.STARCORE|{}STARCORE[0]
            final fun <get-STARCORE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.STARCORE.<get-STARCORE>|<get-STARCORE>(){}[0]
        final val SVX // space.iseki.executables.elf/ElfMachine.Companion.SVX|{}SVX[0]
            final fun <get-SVX>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.SVX.<get-SVX>|<get-SVX>(){}[0]
        final val TINYJ // space.iseki.executables.elf/ElfMachine.Companion.TINYJ|{}TINYJ[0]
            final fun <get-TINYJ>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.TINYJ.<get-TINYJ>|<get-TINYJ>(){}[0]
        final val TMM_GPP // space.iseki.executables.elf/ElfMachine.Companion.TMM_GPP|{}TMM_GPP[0]
            final fun <get-TMM_GPP>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.TMM_GPP.<get-TMM_GPP>|<get-TMM_GPP>(){}[0]
        final val TPC // space.iseki.executables.elf/ElfMachine.Companion.TPC|{}TPC[0]
            final fun <get-TPC>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.TPC.<get-TPC>|<get-TPC>(){}[0]
        final val TRICORE // space.iseki.executables.elf/ElfMachine.Companion.TRICORE|{}TRICORE[0]
            final fun <get-TRICORE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.TRICORE.<get-TRICORE>|<get-TRICORE>(){}[0]
        final val V800 // space.iseki.executables.elf/ElfMachine.Companion.V800|{}V800[0]
            final fun <get-V800>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.V800.<get-V800>|<get-V800>(){}[0]
        final val V850 // space.iseki.executables.elf/ElfMachine.Companion.V850|{}V850[0]
            final fun <get-V850>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.V850.<get-V850>|<get-V850>(){}[0]
        final val VAX // space.iseki.executables.elf/ElfMachine.Companion.VAX|{}VAX[0]
            final fun <get-VAX>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.VAX.<get-VAX>|<get-VAX>(){}[0]
        final val VIDEOCORE // space.iseki.executables.elf/ElfMachine.Companion.VIDEOCORE|{}VIDEOCORE[0]
            final fun <get-VIDEOCORE>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.VIDEOCORE.<get-VIDEOCORE>|<get-VIDEOCORE>(){}[0]
        final val VPP500 // space.iseki.executables.elf/ElfMachine.Companion.VPP500|{}VPP500[0]
            final fun <get-VPP500>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.VPP500.<get-VPP500>|<get-VPP500>(){}[0]
        final val X86_64 // space.iseki.executables.elf/ElfMachine.Companion.X86_64|{}X86_64[0]
            final fun <get-X86_64>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.X86_64.<get-X86_64>|<get-X86_64>(){}[0]
        final val XTENSA // space.iseki.executables.elf/ElfMachine.Companion.XTENSA|{}XTENSA[0]
            final fun <get-XTENSA>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.XTENSA.<get-XTENSA>|<get-XTENSA>(){}[0]
        final val ZSP // space.iseki.executables.elf/ElfMachine.Companion.ZSP|{}ZSP[0]
            final fun <get-ZSP>(): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.ZSP.<get-ZSP>|<get-ZSP>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfMachine> // space.iseki.executables.elf/ElfMachine.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfMachine? // space.iseki.executables.elf/ElfMachine.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfMachine.Constants|null[0]
        final const val ALPHA // space.iseki.executables.elf/ElfMachine.Constants.ALPHA|{}ALPHA[0]
            final fun <get-ALPHA>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ALPHA.<get-ALPHA>|<get-ALPHA>(){}[0]
        final const val ARC // space.iseki.executables.elf/ElfMachine.Constants.ARC|{}ARC[0]
            final fun <get-ARC>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ARC.<get-ARC>|<get-ARC>(){}[0]
        final const val ARC_A5 // space.iseki.executables.elf/ElfMachine.Constants.ARC_A5|{}ARC_A5[0]
            final fun <get-ARC_A5>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ARC_A5.<get-ARC_A5>|<get-ARC_A5>(){}[0]
        final const val ARM // space.iseki.executables.elf/ElfMachine.Constants.ARM|{}ARM[0]
            final fun <get-ARM>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ARM.<get-ARM>|<get-ARM>(){}[0]
        final const val AVR // space.iseki.executables.elf/ElfMachine.Constants.AVR|{}AVR[0]
            final fun <get-AVR>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.AVR.<get-AVR>|<get-AVR>(){}[0]
        final const val COLDFIRE // space.iseki.executables.elf/ElfMachine.Constants.COLDFIRE|{}COLDFIRE[0]
            final fun <get-COLDFIRE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.COLDFIRE.<get-COLDFIRE>|<get-COLDFIRE>(){}[0]
        final const val CRIS // space.iseki.executables.elf/ElfMachine.Constants.CRIS|{}CRIS[0]
            final fun <get-CRIS>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.CRIS.<get-CRIS>|<get-CRIS>(){}[0]
        final const val D10V // space.iseki.executables.elf/ElfMachine.Constants.D10V|{}D10V[0]
            final fun <get-D10V>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.D10V.<get-D10V>|<get-D10V>(){}[0]
        final const val D30V // space.iseki.executables.elf/ElfMachine.Constants.D30V|{}D30V[0]
            final fun <get-D30V>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.D30V.<get-D30V>|<get-D30V>(){}[0]
        final const val FIREPATH // space.iseki.executables.elf/ElfMachine.Constants.FIREPATH|{}FIREPATH[0]
            final fun <get-FIREPATH>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.FIREPATH.<get-FIREPATH>|<get-FIREPATH>(){}[0]
        final const val FR20 // space.iseki.executables.elf/ElfMachine.Constants.FR20|{}FR20[0]
            final fun <get-FR20>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.FR20.<get-FR20>|<get-FR20>(){}[0]
        final const val FR30 // space.iseki.executables.elf/ElfMachine.Constants.FR30|{}FR30[0]
            final fun <get-FR30>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.FR30.<get-FR30>|<get-FR30>(){}[0]
        final const val FX66 // space.iseki.executables.elf/ElfMachine.Constants.FX66|{}FX66[0]
            final fun <get-FX66>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.FX66.<get-FX66>|<get-FX66>(){}[0]
        final const val H8S // space.iseki.executables.elf/ElfMachine.Constants.H8S|{}H8S[0]
            final fun <get-H8S>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.H8S.<get-H8S>|<get-H8S>(){}[0]
        final const val H8_300 // space.iseki.executables.elf/ElfMachine.Constants.H8_300|{}H8_300[0]
            final fun <get-H8_300>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.H8_300.<get-H8_300>|<get-H8_300>(){}[0]
        final const val H8_300H // space.iseki.executables.elf/ElfMachine.Constants.H8_300H|{}H8_300H[0]
            final fun <get-H8_300H>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.H8_300H.<get-H8_300H>|<get-H8_300H>(){}[0]
        final const val H8_500 // space.iseki.executables.elf/ElfMachine.Constants.H8_500|{}H8_500[0]
            final fun <get-H8_500>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.H8_500.<get-H8_500>|<get-H8_500>(){}[0]
        final const val HUANY // space.iseki.executables.elf/ElfMachine.Constants.HUANY|{}HUANY[0]
            final fun <get-HUANY>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.HUANY.<get-HUANY>|<get-HUANY>(){}[0]
        final const val I386 // space.iseki.executables.elf/ElfMachine.Constants.I386|{}I386[0]
            final fun <get-I386>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.I386.<get-I386>|<get-I386>(){}[0]
        final const val I860 // space.iseki.executables.elf/ElfMachine.Constants.I860|{}I860[0]
            final fun <get-I860>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.I860.<get-I860>|<get-I860>(){}[0]
        final const val I960 // space.iseki.executables.elf/ElfMachine.Constants.I960|{}I960[0]
            final fun <get-I960>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.I960.<get-I960>|<get-I960>(){}[0]
        final const val IA_64 // space.iseki.executables.elf/ElfMachine.Constants.IA_64|{}IA_64[0]
            final fun <get-IA_64>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.IA_64.<get-IA_64>|<get-IA_64>(){}[0]
        final const val JAVELIN // space.iseki.executables.elf/ElfMachine.Constants.JAVELIN|{}JAVELIN[0]
            final fun <get-JAVELIN>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.JAVELIN.<get-JAVELIN>|<get-JAVELIN>(){}[0]
        final const val M32 // space.iseki.executables.elf/ElfMachine.Constants.M32|{}M32[0]
            final fun <get-M32>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M32.<get-M32>|<get-M32>(){}[0]
        final const val M32R // space.iseki.executables.elf/ElfMachine.Constants.M32R|{}M32R[0]
            final fun <get-M32R>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M32R.<get-M32R>|<get-M32R>(){}[0]
        final const val M68HC05 // space.iseki.executables.elf/ElfMachine.Constants.M68HC05|{}M68HC05[0]
            final fun <get-M68HC05>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M68HC05.<get-M68HC05>|<get-M68HC05>(){}[0]
        final const val M68HC08 // space.iseki.executables.elf/ElfMachine.Constants.M68HC08|{}M68HC08[0]
            final fun <get-M68HC08>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M68HC08.<get-M68HC08>|<get-M68HC08>(){}[0]
        final const val M68HC11 // space.iseki.executables.elf/ElfMachine.Constants.M68HC11|{}M68HC11[0]
            final fun <get-M68HC11>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M68HC11.<get-M68HC11>|<get-M68HC11>(){}[0]
        final const val M68HC12 // space.iseki.executables.elf/ElfMachine.Constants.M68HC12|{}M68HC12[0]
            final fun <get-M68HC12>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M68HC12.<get-M68HC12>|<get-M68HC12>(){}[0]
        final const val M68HC16 // space.iseki.executables.elf/ElfMachine.Constants.M68HC16|{}M68HC16[0]
            final fun <get-M68HC16>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M68HC16.<get-M68HC16>|<get-M68HC16>(){}[0]
        final const val M68K // space.iseki.executables.elf/ElfMachine.Constants.M68K|{}M68K[0]
            final fun <get-M68K>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M68K.<get-M68K>|<get-M68K>(){}[0]
        final const val M88K // space.iseki.executables.elf/ElfMachine.Constants.M88K|{}M88K[0]
            final fun <get-M88K>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.M88K.<get-M88K>|<get-M88K>(){}[0]
        final const val ME16 // space.iseki.executables.elf/ElfMachine.Constants.ME16|{}ME16[0]
            final fun <get-ME16>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ME16.<get-ME16>|<get-ME16>(){}[0]
        final const val MIPS // space.iseki.executables.elf/ElfMachine.Constants.MIPS|{}MIPS[0]
            final fun <get-MIPS>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MIPS.<get-MIPS>|<get-MIPS>(){}[0]
        final const val MIPS_RS3_LE // space.iseki.executables.elf/ElfMachine.Constants.MIPS_RS3_LE|{}MIPS_RS3_LE[0]
            final fun <get-MIPS_RS3_LE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MIPS_RS3_LE.<get-MIPS_RS3_LE>|<get-MIPS_RS3_LE>(){}[0]
        final const val MIPS_X // space.iseki.executables.elf/ElfMachine.Constants.MIPS_X|{}MIPS_X[0]
            final fun <get-MIPS_X>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MIPS_X.<get-MIPS_X>|<get-MIPS_X>(){}[0]
        final const val MMA // space.iseki.executables.elf/ElfMachine.Constants.MMA|{}MMA[0]
            final fun <get-MMA>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MMA.<get-MMA>|<get-MMA>(){}[0]
        final const val MMIX // space.iseki.executables.elf/ElfMachine.Constants.MMIX|{}MMIX[0]
            final fun <get-MMIX>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MMIX.<get-MMIX>|<get-MMIX>(){}[0]
        final const val MN10200 // space.iseki.executables.elf/ElfMachine.Constants.MN10200|{}MN10200[0]
            final fun <get-MN10200>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MN10200.<get-MN10200>|<get-MN10200>(){}[0]
        final const val MN10300 // space.iseki.executables.elf/ElfMachine.Constants.MN10300|{}MN10300[0]
            final fun <get-MN10300>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.MN10300.<get-MN10300>|<get-MN10300>(){}[0]
        final const val NCPU // space.iseki.executables.elf/ElfMachine.Constants.NCPU|{}NCPU[0]
            final fun <get-NCPU>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.NCPU.<get-NCPU>|<get-NCPU>(){}[0]
        final const val NDR1 // space.iseki.executables.elf/ElfMachine.Constants.NDR1|{}NDR1[0]
            final fun <get-NDR1>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.NDR1.<get-NDR1>|<get-NDR1>(){}[0]
        final const val NONE // space.iseki.executables.elf/ElfMachine.Constants.NONE|{}NONE[0]
            final fun <get-NONE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.NONE.<get-NONE>|<get-NONE>(){}[0]
        final const val NS32K // space.iseki.executables.elf/ElfMachine.Constants.NS32K|{}NS32K[0]
            final fun <get-NS32K>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.NS32K.<get-NS32K>|<get-NS32K>(){}[0]
        final const val OPENRISC // space.iseki.executables.elf/ElfMachine.Constants.OPENRISC|{}OPENRISC[0]
            final fun <get-OPENRISC>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.OPENRISC.<get-OPENRISC>|<get-OPENRISC>(){}[0]
        final const val PARISC // space.iseki.executables.elf/ElfMachine.Constants.PARISC|{}PARISC[0]
            final fun <get-PARISC>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PARISC.<get-PARISC>|<get-PARISC>(){}[0]
        final const val PCP // space.iseki.executables.elf/ElfMachine.Constants.PCP|{}PCP[0]
            final fun <get-PCP>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PCP.<get-PCP>|<get-PCP>(){}[0]
        final const val PDP10 // space.iseki.executables.elf/ElfMachine.Constants.PDP10|{}PDP10[0]
            final fun <get-PDP10>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PDP10.<get-PDP10>|<get-PDP10>(){}[0]
        final const val PDP11 // space.iseki.executables.elf/ElfMachine.Constants.PDP11|{}PDP11[0]
            final fun <get-PDP11>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PDP11.<get-PDP11>|<get-PDP11>(){}[0]
        final const val PDSP // space.iseki.executables.elf/ElfMachine.Constants.PDSP|{}PDSP[0]
            final fun <get-PDSP>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PDSP.<get-PDSP>|<get-PDSP>(){}[0]
        final const val PJ // space.iseki.executables.elf/ElfMachine.Constants.PJ|{}PJ[0]
            final fun <get-PJ>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PJ.<get-PJ>|<get-PJ>(){}[0]
        final const val PPC // space.iseki.executables.elf/ElfMachine.Constants.PPC|{}PPC[0]
            final fun <get-PPC>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PPC.<get-PPC>|<get-PPC>(){}[0]
        final const val PPC64 // space.iseki.executables.elf/ElfMachine.Constants.PPC64|{}PPC64[0]
            final fun <get-PPC64>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PPC64.<get-PPC64>|<get-PPC64>(){}[0]
        final const val PRISM // space.iseki.executables.elf/ElfMachine.Constants.PRISM|{}PRISM[0]
            final fun <get-PRISM>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.PRISM.<get-PRISM>|<get-PRISM>(){}[0]
        final const val RCE // space.iseki.executables.elf/ElfMachine.Constants.RCE|{}RCE[0]
            final fun <get-RCE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.RCE.<get-RCE>|<get-RCE>(){}[0]
        final const val RH32 // space.iseki.executables.elf/ElfMachine.Constants.RH32|{}RH32[0]
            final fun <get-RH32>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.RH32.<get-RH32>|<get-RH32>(){}[0]
        final const val S370 // space.iseki.executables.elf/ElfMachine.Constants.S370|{}S370[0]
            final fun <get-S370>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.S370.<get-S370>|<get-S370>(){}[0]
        final const val S390 // space.iseki.executables.elf/ElfMachine.Constants.S390|{}S390[0]
            final fun <get-S390>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.S390.<get-S390>|<get-S390>(){}[0]
        final const val SH // space.iseki.executables.elf/ElfMachine.Constants.SH|{}SH[0]
            final fun <get-SH>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.SH.<get-SH>|<get-SH>(){}[0]
        final const val SNP1K // space.iseki.executables.elf/ElfMachine.Constants.SNP1K|{}SNP1K[0]
            final fun <get-SNP1K>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.SNP1K.<get-SNP1K>|<get-SNP1K>(){}[0]
        final const val SPARC // space.iseki.executables.elf/ElfMachine.Constants.SPARC|{}SPARC[0]
            final fun <get-SPARC>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.SPARC.<get-SPARC>|<get-SPARC>(){}[0]
        final const val SPARC32PLUS // space.iseki.executables.elf/ElfMachine.Constants.SPARC32PLUS|{}SPARC32PLUS[0]
            final fun <get-SPARC32PLUS>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.SPARC32PLUS.<get-SPARC32PLUS>|<get-SPARC32PLUS>(){}[0]
        final const val SPARCV9 // space.iseki.executables.elf/ElfMachine.Constants.SPARCV9|{}SPARCV9[0]
            final fun <get-SPARCV9>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.SPARCV9.<get-SPARCV9>|<get-SPARCV9>(){}[0]
        final const val ST100 // space.iseki.executables.elf/ElfMachine.Constants.ST100|{}ST100[0]
            final fun <get-ST100>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ST100.<get-ST100>|<get-ST100>(){}[0]
        final const val ST19 // space.iseki.executables.elf/ElfMachine.Constants.ST19|{}ST19[0]
            final fun <get-ST19>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ST19.<get-ST19>|<get-ST19>(){}[0]
        final const val ST200 // space.iseki.executables.elf/ElfMachine.Constants.ST200|{}ST200[0]
            final fun <get-ST200>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ST200.<get-ST200>|<get-ST200>(){}[0]
        final const val ST7 // space.iseki.executables.elf/ElfMachine.Constants.ST7|{}ST7[0]
            final fun <get-ST7>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ST7.<get-ST7>|<get-ST7>(){}[0]
        final const val ST9PLUS // space.iseki.executables.elf/ElfMachine.Constants.ST9PLUS|{}ST9PLUS[0]
            final fun <get-ST9PLUS>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ST9PLUS.<get-ST9PLUS>|<get-ST9PLUS>(){}[0]
        final const val STARCORE // space.iseki.executables.elf/ElfMachine.Constants.STARCORE|{}STARCORE[0]
            final fun <get-STARCORE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.STARCORE.<get-STARCORE>|<get-STARCORE>(){}[0]
        final const val SVX // space.iseki.executables.elf/ElfMachine.Constants.SVX|{}SVX[0]
            final fun <get-SVX>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.SVX.<get-SVX>|<get-SVX>(){}[0]
        final const val TINYJ // space.iseki.executables.elf/ElfMachine.Constants.TINYJ|{}TINYJ[0]
            final fun <get-TINYJ>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.TINYJ.<get-TINYJ>|<get-TINYJ>(){}[0]
        final const val TMM_GPP // space.iseki.executables.elf/ElfMachine.Constants.TMM_GPP|{}TMM_GPP[0]
            final fun <get-TMM_GPP>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.TMM_GPP.<get-TMM_GPP>|<get-TMM_GPP>(){}[0]
        final const val TPC // space.iseki.executables.elf/ElfMachine.Constants.TPC|{}TPC[0]
            final fun <get-TPC>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.TPC.<get-TPC>|<get-TPC>(){}[0]
        final const val TRICORE // space.iseki.executables.elf/ElfMachine.Constants.TRICORE|{}TRICORE[0]
            final fun <get-TRICORE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.TRICORE.<get-TRICORE>|<get-TRICORE>(){}[0]
        final const val V800 // space.iseki.executables.elf/ElfMachine.Constants.V800|{}V800[0]
            final fun <get-V800>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.V800.<get-V800>|<get-V800>(){}[0]
        final const val V850 // space.iseki.executables.elf/ElfMachine.Constants.V850|{}V850[0]
            final fun <get-V850>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.V850.<get-V850>|<get-V850>(){}[0]
        final const val VAX // space.iseki.executables.elf/ElfMachine.Constants.VAX|{}VAX[0]
            final fun <get-VAX>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.VAX.<get-VAX>|<get-VAX>(){}[0]
        final const val VIDEOCORE // space.iseki.executables.elf/ElfMachine.Constants.VIDEOCORE|{}VIDEOCORE[0]
            final fun <get-VIDEOCORE>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.VIDEOCORE.<get-VIDEOCORE>|<get-VIDEOCORE>(){}[0]
        final const val VPP500 // space.iseki.executables.elf/ElfMachine.Constants.VPP500|{}VPP500[0]
            final fun <get-VPP500>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.VPP500.<get-VPP500>|<get-VPP500>(){}[0]
        final const val X86_64 // space.iseki.executables.elf/ElfMachine.Constants.X86_64|{}X86_64[0]
            final fun <get-X86_64>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.X86_64.<get-X86_64>|<get-X86_64>(){}[0]
        final const val XTENSA // space.iseki.executables.elf/ElfMachine.Constants.XTENSA|{}XTENSA[0]
            final fun <get-XTENSA>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.XTENSA.<get-XTENSA>|<get-XTENSA>(){}[0]
        final const val ZSP // space.iseki.executables.elf/ElfMachine.Constants.ZSP|{}ZSP[0]
            final fun <get-ZSP>(): kotlin/Short // space.iseki.executables.elf/ElfMachine.Constants.ZSP.<get-ZSP>|<get-ZSP>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfOsAbi : kotlin/Comparable<space.iseki.executables.elf/ElfOsAbi> { // space.iseki.executables.elf/ElfOsAbi|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.elf/ElfOsAbi.<init>|<init>(kotlin.Byte){}[0]

    final val value // space.iseki.executables.elf/ElfOsAbi.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfOsAbi): kotlin/Int // space.iseki.executables.elf/ElfOsAbi.compareTo|compareTo(space.iseki.executables.elf.ElfOsAbi){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfOsAbi.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfOsAbi.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfOsAbi.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfOsAbi.Companion|null[0]
        final val ELFOSABI_AIX // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_AIX|{}ELFOSABI_AIX[0]
            final fun <get-ELFOSABI_AIX>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_AIX.<get-ELFOSABI_AIX>|<get-ELFOSABI_AIX>(){}[0]
        final val ELFOSABI_FREEBSD // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_FREEBSD|{}ELFOSABI_FREEBSD[0]
            final fun <get-ELFOSABI_FREEBSD>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_FREEBSD.<get-ELFOSABI_FREEBSD>|<get-ELFOSABI_FREEBSD>(){}[0]
        final val ELFOSABI_HPUX // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_HPUX|{}ELFOSABI_HPUX[0]
            final fun <get-ELFOSABI_HPUX>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_HPUX.<get-ELFOSABI_HPUX>|<get-ELFOSABI_HPUX>(){}[0]
        final val ELFOSABI_IRIX // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_IRIX|{}ELFOSABI_IRIX[0]
            final fun <get-ELFOSABI_IRIX>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_IRIX.<get-ELFOSABI_IRIX>|<get-ELFOSABI_IRIX>(){}[0]
        final val ELFOSABI_LINUX // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_LINUX|{}ELFOSABI_LINUX[0]
            final fun <get-ELFOSABI_LINUX>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_LINUX.<get-ELFOSABI_LINUX>|<get-ELFOSABI_LINUX>(){}[0]
        final val ELFOSABI_MODESTO // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_MODESTO|{}ELFOSABI_MODESTO[0]
            final fun <get-ELFOSABI_MODESTO>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_MODESTO.<get-ELFOSABI_MODESTO>|<get-ELFOSABI_MODESTO>(){}[0]
        final val ELFOSABI_NETBSD // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_NETBSD|{}ELFOSABI_NETBSD[0]
            final fun <get-ELFOSABI_NETBSD>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_NETBSD.<get-ELFOSABI_NETBSD>|<get-ELFOSABI_NETBSD>(){}[0]
        final val ELFOSABI_NONE // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_NONE|{}ELFOSABI_NONE[0]
            final fun <get-ELFOSABI_NONE>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_NONE.<get-ELFOSABI_NONE>|<get-ELFOSABI_NONE>(){}[0]
        final val ELFOSABI_NSK // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_NSK|{}ELFOSABI_NSK[0]
            final fun <get-ELFOSABI_NSK>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_NSK.<get-ELFOSABI_NSK>|<get-ELFOSABI_NSK>(){}[0]
        final val ELFOSABI_OPENBSD // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_OPENBSD|{}ELFOSABI_OPENBSD[0]
            final fun <get-ELFOSABI_OPENBSD>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_OPENBSD.<get-ELFOSABI_OPENBSD>|<get-ELFOSABI_OPENBSD>(){}[0]
        final val ELFOSABI_OPENVMS // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_OPENVMS|{}ELFOSABI_OPENVMS[0]
            final fun <get-ELFOSABI_OPENVMS>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_OPENVMS.<get-ELFOSABI_OPENVMS>|<get-ELFOSABI_OPENVMS>(){}[0]
        final val ELFOSABI_SOLARIS // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_SOLARIS|{}ELFOSABI_SOLARIS[0]
            final fun <get-ELFOSABI_SOLARIS>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_SOLARIS.<get-ELFOSABI_SOLARIS>|<get-ELFOSABI_SOLARIS>(){}[0]
        final val ELFOSABI_TRU64 // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_TRU64|{}ELFOSABI_TRU64[0]
            final fun <get-ELFOSABI_TRU64>(): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.ELFOSABI_TRU64.<get-ELFOSABI_TRU64>|<get-ELFOSABI_TRU64>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfOsAbi> // space.iseki.executables.elf/ElfOsAbi.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfOsAbi? // space.iseki.executables.elf/ElfOsAbi.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfOsAbi.Constants|null[0]
        final const val ELFOSABI_AIX // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_AIX|{}ELFOSABI_AIX[0]
            final fun <get-ELFOSABI_AIX>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_AIX.<get-ELFOSABI_AIX>|<get-ELFOSABI_AIX>(){}[0]
        final const val ELFOSABI_FREEBSD // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_FREEBSD|{}ELFOSABI_FREEBSD[0]
            final fun <get-ELFOSABI_FREEBSD>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_FREEBSD.<get-ELFOSABI_FREEBSD>|<get-ELFOSABI_FREEBSD>(){}[0]
        final const val ELFOSABI_HPUX // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_HPUX|{}ELFOSABI_HPUX[0]
            final fun <get-ELFOSABI_HPUX>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_HPUX.<get-ELFOSABI_HPUX>|<get-ELFOSABI_HPUX>(){}[0]
        final const val ELFOSABI_IRIX // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_IRIX|{}ELFOSABI_IRIX[0]
            final fun <get-ELFOSABI_IRIX>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_IRIX.<get-ELFOSABI_IRIX>|<get-ELFOSABI_IRIX>(){}[0]
        final const val ELFOSABI_LINUX // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_LINUX|{}ELFOSABI_LINUX[0]
            final fun <get-ELFOSABI_LINUX>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_LINUX.<get-ELFOSABI_LINUX>|<get-ELFOSABI_LINUX>(){}[0]
        final const val ELFOSABI_MODESTO // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_MODESTO|{}ELFOSABI_MODESTO[0]
            final fun <get-ELFOSABI_MODESTO>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_MODESTO.<get-ELFOSABI_MODESTO>|<get-ELFOSABI_MODESTO>(){}[0]
        final const val ELFOSABI_NETBSD // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_NETBSD|{}ELFOSABI_NETBSD[0]
            final fun <get-ELFOSABI_NETBSD>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_NETBSD.<get-ELFOSABI_NETBSD>|<get-ELFOSABI_NETBSD>(){}[0]
        final const val ELFOSABI_NONE // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_NONE|{}ELFOSABI_NONE[0]
            final fun <get-ELFOSABI_NONE>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_NONE.<get-ELFOSABI_NONE>|<get-ELFOSABI_NONE>(){}[0]
        final const val ELFOSABI_NSK // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_NSK|{}ELFOSABI_NSK[0]
            final fun <get-ELFOSABI_NSK>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_NSK.<get-ELFOSABI_NSK>|<get-ELFOSABI_NSK>(){}[0]
        final const val ELFOSABI_OPENBSD // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_OPENBSD|{}ELFOSABI_OPENBSD[0]
            final fun <get-ELFOSABI_OPENBSD>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_OPENBSD.<get-ELFOSABI_OPENBSD>|<get-ELFOSABI_OPENBSD>(){}[0]
        final const val ELFOSABI_OPENVMS // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_OPENVMS|{}ELFOSABI_OPENVMS[0]
            final fun <get-ELFOSABI_OPENVMS>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_OPENVMS.<get-ELFOSABI_OPENVMS>|<get-ELFOSABI_OPENVMS>(){}[0]
        final const val ELFOSABI_SOLARIS // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_SOLARIS|{}ELFOSABI_SOLARIS[0]
            final fun <get-ELFOSABI_SOLARIS>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_SOLARIS.<get-ELFOSABI_SOLARIS>|<get-ELFOSABI_SOLARIS>(){}[0]
        final const val ELFOSABI_TRU64 // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_TRU64|{}ELFOSABI_TRU64[0]
            final fun <get-ELFOSABI_TRU64>(): kotlin/Byte // space.iseki.executables.elf/ElfOsAbi.Constants.ELFOSABI_TRU64.<get-ELFOSABI_TRU64>|<get-ELFOSABI_TRU64>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfPFlags : kotlin.collections/Set<space.iseki.executables.elf/ElfPFlags> { // space.iseki.executables.elf/ElfPFlags|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.elf/ElfPFlags.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.elf/ElfPFlags.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.elf/ElfPFlags.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.elf/ElfPFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.elf/ElfPFlags.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.elf/ElfPFlags): kotlin/Boolean // space.iseki.executables.elf/ElfPFlags.contains|contains(space.iseki.executables.elf.ElfPFlags){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.elf/ElfPFlags>): kotlin/Boolean // space.iseki.executables.elf/ElfPFlags.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.elf.ElfPFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfPFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfPFlags.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.elf/ElfPFlags.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.elf/ElfPFlags> // space.iseki.executables.elf/ElfPFlags.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.elf/ElfPFlags): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.or|or(space.iseki.executables.elf.ElfPFlags){}[0]
    final fun plus(space.iseki.executables.elf/ElfPFlags): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.plus|plus(space.iseki.executables.elf.ElfPFlags){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfPFlags.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfPFlags.Companion|null[0]
        final val PF_R // space.iseki.executables.elf/ElfPFlags.Companion.PF_R|{}PF_R[0]
            final fun <get-PF_R>(): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.Companion.PF_R.<get-PF_R>|<get-PF_R>(){}[0]
        final val PF_W // space.iseki.executables.elf/ElfPFlags.Companion.PF_W|{}PF_W[0]
            final fun <get-PF_W>(): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.Companion.PF_W.<get-PF_W>|<get-PF_W>(){}[0]
        final val PF_X // space.iseki.executables.elf/ElfPFlags.Companion.PF_X|{}PF_X[0]
            final fun <get-PF_X>(): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.Companion.PF_X.<get-PF_X>|<get-PF_X>(){}[0]
        final val ZERO // space.iseki.executables.elf/ElfPFlags.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfPFlags> // space.iseki.executables.elf/ElfPFlags.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfPFlags? // space.iseki.executables.elf/ElfPFlags.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfPFlags.Constants|null[0]
        final const val PF_R // space.iseki.executables.elf/ElfPFlags.Constants.PF_R|{}PF_R[0]
            final fun <get-PF_R>(): kotlin/Int // space.iseki.executables.elf/ElfPFlags.Constants.PF_R.<get-PF_R>|<get-PF_R>(){}[0]
        final const val PF_W // space.iseki.executables.elf/ElfPFlags.Constants.PF_W|{}PF_W[0]
            final fun <get-PF_W>(): kotlin/Int // space.iseki.executables.elf/ElfPFlags.Constants.PF_W.<get-PF_W>|<get-PF_W>(){}[0]
        final const val PF_X // space.iseki.executables.elf/ElfPFlags.Constants.PF_X|{}PF_X[0]
            final fun <get-PF_X>(): kotlin/Int // space.iseki.executables.elf/ElfPFlags.Constants.PF_X.<get-PF_X>|<get-PF_X>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfPType : kotlin/Comparable<space.iseki.executables.elf/ElfPType> { // space.iseki.executables.elf/ElfPType|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.elf/ElfPType.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.elf/ElfPType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.elf/ElfPType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfPType): kotlin/Int // space.iseki.executables.elf/ElfPType.compareTo|compareTo(space.iseki.executables.elf.ElfPType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfPType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfPType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfPType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfPType.Companion|null[0]
        final val PT_DYNAMIC // space.iseki.executables.elf/ElfPType.Companion.PT_DYNAMIC|{}PT_DYNAMIC[0]
            final fun <get-PT_DYNAMIC>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_DYNAMIC.<get-PT_DYNAMIC>|<get-PT_DYNAMIC>(){}[0]
        final val PT_GNU_STACK // space.iseki.executables.elf/ElfPType.Companion.PT_GNU_STACK|{}PT_GNU_STACK[0]
            final fun <get-PT_GNU_STACK>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_GNU_STACK.<get-PT_GNU_STACK>|<get-PT_GNU_STACK>(){}[0]
        final val PT_HIPROC // space.iseki.executables.elf/ElfPType.Companion.PT_HIPROC|{}PT_HIPROC[0]
            final fun <get-PT_HIPROC>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_HIPROC.<get-PT_HIPROC>|<get-PT_HIPROC>(){}[0]
        final val PT_INTERP // space.iseki.executables.elf/ElfPType.Companion.PT_INTERP|{}PT_INTERP[0]
            final fun <get-PT_INTERP>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_INTERP.<get-PT_INTERP>|<get-PT_INTERP>(){}[0]
        final val PT_LOAD // space.iseki.executables.elf/ElfPType.Companion.PT_LOAD|{}PT_LOAD[0]
            final fun <get-PT_LOAD>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_LOAD.<get-PT_LOAD>|<get-PT_LOAD>(){}[0]
        final val PT_LOPROC // space.iseki.executables.elf/ElfPType.Companion.PT_LOPROC|{}PT_LOPROC[0]
            final fun <get-PT_LOPROC>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_LOPROC.<get-PT_LOPROC>|<get-PT_LOPROC>(){}[0]
        final val PT_NOTE // space.iseki.executables.elf/ElfPType.Companion.PT_NOTE|{}PT_NOTE[0]
            final fun <get-PT_NOTE>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_NOTE.<get-PT_NOTE>|<get-PT_NOTE>(){}[0]
        final val PT_NULL // space.iseki.executables.elf/ElfPType.Companion.PT_NULL|{}PT_NULL[0]
            final fun <get-PT_NULL>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_NULL.<get-PT_NULL>|<get-PT_NULL>(){}[0]
        final val PT_PHDR // space.iseki.executables.elf/ElfPType.Companion.PT_PHDR|{}PT_PHDR[0]
            final fun <get-PT_PHDR>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_PHDR.<get-PT_PHDR>|<get-PT_PHDR>(){}[0]
        final val PT_SHLIB // space.iseki.executables.elf/ElfPType.Companion.PT_SHLIB|{}PT_SHLIB[0]
            final fun <get-PT_SHLIB>(): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.PT_SHLIB.<get-PT_SHLIB>|<get-PT_SHLIB>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfPType> // space.iseki.executables.elf/ElfPType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfPType? // space.iseki.executables.elf/ElfPType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfPType.Constants|null[0]
        final const val PT_DYNAMIC // space.iseki.executables.elf/ElfPType.Constants.PT_DYNAMIC|{}PT_DYNAMIC[0]
            final fun <get-PT_DYNAMIC>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_DYNAMIC.<get-PT_DYNAMIC>|<get-PT_DYNAMIC>(){}[0]
        final const val PT_GNU_STACK // space.iseki.executables.elf/ElfPType.Constants.PT_GNU_STACK|{}PT_GNU_STACK[0]
            final fun <get-PT_GNU_STACK>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_GNU_STACK.<get-PT_GNU_STACK>|<get-PT_GNU_STACK>(){}[0]
        final const val PT_HIPROC // space.iseki.executables.elf/ElfPType.Constants.PT_HIPROC|{}PT_HIPROC[0]
            final fun <get-PT_HIPROC>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_HIPROC.<get-PT_HIPROC>|<get-PT_HIPROC>(){}[0]
        final const val PT_INTERP // space.iseki.executables.elf/ElfPType.Constants.PT_INTERP|{}PT_INTERP[0]
            final fun <get-PT_INTERP>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_INTERP.<get-PT_INTERP>|<get-PT_INTERP>(){}[0]
        final const val PT_LOAD // space.iseki.executables.elf/ElfPType.Constants.PT_LOAD|{}PT_LOAD[0]
            final fun <get-PT_LOAD>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_LOAD.<get-PT_LOAD>|<get-PT_LOAD>(){}[0]
        final const val PT_LOPROC // space.iseki.executables.elf/ElfPType.Constants.PT_LOPROC|{}PT_LOPROC[0]
            final fun <get-PT_LOPROC>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_LOPROC.<get-PT_LOPROC>|<get-PT_LOPROC>(){}[0]
        final const val PT_NOTE // space.iseki.executables.elf/ElfPType.Constants.PT_NOTE|{}PT_NOTE[0]
            final fun <get-PT_NOTE>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_NOTE.<get-PT_NOTE>|<get-PT_NOTE>(){}[0]
        final const val PT_NULL // space.iseki.executables.elf/ElfPType.Constants.PT_NULL|{}PT_NULL[0]
            final fun <get-PT_NULL>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_NULL.<get-PT_NULL>|<get-PT_NULL>(){}[0]
        final const val PT_PHDR // space.iseki.executables.elf/ElfPType.Constants.PT_PHDR|{}PT_PHDR[0]
            final fun <get-PT_PHDR>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_PHDR.<get-PT_PHDR>|<get-PT_PHDR>(){}[0]
        final const val PT_SHLIB // space.iseki.executables.elf/ElfPType.Constants.PT_SHLIB|{}PT_SHLIB[0]
            final fun <get-PT_SHLIB>(): kotlin/Int // space.iseki.executables.elf/ElfPType.Constants.PT_SHLIB.<get-PT_SHLIB>|<get-PT_SHLIB>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfSFlags : kotlin.collections/Set<space.iseki.executables.elf/ElfSFlags> { // space.iseki.executables.elf/ElfSFlags|null[0]
    constructor <init>(kotlin/Long) // space.iseki.executables.elf/ElfSFlags.<init>|<init>(kotlin.Long){}[0]

    final val size // space.iseki.executables.elf/ElfSFlags.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.elf/ElfSFlags.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.elf/ElfSFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.elf/ElfSFlags): kotlin/Boolean // space.iseki.executables.elf/ElfSFlags.contains|contains(space.iseki.executables.elf.ElfSFlags){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.elf/ElfSFlags>): kotlin/Boolean // space.iseki.executables.elf/ElfSFlags.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.elf.ElfSFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfSFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfSFlags.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.elf/ElfSFlags.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.elf/ElfSFlags> // space.iseki.executables.elf/ElfSFlags.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.elf/ElfSFlags): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.or|or(space.iseki.executables.elf.ElfSFlags){}[0]
    final fun plus(space.iseki.executables.elf/ElfSFlags): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.plus|plus(space.iseki.executables.elf.ElfSFlags){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfSFlags.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfSFlags.Companion|null[0]
        final val SHF_ALLOC // space.iseki.executables.elf/ElfSFlags.Companion.SHF_ALLOC|{}SHF_ALLOC[0]
            final fun <get-SHF_ALLOC>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.SHF_ALLOC.<get-SHF_ALLOC>|<get-SHF_ALLOC>(){}[0]
        final val SHF_EXECINSTR // space.iseki.executables.elf/ElfSFlags.Companion.SHF_EXECINSTR|{}SHF_EXECINSTR[0]
            final fun <get-SHF_EXECINSTR>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.SHF_EXECINSTR.<get-SHF_EXECINSTR>|<get-SHF_EXECINSTR>(){}[0]
        final val SHF_MASKPROC // space.iseki.executables.elf/ElfSFlags.Companion.SHF_MASKPROC|{}SHF_MASKPROC[0]
            final fun <get-SHF_MASKPROC>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.SHF_MASKPROC.<get-SHF_MASKPROC>|<get-SHF_MASKPROC>(){}[0]
        final val SHF_RELA_LIVEPATCH // space.iseki.executables.elf/ElfSFlags.Companion.SHF_RELA_LIVEPATCH|{}SHF_RELA_LIVEPATCH[0]
            final fun <get-SHF_RELA_LIVEPATCH>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.SHF_RELA_LIVEPATCH.<get-SHF_RELA_LIVEPATCH>|<get-SHF_RELA_LIVEPATCH>(){}[0]
        final val SHF_RO_AFTER_INIT // space.iseki.executables.elf/ElfSFlags.Companion.SHF_RO_AFTER_INIT|{}SHF_RO_AFTER_INIT[0]
            final fun <get-SHF_RO_AFTER_INIT>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.SHF_RO_AFTER_INIT.<get-SHF_RO_AFTER_INIT>|<get-SHF_RO_AFTER_INIT>(){}[0]
        final val SHF_WRITE // space.iseki.executables.elf/ElfSFlags.Companion.SHF_WRITE|{}SHF_WRITE[0]
            final fun <get-SHF_WRITE>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.SHF_WRITE.<get-SHF_WRITE>|<get-SHF_WRITE>(){}[0]
        final val ZERO // space.iseki.executables.elf/ElfSFlags.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfSFlags> // space.iseki.executables.elf/ElfSFlags.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfSFlags? // space.iseki.executables.elf/ElfSFlags.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfSFlags.Constants|null[0]
        final const val SHF_ALLOC // space.iseki.executables.elf/ElfSFlags.Constants.SHF_ALLOC|{}SHF_ALLOC[0]
            final fun <get-SHF_ALLOC>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.Constants.SHF_ALLOC.<get-SHF_ALLOC>|<get-SHF_ALLOC>(){}[0]
        final const val SHF_EXECINSTR // space.iseki.executables.elf/ElfSFlags.Constants.SHF_EXECINSTR|{}SHF_EXECINSTR[0]
            final fun <get-SHF_EXECINSTR>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.Constants.SHF_EXECINSTR.<get-SHF_EXECINSTR>|<get-SHF_EXECINSTR>(){}[0]
        final const val SHF_MASKPROC // space.iseki.executables.elf/ElfSFlags.Constants.SHF_MASKPROC|{}SHF_MASKPROC[0]
            final fun <get-SHF_MASKPROC>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.Constants.SHF_MASKPROC.<get-SHF_MASKPROC>|<get-SHF_MASKPROC>(){}[0]
        final const val SHF_RELA_LIVEPATCH // space.iseki.executables.elf/ElfSFlags.Constants.SHF_RELA_LIVEPATCH|{}SHF_RELA_LIVEPATCH[0]
            final fun <get-SHF_RELA_LIVEPATCH>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.Constants.SHF_RELA_LIVEPATCH.<get-SHF_RELA_LIVEPATCH>|<get-SHF_RELA_LIVEPATCH>(){}[0]
        final const val SHF_RO_AFTER_INIT // space.iseki.executables.elf/ElfSFlags.Constants.SHF_RO_AFTER_INIT|{}SHF_RO_AFTER_INIT[0]
            final fun <get-SHF_RO_AFTER_INIT>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.Constants.SHF_RO_AFTER_INIT.<get-SHF_RO_AFTER_INIT>|<get-SHF_RO_AFTER_INIT>(){}[0]
        final const val SHF_WRITE // space.iseki.executables.elf/ElfSFlags.Constants.SHF_WRITE|{}SHF_WRITE[0]
            final fun <get-SHF_WRITE>(): kotlin/Long // space.iseki.executables.elf/ElfSFlags.Constants.SHF_WRITE.<get-SHF_WRITE>|<get-SHF_WRITE>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfSType : kotlin/Comparable<space.iseki.executables.elf/ElfSType> { // space.iseki.executables.elf/ElfSType|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.elf/ElfSType.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.elf/ElfSType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.elf/ElfSType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfSType): kotlin/Int // space.iseki.executables.elf/ElfSType.compareTo|compareTo(space.iseki.executables.elf.ElfSType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfSType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfSType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfSType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfSType.Companion|null[0]
        final val SHT_DYNAMIC // space.iseki.executables.elf/ElfSType.Companion.SHT_DYNAMIC|{}SHT_DYNAMIC[0]
            final fun <get-SHT_DYNAMIC>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_DYNAMIC.<get-SHT_DYNAMIC>|<get-SHT_DYNAMIC>(){}[0]
        final val SHT_DYNSYM // space.iseki.executables.elf/ElfSType.Companion.SHT_DYNSYM|{}SHT_DYNSYM[0]
            final fun <get-SHT_DYNSYM>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_DYNSYM.<get-SHT_DYNSYM>|<get-SHT_DYNSYM>(){}[0]
        final val SHT_HASH // space.iseki.executables.elf/ElfSType.Companion.SHT_HASH|{}SHT_HASH[0]
            final fun <get-SHT_HASH>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_HASH.<get-SHT_HASH>|<get-SHT_HASH>(){}[0]
        final val SHT_HIPROC // space.iseki.executables.elf/ElfSType.Companion.SHT_HIPROC|{}SHT_HIPROC[0]
            final fun <get-SHT_HIPROC>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_HIPROC.<get-SHT_HIPROC>|<get-SHT_HIPROC>(){}[0]
        final val SHT_HIUSER // space.iseki.executables.elf/ElfSType.Companion.SHT_HIUSER|{}SHT_HIUSER[0]
            final fun <get-SHT_HIUSER>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_HIUSER.<get-SHT_HIUSER>|<get-SHT_HIUSER>(){}[0]
        final val SHT_LOPROC // space.iseki.executables.elf/ElfSType.Companion.SHT_LOPROC|{}SHT_LOPROC[0]
            final fun <get-SHT_LOPROC>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_LOPROC.<get-SHT_LOPROC>|<get-SHT_LOPROC>(){}[0]
        final val SHT_LOUSER // space.iseki.executables.elf/ElfSType.Companion.SHT_LOUSER|{}SHT_LOUSER[0]
            final fun <get-SHT_LOUSER>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_LOUSER.<get-SHT_LOUSER>|<get-SHT_LOUSER>(){}[0]
        final val SHT_NOBITS // space.iseki.executables.elf/ElfSType.Companion.SHT_NOBITS|{}SHT_NOBITS[0]
            final fun <get-SHT_NOBITS>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_NOBITS.<get-SHT_NOBITS>|<get-SHT_NOBITS>(){}[0]
        final val SHT_NOTE // space.iseki.executables.elf/ElfSType.Companion.SHT_NOTE|{}SHT_NOTE[0]
            final fun <get-SHT_NOTE>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_NOTE.<get-SHT_NOTE>|<get-SHT_NOTE>(){}[0]
        final val SHT_NULL // space.iseki.executables.elf/ElfSType.Companion.SHT_NULL|{}SHT_NULL[0]
            final fun <get-SHT_NULL>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_NULL.<get-SHT_NULL>|<get-SHT_NULL>(){}[0]
        final val SHT_PROGBITS // space.iseki.executables.elf/ElfSType.Companion.SHT_PROGBITS|{}SHT_PROGBITS[0]
            final fun <get-SHT_PROGBITS>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_PROGBITS.<get-SHT_PROGBITS>|<get-SHT_PROGBITS>(){}[0]
        final val SHT_REL // space.iseki.executables.elf/ElfSType.Companion.SHT_REL|{}SHT_REL[0]
            final fun <get-SHT_REL>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_REL.<get-SHT_REL>|<get-SHT_REL>(){}[0]
        final val SHT_RELA // space.iseki.executables.elf/ElfSType.Companion.SHT_RELA|{}SHT_RELA[0]
            final fun <get-SHT_RELA>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_RELA.<get-SHT_RELA>|<get-SHT_RELA>(){}[0]
        final val SHT_SHLIB // space.iseki.executables.elf/ElfSType.Companion.SHT_SHLIB|{}SHT_SHLIB[0]
            final fun <get-SHT_SHLIB>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_SHLIB.<get-SHT_SHLIB>|<get-SHT_SHLIB>(){}[0]
        final val SHT_STRTAB // space.iseki.executables.elf/ElfSType.Companion.SHT_STRTAB|{}SHT_STRTAB[0]
            final fun <get-SHT_STRTAB>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_STRTAB.<get-SHT_STRTAB>|<get-SHT_STRTAB>(){}[0]
        final val SHT_SYMTAB // space.iseki.executables.elf/ElfSType.Companion.SHT_SYMTAB|{}SHT_SYMTAB[0]
            final fun <get-SHT_SYMTAB>(): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.SHT_SYMTAB.<get-SHT_SYMTAB>|<get-SHT_SYMTAB>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfSType> // space.iseki.executables.elf/ElfSType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfSType? // space.iseki.executables.elf/ElfSType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfSType.Constants|null[0]
        final const val SHT_DYNAMIC // space.iseki.executables.elf/ElfSType.Constants.SHT_DYNAMIC|{}SHT_DYNAMIC[0]
            final fun <get-SHT_DYNAMIC>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_DYNAMIC.<get-SHT_DYNAMIC>|<get-SHT_DYNAMIC>(){}[0]
        final const val SHT_DYNSYM // space.iseki.executables.elf/ElfSType.Constants.SHT_DYNSYM|{}SHT_DYNSYM[0]
            final fun <get-SHT_DYNSYM>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_DYNSYM.<get-SHT_DYNSYM>|<get-SHT_DYNSYM>(){}[0]
        final const val SHT_HASH // space.iseki.executables.elf/ElfSType.Constants.SHT_HASH|{}SHT_HASH[0]
            final fun <get-SHT_HASH>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_HASH.<get-SHT_HASH>|<get-SHT_HASH>(){}[0]
        final const val SHT_HIPROC // space.iseki.executables.elf/ElfSType.Constants.SHT_HIPROC|{}SHT_HIPROC[0]
            final fun <get-SHT_HIPROC>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_HIPROC.<get-SHT_HIPROC>|<get-SHT_HIPROC>(){}[0]
        final const val SHT_HIUSER // space.iseki.executables.elf/ElfSType.Constants.SHT_HIUSER|{}SHT_HIUSER[0]
            final fun <get-SHT_HIUSER>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_HIUSER.<get-SHT_HIUSER>|<get-SHT_HIUSER>(){}[0]
        final const val SHT_LOPROC // space.iseki.executables.elf/ElfSType.Constants.SHT_LOPROC|{}SHT_LOPROC[0]
            final fun <get-SHT_LOPROC>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_LOPROC.<get-SHT_LOPROC>|<get-SHT_LOPROC>(){}[0]
        final const val SHT_LOUSER // space.iseki.executables.elf/ElfSType.Constants.SHT_LOUSER|{}SHT_LOUSER[0]
            final fun <get-SHT_LOUSER>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_LOUSER.<get-SHT_LOUSER>|<get-SHT_LOUSER>(){}[0]
        final const val SHT_NOBITS // space.iseki.executables.elf/ElfSType.Constants.SHT_NOBITS|{}SHT_NOBITS[0]
            final fun <get-SHT_NOBITS>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_NOBITS.<get-SHT_NOBITS>|<get-SHT_NOBITS>(){}[0]
        final const val SHT_NOTE // space.iseki.executables.elf/ElfSType.Constants.SHT_NOTE|{}SHT_NOTE[0]
            final fun <get-SHT_NOTE>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_NOTE.<get-SHT_NOTE>|<get-SHT_NOTE>(){}[0]
        final const val SHT_NULL // space.iseki.executables.elf/ElfSType.Constants.SHT_NULL|{}SHT_NULL[0]
            final fun <get-SHT_NULL>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_NULL.<get-SHT_NULL>|<get-SHT_NULL>(){}[0]
        final const val SHT_PROGBITS // space.iseki.executables.elf/ElfSType.Constants.SHT_PROGBITS|{}SHT_PROGBITS[0]
            final fun <get-SHT_PROGBITS>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_PROGBITS.<get-SHT_PROGBITS>|<get-SHT_PROGBITS>(){}[0]
        final const val SHT_REL // space.iseki.executables.elf/ElfSType.Constants.SHT_REL|{}SHT_REL[0]
            final fun <get-SHT_REL>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_REL.<get-SHT_REL>|<get-SHT_REL>(){}[0]
        final const val SHT_RELA // space.iseki.executables.elf/ElfSType.Constants.SHT_RELA|{}SHT_RELA[0]
            final fun <get-SHT_RELA>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_RELA.<get-SHT_RELA>|<get-SHT_RELA>(){}[0]
        final const val SHT_SHLIB // space.iseki.executables.elf/ElfSType.Constants.SHT_SHLIB|{}SHT_SHLIB[0]
            final fun <get-SHT_SHLIB>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_SHLIB.<get-SHT_SHLIB>|<get-SHT_SHLIB>(){}[0]
        final const val SHT_STRTAB // space.iseki.executables.elf/ElfSType.Constants.SHT_STRTAB|{}SHT_STRTAB[0]
            final fun <get-SHT_STRTAB>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_STRTAB.<get-SHT_STRTAB>|<get-SHT_STRTAB>(){}[0]
        final const val SHT_SYMTAB // space.iseki.executables.elf/ElfSType.Constants.SHT_SYMTAB|{}SHT_SYMTAB[0]
            final fun <get-SHT_SYMTAB>(): kotlin/Int // space.iseki.executables.elf/ElfSType.Constants.SHT_SYMTAB.<get-SHT_SYMTAB>|<get-SHT_SYMTAB>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfSymBinding : kotlin/Comparable<space.iseki.executables.elf/ElfSymBinding> { // space.iseki.executables.elf/ElfSymBinding|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.elf/ElfSymBinding.<init>|<init>(kotlin.Byte){}[0]

    final val value // space.iseki.executables.elf/ElfSymBinding.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfSymBinding): kotlin/Int // space.iseki.executables.elf/ElfSymBinding.compareTo|compareTo(space.iseki.executables.elf.ElfSymBinding){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfSymBinding.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfSymBinding.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfSymBinding.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfSymBinding.Companion|null[0]
        final val STB_GLOBAL // space.iseki.executables.elf/ElfSymBinding.Companion.STB_GLOBAL|{}STB_GLOBAL[0]
            final fun <get-STB_GLOBAL>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.STB_GLOBAL.<get-STB_GLOBAL>|<get-STB_GLOBAL>(){}[0]
        final val STB_HIPROC // space.iseki.executables.elf/ElfSymBinding.Companion.STB_HIPROC|{}STB_HIPROC[0]
            final fun <get-STB_HIPROC>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.STB_HIPROC.<get-STB_HIPROC>|<get-STB_HIPROC>(){}[0]
        final val STB_LOCAL // space.iseki.executables.elf/ElfSymBinding.Companion.STB_LOCAL|{}STB_LOCAL[0]
            final fun <get-STB_LOCAL>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.STB_LOCAL.<get-STB_LOCAL>|<get-STB_LOCAL>(){}[0]
        final val STB_LOPROC // space.iseki.executables.elf/ElfSymBinding.Companion.STB_LOPROC|{}STB_LOPROC[0]
            final fun <get-STB_LOPROC>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.STB_LOPROC.<get-STB_LOPROC>|<get-STB_LOPROC>(){}[0]
        final val STB_WEAK // space.iseki.executables.elf/ElfSymBinding.Companion.STB_WEAK|{}STB_WEAK[0]
            final fun <get-STB_WEAK>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.STB_WEAK.<get-STB_WEAK>|<get-STB_WEAK>(){}[0]
        final val UNKNOWN // space.iseki.executables.elf/ElfSymBinding.Companion.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfSymBinding> // space.iseki.executables.elf/ElfSymBinding.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfSymBinding? // space.iseki.executables.elf/ElfSymBinding.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfSymBinding.Constants|null[0]
        final const val STB_GLOBAL // space.iseki.executables.elf/ElfSymBinding.Constants.STB_GLOBAL|{}STB_GLOBAL[0]
            final fun <get-STB_GLOBAL>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.Constants.STB_GLOBAL.<get-STB_GLOBAL>|<get-STB_GLOBAL>(){}[0]
        final const val STB_HIPROC // space.iseki.executables.elf/ElfSymBinding.Constants.STB_HIPROC|{}STB_HIPROC[0]
            final fun <get-STB_HIPROC>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.Constants.STB_HIPROC.<get-STB_HIPROC>|<get-STB_HIPROC>(){}[0]
        final const val STB_LOCAL // space.iseki.executables.elf/ElfSymBinding.Constants.STB_LOCAL|{}STB_LOCAL[0]
            final fun <get-STB_LOCAL>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.Constants.STB_LOCAL.<get-STB_LOCAL>|<get-STB_LOCAL>(){}[0]
        final const val STB_LOPROC // space.iseki.executables.elf/ElfSymBinding.Constants.STB_LOPROC|{}STB_LOPROC[0]
            final fun <get-STB_LOPROC>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.Constants.STB_LOPROC.<get-STB_LOPROC>|<get-STB_LOPROC>(){}[0]
        final const val STB_WEAK // space.iseki.executables.elf/ElfSymBinding.Constants.STB_WEAK|{}STB_WEAK[0]
            final fun <get-STB_WEAK>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.Constants.STB_WEAK.<get-STB_WEAK>|<get-STB_WEAK>(){}[0]
        final const val UNKNOWN // space.iseki.executables.elf/ElfSymBinding.Constants.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): kotlin/Byte // space.iseki.executables.elf/ElfSymBinding.Constants.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfSymType : kotlin/Comparable<space.iseki.executables.elf/ElfSymType> { // space.iseki.executables.elf/ElfSymType|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.elf/ElfSymType.<init>|<init>(kotlin.Byte){}[0]

    final val value // space.iseki.executables.elf/ElfSymType.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfSymType): kotlin/Int // space.iseki.executables.elf/ElfSymType.compareTo|compareTo(space.iseki.executables.elf.ElfSymType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfSymType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfSymType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfSymType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfSymType.Companion|null[0]
        final val STT_COMMON // space.iseki.executables.elf/ElfSymType.Companion.STT_COMMON|{}STT_COMMON[0]
            final fun <get-STT_COMMON>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_COMMON.<get-STT_COMMON>|<get-STT_COMMON>(){}[0]
        final val STT_FILE // space.iseki.executables.elf/ElfSymType.Companion.STT_FILE|{}STT_FILE[0]
            final fun <get-STT_FILE>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_FILE.<get-STT_FILE>|<get-STT_FILE>(){}[0]
        final val STT_FUNC // space.iseki.executables.elf/ElfSymType.Companion.STT_FUNC|{}STT_FUNC[0]
            final fun <get-STT_FUNC>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_FUNC.<get-STT_FUNC>|<get-STT_FUNC>(){}[0]
        final val STT_HIPROC // space.iseki.executables.elf/ElfSymType.Companion.STT_HIPROC|{}STT_HIPROC[0]
            final fun <get-STT_HIPROC>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_HIPROC.<get-STT_HIPROC>|<get-STT_HIPROC>(){}[0]
        final val STT_LOPROC // space.iseki.executables.elf/ElfSymType.Companion.STT_LOPROC|{}STT_LOPROC[0]
            final fun <get-STT_LOPROC>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_LOPROC.<get-STT_LOPROC>|<get-STT_LOPROC>(){}[0]
        final val STT_NOTYPE // space.iseki.executables.elf/ElfSymType.Companion.STT_NOTYPE|{}STT_NOTYPE[0]
            final fun <get-STT_NOTYPE>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_NOTYPE.<get-STT_NOTYPE>|<get-STT_NOTYPE>(){}[0]
        final val STT_OBJECT // space.iseki.executables.elf/ElfSymType.Companion.STT_OBJECT|{}STT_OBJECT[0]
            final fun <get-STT_OBJECT>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_OBJECT.<get-STT_OBJECT>|<get-STT_OBJECT>(){}[0]
        final val STT_SECTION // space.iseki.executables.elf/ElfSymType.Companion.STT_SECTION|{}STT_SECTION[0]
            final fun <get-STT_SECTION>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_SECTION.<get-STT_SECTION>|<get-STT_SECTION>(){}[0]
        final val STT_TLS // space.iseki.executables.elf/ElfSymType.Companion.STT_TLS|{}STT_TLS[0]
            final fun <get-STT_TLS>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.STT_TLS.<get-STT_TLS>|<get-STT_TLS>(){}[0]
        final val UNKNOWN // space.iseki.executables.elf/ElfSymType.Companion.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfSymType> // space.iseki.executables.elf/ElfSymType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfSymType? // space.iseki.executables.elf/ElfSymType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfSymType.Constants|null[0]
        final const val STT_COMMON // space.iseki.executables.elf/ElfSymType.Constants.STT_COMMON|{}STT_COMMON[0]
            final fun <get-STT_COMMON>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_COMMON.<get-STT_COMMON>|<get-STT_COMMON>(){}[0]
        final const val STT_FILE // space.iseki.executables.elf/ElfSymType.Constants.STT_FILE|{}STT_FILE[0]
            final fun <get-STT_FILE>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_FILE.<get-STT_FILE>|<get-STT_FILE>(){}[0]
        final const val STT_FUNC // space.iseki.executables.elf/ElfSymType.Constants.STT_FUNC|{}STT_FUNC[0]
            final fun <get-STT_FUNC>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_FUNC.<get-STT_FUNC>|<get-STT_FUNC>(){}[0]
        final const val STT_HIPROC // space.iseki.executables.elf/ElfSymType.Constants.STT_HIPROC|{}STT_HIPROC[0]
            final fun <get-STT_HIPROC>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_HIPROC.<get-STT_HIPROC>|<get-STT_HIPROC>(){}[0]
        final const val STT_LOPROC // space.iseki.executables.elf/ElfSymType.Constants.STT_LOPROC|{}STT_LOPROC[0]
            final fun <get-STT_LOPROC>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_LOPROC.<get-STT_LOPROC>|<get-STT_LOPROC>(){}[0]
        final const val STT_NOTYPE // space.iseki.executables.elf/ElfSymType.Constants.STT_NOTYPE|{}STT_NOTYPE[0]
            final fun <get-STT_NOTYPE>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_NOTYPE.<get-STT_NOTYPE>|<get-STT_NOTYPE>(){}[0]
        final const val STT_OBJECT // space.iseki.executables.elf/ElfSymType.Constants.STT_OBJECT|{}STT_OBJECT[0]
            final fun <get-STT_OBJECT>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_OBJECT.<get-STT_OBJECT>|<get-STT_OBJECT>(){}[0]
        final const val STT_SECTION // space.iseki.executables.elf/ElfSymType.Constants.STT_SECTION|{}STT_SECTION[0]
            final fun <get-STT_SECTION>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_SECTION.<get-STT_SECTION>|<get-STT_SECTION>(){}[0]
        final const val STT_TLS // space.iseki.executables.elf/ElfSymType.Constants.STT_TLS|{}STT_TLS[0]
            final fun <get-STT_TLS>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.STT_TLS.<get-STT_TLS>|<get-STT_TLS>(){}[0]
        final const val UNKNOWN // space.iseki.executables.elf/ElfSymType.Constants.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): kotlin/Byte // space.iseki.executables.elf/ElfSymType.Constants.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfSymVisibility : kotlin/Comparable<space.iseki.executables.elf/ElfSymVisibility> { // space.iseki.executables.elf/ElfSymVisibility|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.elf/ElfSymVisibility.<init>|<init>(kotlin.Byte){}[0]

    final val value // space.iseki.executables.elf/ElfSymVisibility.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.elf/ElfSymVisibility.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfSymVisibility): kotlin/Int // space.iseki.executables.elf/ElfSymVisibility.compareTo|compareTo(space.iseki.executables.elf.ElfSymVisibility){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfSymVisibility.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfSymVisibility.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfSymVisibility.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfSymVisibility.Companion|null[0]
        final val STV_DEFAULT // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_DEFAULT|{}STV_DEFAULT[0]
            final fun <get-STV_DEFAULT>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_DEFAULT.<get-STV_DEFAULT>|<get-STV_DEFAULT>(){}[0]
        final val STV_HIDDEN // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_HIDDEN|{}STV_HIDDEN[0]
            final fun <get-STV_HIDDEN>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_HIDDEN.<get-STV_HIDDEN>|<get-STV_HIDDEN>(){}[0]
        final val STV_INTERNAL // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_INTERNAL|{}STV_INTERNAL[0]
            final fun <get-STV_INTERNAL>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_INTERNAL.<get-STV_INTERNAL>|<get-STV_INTERNAL>(){}[0]
        final val STV_PROTECTED // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_PROTECTED|{}STV_PROTECTED[0]
            final fun <get-STV_PROTECTED>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility.Companion.STV_PROTECTED.<get-STV_PROTECTED>|<get-STV_PROTECTED>(){}[0]
        final val UNKNOWN // space.iseki.executables.elf/ElfSymVisibility.Companion.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility.Companion.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfSymVisibility> // space.iseki.executables.elf/ElfSymVisibility.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfSymVisibility? // space.iseki.executables.elf/ElfSymVisibility.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfSymVisibility.Constants|null[0]
        final const val STV_DEFAULT // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_DEFAULT|{}STV_DEFAULT[0]
            final fun <get-STV_DEFAULT>(): kotlin/Byte // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_DEFAULT.<get-STV_DEFAULT>|<get-STV_DEFAULT>(){}[0]
        final const val STV_HIDDEN // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_HIDDEN|{}STV_HIDDEN[0]
            final fun <get-STV_HIDDEN>(): kotlin/Byte // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_HIDDEN.<get-STV_HIDDEN>|<get-STV_HIDDEN>(){}[0]
        final const val STV_INTERNAL // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_INTERNAL|{}STV_INTERNAL[0]
            final fun <get-STV_INTERNAL>(): kotlin/Byte // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_INTERNAL.<get-STV_INTERNAL>|<get-STV_INTERNAL>(){}[0]
        final const val STV_PROTECTED // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_PROTECTED|{}STV_PROTECTED[0]
            final fun <get-STV_PROTECTED>(): kotlin/Byte // space.iseki.executables.elf/ElfSymVisibility.Constants.STV_PROTECTED.<get-STV_PROTECTED>|<get-STV_PROTECTED>(){}[0]
        final const val UNKNOWN // space.iseki.executables.elf/ElfSymVisibility.Constants.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): kotlin/Byte // space.iseki.executables.elf/ElfSymVisibility.Constants.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
    }
}

final value class space.iseki.executables.elf/ElfType : kotlin/Comparable<space.iseki.executables.elf/ElfType> { // space.iseki.executables.elf/ElfType|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.elf/ElfType.<init>|<init>(kotlin.Short){}[0]

    final val value // space.iseki.executables.elf/ElfType.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.elf/ElfType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.elf/ElfType): kotlin/Int // space.iseki.executables.elf/ElfType.compareTo|compareTo(space.iseki.executables.elf.ElfType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.elf/ElfType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.elf/ElfType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.elf/ElfType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.elf/ElfType.Companion|null[0]
        final val ET_CORE // space.iseki.executables.elf/ElfType.Companion.ET_CORE|{}ET_CORE[0]
            final fun <get-ET_CORE>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_CORE.<get-ET_CORE>|<get-ET_CORE>(){}[0]
        final val ET_DYN // space.iseki.executables.elf/ElfType.Companion.ET_DYN|{}ET_DYN[0]
            final fun <get-ET_DYN>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_DYN.<get-ET_DYN>|<get-ET_DYN>(){}[0]
        final val ET_EXEC // space.iseki.executables.elf/ElfType.Companion.ET_EXEC|{}ET_EXEC[0]
            final fun <get-ET_EXEC>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_EXEC.<get-ET_EXEC>|<get-ET_EXEC>(){}[0]
        final val ET_HIOS // space.iseki.executables.elf/ElfType.Companion.ET_HIOS|{}ET_HIOS[0]
            final fun <get-ET_HIOS>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_HIOS.<get-ET_HIOS>|<get-ET_HIOS>(){}[0]
        final val ET_HIPROC // space.iseki.executables.elf/ElfType.Companion.ET_HIPROC|{}ET_HIPROC[0]
            final fun <get-ET_HIPROC>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_HIPROC.<get-ET_HIPROC>|<get-ET_HIPROC>(){}[0]
        final val ET_LOOS // space.iseki.executables.elf/ElfType.Companion.ET_LOOS|{}ET_LOOS[0]
            final fun <get-ET_LOOS>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_LOOS.<get-ET_LOOS>|<get-ET_LOOS>(){}[0]
        final val ET_LOPROC // space.iseki.executables.elf/ElfType.Companion.ET_LOPROC|{}ET_LOPROC[0]
            final fun <get-ET_LOPROC>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_LOPROC.<get-ET_LOPROC>|<get-ET_LOPROC>(){}[0]
        final val ET_NONE // space.iseki.executables.elf/ElfType.Companion.ET_NONE|{}ET_NONE[0]
            final fun <get-ET_NONE>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_NONE.<get-ET_NONE>|<get-ET_NONE>(){}[0]
        final val ET_REL // space.iseki.executables.elf/ElfType.Companion.ET_REL|{}ET_REL[0]
            final fun <get-ET_REL>(): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.ET_REL.<get-ET_REL>|<get-ET_REL>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.elf/ElfType> // space.iseki.executables.elf/ElfType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.elf/ElfType? // space.iseki.executables.elf/ElfType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.elf/ElfType.Constants|null[0]
        final const val ET_CORE // space.iseki.executables.elf/ElfType.Constants.ET_CORE|{}ET_CORE[0]
            final fun <get-ET_CORE>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_CORE.<get-ET_CORE>|<get-ET_CORE>(){}[0]
        final const val ET_DYN // space.iseki.executables.elf/ElfType.Constants.ET_DYN|{}ET_DYN[0]
            final fun <get-ET_DYN>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_DYN.<get-ET_DYN>|<get-ET_DYN>(){}[0]
        final const val ET_EXEC // space.iseki.executables.elf/ElfType.Constants.ET_EXEC|{}ET_EXEC[0]
            final fun <get-ET_EXEC>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_EXEC.<get-ET_EXEC>|<get-ET_EXEC>(){}[0]
        final const val ET_HIOS // space.iseki.executables.elf/ElfType.Constants.ET_HIOS|{}ET_HIOS[0]
            final fun <get-ET_HIOS>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_HIOS.<get-ET_HIOS>|<get-ET_HIOS>(){}[0]
        final const val ET_HIPROC // space.iseki.executables.elf/ElfType.Constants.ET_HIPROC|{}ET_HIPROC[0]
            final fun <get-ET_HIPROC>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_HIPROC.<get-ET_HIPROC>|<get-ET_HIPROC>(){}[0]
        final const val ET_LOOS // space.iseki.executables.elf/ElfType.Constants.ET_LOOS|{}ET_LOOS[0]
            final fun <get-ET_LOOS>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_LOOS.<get-ET_LOOS>|<get-ET_LOOS>(){}[0]
        final const val ET_LOPROC // space.iseki.executables.elf/ElfType.Constants.ET_LOPROC|{}ET_LOPROC[0]
            final fun <get-ET_LOPROC>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_LOPROC.<get-ET_LOPROC>|<get-ET_LOPROC>(){}[0]
        final const val ET_NONE // space.iseki.executables.elf/ElfType.Constants.ET_NONE|{}ET_NONE[0]
            final fun <get-ET_NONE>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_NONE.<get-ET_NONE>|<get-ET_NONE>(){}[0]
        final const val ET_REL // space.iseki.executables.elf/ElfType.Constants.ET_REL|{}ET_REL[0]
            final fun <get-ET_REL>(): kotlin/Short // space.iseki.executables.elf/ElfType.Constants.ET_REL.<get-ET_REL>|<get-ET_REL>(){}[0]
    }
}

final value class space.iseki.executables.macho.lc/MachoSectionFlag { // space.iseki.executables.macho.lc/MachoSectionFlag|null[0]
    constructor <init>(kotlin/UInt) // space.iseki.executables.macho.lc/MachoSectionFlag.<init>|<init>(kotlin.UInt){}[0]

    final val attributes // space.iseki.executables.macho.lc/MachoSectionFlag.attributes|{}attributes[0]
        final fun <get-attributes>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho.lc/MachoSectionFlag.attributes.<get-attributes>|<get-attributes>(){}[0]
    final val rawValue // space.iseki.executables.macho.lc/MachoSectionFlag.rawValue|{}rawValue[0]
        final fun <get-rawValue>(): kotlin/UInt // space.iseki.executables.macho.lc/MachoSectionFlag.rawValue.<get-rawValue>|<get-rawValue>(){}[0]
    final val type // space.iseki.executables.macho.lc/MachoSectionFlag.type|{}type[0]
        final fun <get-type>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho.lc/MachoSectionFlag.type.<get-type>|<get-type>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho.lc/MachoSectionFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho.lc/MachoSectionFlag.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho.lc/MachoSectionFlag.toString|toString(){}[0]
}

final value class space.iseki.executables.macho/MachoFileType : kotlin/Comparable<space.iseki.executables.macho/MachoFileType> { // space.iseki.executables.macho/MachoFileType|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoFileType.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.macho/MachoFileType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.macho/MachoFileType): kotlin/Int // space.iseki.executables.macho/MachoFileType.compareTo|compareTo(space.iseki.executables.macho.MachoFileType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoFileType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoFileType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoFileType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoFileType.Companion|null[0]
        final val MH_BUNDLE // space.iseki.executables.macho/MachoFileType.Companion.MH_BUNDLE|{}MH_BUNDLE[0]
            final fun <get-MH_BUNDLE>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_BUNDLE.<get-MH_BUNDLE>|<get-MH_BUNDLE>(){}[0]
        final val MH_CORE // space.iseki.executables.macho/MachoFileType.Companion.MH_CORE|{}MH_CORE[0]
            final fun <get-MH_CORE>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_CORE.<get-MH_CORE>|<get-MH_CORE>(){}[0]
        final val MH_DSYM // space.iseki.executables.macho/MachoFileType.Companion.MH_DSYM|{}MH_DSYM[0]
            final fun <get-MH_DSYM>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_DSYM.<get-MH_DSYM>|<get-MH_DSYM>(){}[0]
        final val MH_DYLIB // space.iseki.executables.macho/MachoFileType.Companion.MH_DYLIB|{}MH_DYLIB[0]
            final fun <get-MH_DYLIB>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_DYLIB.<get-MH_DYLIB>|<get-MH_DYLIB>(){}[0]
        final val MH_DYLIB_STUB // space.iseki.executables.macho/MachoFileType.Companion.MH_DYLIB_STUB|{}MH_DYLIB_STUB[0]
            final fun <get-MH_DYLIB_STUB>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_DYLIB_STUB.<get-MH_DYLIB_STUB>|<get-MH_DYLIB_STUB>(){}[0]
        final val MH_DYLINKER // space.iseki.executables.macho/MachoFileType.Companion.MH_DYLINKER|{}MH_DYLINKER[0]
            final fun <get-MH_DYLINKER>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_DYLINKER.<get-MH_DYLINKER>|<get-MH_DYLINKER>(){}[0]
        final val MH_EXECUTE // space.iseki.executables.macho/MachoFileType.Companion.MH_EXECUTE|{}MH_EXECUTE[0]
            final fun <get-MH_EXECUTE>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_EXECUTE.<get-MH_EXECUTE>|<get-MH_EXECUTE>(){}[0]
        final val MH_FILESET // space.iseki.executables.macho/MachoFileType.Companion.MH_FILESET|{}MH_FILESET[0]
            final fun <get-MH_FILESET>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_FILESET.<get-MH_FILESET>|<get-MH_FILESET>(){}[0]
        final val MH_FVMLIB // space.iseki.executables.macho/MachoFileType.Companion.MH_FVMLIB|{}MH_FVMLIB[0]
            final fun <get-MH_FVMLIB>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_FVMLIB.<get-MH_FVMLIB>|<get-MH_FVMLIB>(){}[0]
        final val MH_KEXT_BUNDLE // space.iseki.executables.macho/MachoFileType.Companion.MH_KEXT_BUNDLE|{}MH_KEXT_BUNDLE[0]
            final fun <get-MH_KEXT_BUNDLE>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_KEXT_BUNDLE.<get-MH_KEXT_BUNDLE>|<get-MH_KEXT_BUNDLE>(){}[0]
        final val MH_OBJECT // space.iseki.executables.macho/MachoFileType.Companion.MH_OBJECT|{}MH_OBJECT[0]
            final fun <get-MH_OBJECT>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_OBJECT.<get-MH_OBJECT>|<get-MH_OBJECT>(){}[0]
        final val MH_PRELOAD // space.iseki.executables.macho/MachoFileType.Companion.MH_PRELOAD|{}MH_PRELOAD[0]
            final fun <get-MH_PRELOAD>(): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.MH_PRELOAD.<get-MH_PRELOAD>|<get-MH_PRELOAD>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoFileType> // space.iseki.executables.macho/MachoFileType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoFileType? // space.iseki.executables.macho/MachoFileType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoFileType.Constants|null[0]
        final const val MH_BUNDLE // space.iseki.executables.macho/MachoFileType.Constants.MH_BUNDLE|{}MH_BUNDLE[0]
            final fun <get-MH_BUNDLE>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_BUNDLE.<get-MH_BUNDLE>|<get-MH_BUNDLE>(){}[0]
        final const val MH_CORE // space.iseki.executables.macho/MachoFileType.Constants.MH_CORE|{}MH_CORE[0]
            final fun <get-MH_CORE>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_CORE.<get-MH_CORE>|<get-MH_CORE>(){}[0]
        final const val MH_DSYM // space.iseki.executables.macho/MachoFileType.Constants.MH_DSYM|{}MH_DSYM[0]
            final fun <get-MH_DSYM>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_DSYM.<get-MH_DSYM>|<get-MH_DSYM>(){}[0]
        final const val MH_DYLIB // space.iseki.executables.macho/MachoFileType.Constants.MH_DYLIB|{}MH_DYLIB[0]
            final fun <get-MH_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_DYLIB.<get-MH_DYLIB>|<get-MH_DYLIB>(){}[0]
        final const val MH_DYLIB_STUB // space.iseki.executables.macho/MachoFileType.Constants.MH_DYLIB_STUB|{}MH_DYLIB_STUB[0]
            final fun <get-MH_DYLIB_STUB>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_DYLIB_STUB.<get-MH_DYLIB_STUB>|<get-MH_DYLIB_STUB>(){}[0]
        final const val MH_DYLINKER // space.iseki.executables.macho/MachoFileType.Constants.MH_DYLINKER|{}MH_DYLINKER[0]
            final fun <get-MH_DYLINKER>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_DYLINKER.<get-MH_DYLINKER>|<get-MH_DYLINKER>(){}[0]
        final const val MH_EXECUTE // space.iseki.executables.macho/MachoFileType.Constants.MH_EXECUTE|{}MH_EXECUTE[0]
            final fun <get-MH_EXECUTE>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_EXECUTE.<get-MH_EXECUTE>|<get-MH_EXECUTE>(){}[0]
        final const val MH_FILESET // space.iseki.executables.macho/MachoFileType.Constants.MH_FILESET|{}MH_FILESET[0]
            final fun <get-MH_FILESET>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_FILESET.<get-MH_FILESET>|<get-MH_FILESET>(){}[0]
        final const val MH_FVMLIB // space.iseki.executables.macho/MachoFileType.Constants.MH_FVMLIB|{}MH_FVMLIB[0]
            final fun <get-MH_FVMLIB>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_FVMLIB.<get-MH_FVMLIB>|<get-MH_FVMLIB>(){}[0]
        final const val MH_KEXT_BUNDLE // space.iseki.executables.macho/MachoFileType.Constants.MH_KEXT_BUNDLE|{}MH_KEXT_BUNDLE[0]
            final fun <get-MH_KEXT_BUNDLE>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_KEXT_BUNDLE.<get-MH_KEXT_BUNDLE>|<get-MH_KEXT_BUNDLE>(){}[0]
        final const val MH_OBJECT // space.iseki.executables.macho/MachoFileType.Constants.MH_OBJECT|{}MH_OBJECT[0]
            final fun <get-MH_OBJECT>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_OBJECT.<get-MH_OBJECT>|<get-MH_OBJECT>(){}[0]
        final const val MH_PRELOAD // space.iseki.executables.macho/MachoFileType.Constants.MH_PRELOAD|{}MH_PRELOAD[0]
            final fun <get-MH_PRELOAD>(): kotlin/Int // space.iseki.executables.macho/MachoFileType.Constants.MH_PRELOAD.<get-MH_PRELOAD>|<get-MH_PRELOAD>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoFlags : kotlin.collections/Set<space.iseki.executables.macho/MachoFlags> { // space.iseki.executables.macho/MachoFlags|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoFlags.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.macho/MachoFlags.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.macho/MachoFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.macho/MachoFlags): kotlin/Boolean // space.iseki.executables.macho/MachoFlags.contains|contains(space.iseki.executables.macho.MachoFlags){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.macho/MachoFlags>): kotlin/Boolean // space.iseki.executables.macho/MachoFlags.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.macho.MachoFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoFlags.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.macho/MachoFlags.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.macho/MachoFlags> // space.iseki.executables.macho/MachoFlags.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.macho/MachoFlags): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.or|or(space.iseki.executables.macho.MachoFlags){}[0]
    final fun plus(space.iseki.executables.macho/MachoFlags): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.plus|plus(space.iseki.executables.macho.MachoFlags){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoFlags.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoFlags.Companion|null[0]
        final val MH_ALLMODSBOUND // space.iseki.executables.macho/MachoFlags.Companion.MH_ALLMODSBOUND|{}MH_ALLMODSBOUND[0]
            final fun <get-MH_ALLMODSBOUND>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_ALLMODSBOUND.<get-MH_ALLMODSBOUND>|<get-MH_ALLMODSBOUND>(){}[0]
        final val MH_ALLOW_STACK_EXECUTION // space.iseki.executables.macho/MachoFlags.Companion.MH_ALLOW_STACK_EXECUTION|{}MH_ALLOW_STACK_EXECUTION[0]
            final fun <get-MH_ALLOW_STACK_EXECUTION>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_ALLOW_STACK_EXECUTION.<get-MH_ALLOW_STACK_EXECUTION>|<get-MH_ALLOW_STACK_EXECUTION>(){}[0]
        final val MH_APP_EXTENSION_SAFE // space.iseki.executables.macho/MachoFlags.Companion.MH_APP_EXTENSION_SAFE|{}MH_APP_EXTENSION_SAFE[0]
            final fun <get-MH_APP_EXTENSION_SAFE>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_APP_EXTENSION_SAFE.<get-MH_APP_EXTENSION_SAFE>|<get-MH_APP_EXTENSION_SAFE>(){}[0]
        final val MH_BINDATLOAD // space.iseki.executables.macho/MachoFlags.Companion.MH_BINDATLOAD|{}MH_BINDATLOAD[0]
            final fun <get-MH_BINDATLOAD>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_BINDATLOAD.<get-MH_BINDATLOAD>|<get-MH_BINDATLOAD>(){}[0]
        final val MH_BINDS_TO_WEAK // space.iseki.executables.macho/MachoFlags.Companion.MH_BINDS_TO_WEAK|{}MH_BINDS_TO_WEAK[0]
            final fun <get-MH_BINDS_TO_WEAK>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_BINDS_TO_WEAK.<get-MH_BINDS_TO_WEAK>|<get-MH_BINDS_TO_WEAK>(){}[0]
        final val MH_CANONICAL // space.iseki.executables.macho/MachoFlags.Companion.MH_CANONICAL|{}MH_CANONICAL[0]
            final fun <get-MH_CANONICAL>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_CANONICAL.<get-MH_CANONICAL>|<get-MH_CANONICAL>(){}[0]
        final val MH_DEAD_STRIPPABLE_DYLIB // space.iseki.executables.macho/MachoFlags.Companion.MH_DEAD_STRIPPABLE_DYLIB|{}MH_DEAD_STRIPPABLE_DYLIB[0]
            final fun <get-MH_DEAD_STRIPPABLE_DYLIB>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_DEAD_STRIPPABLE_DYLIB.<get-MH_DEAD_STRIPPABLE_DYLIB>|<get-MH_DEAD_STRIPPABLE_DYLIB>(){}[0]
        final val MH_DYLDLINK // space.iseki.executables.macho/MachoFlags.Companion.MH_DYLDLINK|{}MH_DYLDLINK[0]
            final fun <get-MH_DYLDLINK>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_DYLDLINK.<get-MH_DYLDLINK>|<get-MH_DYLDLINK>(){}[0]
        final val MH_DYLIB_IN_CACHE // space.iseki.executables.macho/MachoFlags.Companion.MH_DYLIB_IN_CACHE|{}MH_DYLIB_IN_CACHE[0]
            final fun <get-MH_DYLIB_IN_CACHE>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_DYLIB_IN_CACHE.<get-MH_DYLIB_IN_CACHE>|<get-MH_DYLIB_IN_CACHE>(){}[0]
        final val MH_FORCE_FLAT // space.iseki.executables.macho/MachoFlags.Companion.MH_FORCE_FLAT|{}MH_FORCE_FLAT[0]
            final fun <get-MH_FORCE_FLAT>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_FORCE_FLAT.<get-MH_FORCE_FLAT>|<get-MH_FORCE_FLAT>(){}[0]
        final val MH_HAS_TLV_DESCRIPTORS // space.iseki.executables.macho/MachoFlags.Companion.MH_HAS_TLV_DESCRIPTORS|{}MH_HAS_TLV_DESCRIPTORS[0]
            final fun <get-MH_HAS_TLV_DESCRIPTORS>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_HAS_TLV_DESCRIPTORS.<get-MH_HAS_TLV_DESCRIPTORS>|<get-MH_HAS_TLV_DESCRIPTORS>(){}[0]
        final val MH_INCRLINK // space.iseki.executables.macho/MachoFlags.Companion.MH_INCRLINK|{}MH_INCRLINK[0]
            final fun <get-MH_INCRLINK>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_INCRLINK.<get-MH_INCRLINK>|<get-MH_INCRLINK>(){}[0]
        final val MH_LAZY_INIT // space.iseki.executables.macho/MachoFlags.Companion.MH_LAZY_INIT|{}MH_LAZY_INIT[0]
            final fun <get-MH_LAZY_INIT>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_LAZY_INIT.<get-MH_LAZY_INIT>|<get-MH_LAZY_INIT>(){}[0]
        final val MH_NLIST_OUTOFSYNC_WITH_DYLDINFO // space.iseki.executables.macho/MachoFlags.Companion.MH_NLIST_OUTOFSYNC_WITH_DYLDINFO|{}MH_NLIST_OUTOFSYNC_WITH_DYLDINFO[0]
            final fun <get-MH_NLIST_OUTOFSYNC_WITH_DYLDINFO>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_NLIST_OUTOFSYNC_WITH_DYLDINFO.<get-MH_NLIST_OUTOFSYNC_WITH_DYLDINFO>|<get-MH_NLIST_OUTOFSYNC_WITH_DYLDINFO>(){}[0]
        final val MH_NOFIXPREBINDING // space.iseki.executables.macho/MachoFlags.Companion.MH_NOFIXPREBINDING|{}MH_NOFIXPREBINDING[0]
            final fun <get-MH_NOFIXPREBINDING>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_NOFIXPREBINDING.<get-MH_NOFIXPREBINDING>|<get-MH_NOFIXPREBINDING>(){}[0]
        final val MH_NOMULTIDEFS // space.iseki.executables.macho/MachoFlags.Companion.MH_NOMULTIDEFS|{}MH_NOMULTIDEFS[0]
            final fun <get-MH_NOMULTIDEFS>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_NOMULTIDEFS.<get-MH_NOMULTIDEFS>|<get-MH_NOMULTIDEFS>(){}[0]
        final val MH_NOUNDEFS // space.iseki.executables.macho/MachoFlags.Companion.MH_NOUNDEFS|{}MH_NOUNDEFS[0]
            final fun <get-MH_NOUNDEFS>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_NOUNDEFS.<get-MH_NOUNDEFS>|<get-MH_NOUNDEFS>(){}[0]
        final val MH_NO_HEAP_EXECUTION // space.iseki.executables.macho/MachoFlags.Companion.MH_NO_HEAP_EXECUTION|{}MH_NO_HEAP_EXECUTION[0]
            final fun <get-MH_NO_HEAP_EXECUTION>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_NO_HEAP_EXECUTION.<get-MH_NO_HEAP_EXECUTION>|<get-MH_NO_HEAP_EXECUTION>(){}[0]
        final val MH_NO_REEXPORTED_DYLIBS // space.iseki.executables.macho/MachoFlags.Companion.MH_NO_REEXPORTED_DYLIBS|{}MH_NO_REEXPORTED_DYLIBS[0]
            final fun <get-MH_NO_REEXPORTED_DYLIBS>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_NO_REEXPORTED_DYLIBS.<get-MH_NO_REEXPORTED_DYLIBS>|<get-MH_NO_REEXPORTED_DYLIBS>(){}[0]
        final val MH_PIE // space.iseki.executables.macho/MachoFlags.Companion.MH_PIE|{}MH_PIE[0]
            final fun <get-MH_PIE>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_PIE.<get-MH_PIE>|<get-MH_PIE>(){}[0]
        final val MH_PREBINDABLE // space.iseki.executables.macho/MachoFlags.Companion.MH_PREBINDABLE|{}MH_PREBINDABLE[0]
            final fun <get-MH_PREBINDABLE>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_PREBINDABLE.<get-MH_PREBINDABLE>|<get-MH_PREBINDABLE>(){}[0]
        final val MH_PREBOUND // space.iseki.executables.macho/MachoFlags.Companion.MH_PREBOUND|{}MH_PREBOUND[0]
            final fun <get-MH_PREBOUND>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_PREBOUND.<get-MH_PREBOUND>|<get-MH_PREBOUND>(){}[0]
        final val MH_ROOT_SAFE // space.iseki.executables.macho/MachoFlags.Companion.MH_ROOT_SAFE|{}MH_ROOT_SAFE[0]
            final fun <get-MH_ROOT_SAFE>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_ROOT_SAFE.<get-MH_ROOT_SAFE>|<get-MH_ROOT_SAFE>(){}[0]
        final val MH_SETUID_SAFE // space.iseki.executables.macho/MachoFlags.Companion.MH_SETUID_SAFE|{}MH_SETUID_SAFE[0]
            final fun <get-MH_SETUID_SAFE>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_SETUID_SAFE.<get-MH_SETUID_SAFE>|<get-MH_SETUID_SAFE>(){}[0]
        final val MH_SIM_SUPPORT // space.iseki.executables.macho/MachoFlags.Companion.MH_SIM_SUPPORT|{}MH_SIM_SUPPORT[0]
            final fun <get-MH_SIM_SUPPORT>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_SIM_SUPPORT.<get-MH_SIM_SUPPORT>|<get-MH_SIM_SUPPORT>(){}[0]
        final val MH_SPLIT_SEGS // space.iseki.executables.macho/MachoFlags.Companion.MH_SPLIT_SEGS|{}MH_SPLIT_SEGS[0]
            final fun <get-MH_SPLIT_SEGS>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_SPLIT_SEGS.<get-MH_SPLIT_SEGS>|<get-MH_SPLIT_SEGS>(){}[0]
        final val MH_SUBSECTIONS_VIA_SYMBOLS // space.iseki.executables.macho/MachoFlags.Companion.MH_SUBSECTIONS_VIA_SYMBOLS|{}MH_SUBSECTIONS_VIA_SYMBOLS[0]
            final fun <get-MH_SUBSECTIONS_VIA_SYMBOLS>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_SUBSECTIONS_VIA_SYMBOLS.<get-MH_SUBSECTIONS_VIA_SYMBOLS>|<get-MH_SUBSECTIONS_VIA_SYMBOLS>(){}[0]
        final val MH_TWOLEVEL // space.iseki.executables.macho/MachoFlags.Companion.MH_TWOLEVEL|{}MH_TWOLEVEL[0]
            final fun <get-MH_TWOLEVEL>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_TWOLEVEL.<get-MH_TWOLEVEL>|<get-MH_TWOLEVEL>(){}[0]
        final val MH_WEAK_DEFINES // space.iseki.executables.macho/MachoFlags.Companion.MH_WEAK_DEFINES|{}MH_WEAK_DEFINES[0]
            final fun <get-MH_WEAK_DEFINES>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.MH_WEAK_DEFINES.<get-MH_WEAK_DEFINES>|<get-MH_WEAK_DEFINES>(){}[0]
        final val ZERO // space.iseki.executables.macho/MachoFlags.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoFlags> // space.iseki.executables.macho/MachoFlags.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoFlags? // space.iseki.executables.macho/MachoFlags.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoFlags.Constants|null[0]
        final const val MH_ALLMODSBOUND // space.iseki.executables.macho/MachoFlags.Constants.MH_ALLMODSBOUND|{}MH_ALLMODSBOUND[0]
            final fun <get-MH_ALLMODSBOUND>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_ALLMODSBOUND.<get-MH_ALLMODSBOUND>|<get-MH_ALLMODSBOUND>(){}[0]
        final const val MH_ALLOW_STACK_EXECUTION // space.iseki.executables.macho/MachoFlags.Constants.MH_ALLOW_STACK_EXECUTION|{}MH_ALLOW_STACK_EXECUTION[0]
            final fun <get-MH_ALLOW_STACK_EXECUTION>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_ALLOW_STACK_EXECUTION.<get-MH_ALLOW_STACK_EXECUTION>|<get-MH_ALLOW_STACK_EXECUTION>(){}[0]
        final const val MH_APP_EXTENSION_SAFE // space.iseki.executables.macho/MachoFlags.Constants.MH_APP_EXTENSION_SAFE|{}MH_APP_EXTENSION_SAFE[0]
            final fun <get-MH_APP_EXTENSION_SAFE>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_APP_EXTENSION_SAFE.<get-MH_APP_EXTENSION_SAFE>|<get-MH_APP_EXTENSION_SAFE>(){}[0]
        final const val MH_BINDATLOAD // space.iseki.executables.macho/MachoFlags.Constants.MH_BINDATLOAD|{}MH_BINDATLOAD[0]
            final fun <get-MH_BINDATLOAD>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_BINDATLOAD.<get-MH_BINDATLOAD>|<get-MH_BINDATLOAD>(){}[0]
        final const val MH_BINDS_TO_WEAK // space.iseki.executables.macho/MachoFlags.Constants.MH_BINDS_TO_WEAK|{}MH_BINDS_TO_WEAK[0]
            final fun <get-MH_BINDS_TO_WEAK>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_BINDS_TO_WEAK.<get-MH_BINDS_TO_WEAK>|<get-MH_BINDS_TO_WEAK>(){}[0]
        final const val MH_CANONICAL // space.iseki.executables.macho/MachoFlags.Constants.MH_CANONICAL|{}MH_CANONICAL[0]
            final fun <get-MH_CANONICAL>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_CANONICAL.<get-MH_CANONICAL>|<get-MH_CANONICAL>(){}[0]
        final const val MH_DEAD_STRIPPABLE_DYLIB // space.iseki.executables.macho/MachoFlags.Constants.MH_DEAD_STRIPPABLE_DYLIB|{}MH_DEAD_STRIPPABLE_DYLIB[0]
            final fun <get-MH_DEAD_STRIPPABLE_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_DEAD_STRIPPABLE_DYLIB.<get-MH_DEAD_STRIPPABLE_DYLIB>|<get-MH_DEAD_STRIPPABLE_DYLIB>(){}[0]
        final const val MH_DYLDLINK // space.iseki.executables.macho/MachoFlags.Constants.MH_DYLDLINK|{}MH_DYLDLINK[0]
            final fun <get-MH_DYLDLINK>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_DYLDLINK.<get-MH_DYLDLINK>|<get-MH_DYLDLINK>(){}[0]
        final const val MH_DYLIB_IN_CACHE // space.iseki.executables.macho/MachoFlags.Constants.MH_DYLIB_IN_CACHE|{}MH_DYLIB_IN_CACHE[0]
            final fun <get-MH_DYLIB_IN_CACHE>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_DYLIB_IN_CACHE.<get-MH_DYLIB_IN_CACHE>|<get-MH_DYLIB_IN_CACHE>(){}[0]
        final const val MH_FORCE_FLAT // space.iseki.executables.macho/MachoFlags.Constants.MH_FORCE_FLAT|{}MH_FORCE_FLAT[0]
            final fun <get-MH_FORCE_FLAT>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_FORCE_FLAT.<get-MH_FORCE_FLAT>|<get-MH_FORCE_FLAT>(){}[0]
        final const val MH_HAS_TLV_DESCRIPTORS // space.iseki.executables.macho/MachoFlags.Constants.MH_HAS_TLV_DESCRIPTORS|{}MH_HAS_TLV_DESCRIPTORS[0]
            final fun <get-MH_HAS_TLV_DESCRIPTORS>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_HAS_TLV_DESCRIPTORS.<get-MH_HAS_TLV_DESCRIPTORS>|<get-MH_HAS_TLV_DESCRIPTORS>(){}[0]
        final const val MH_INCRLINK // space.iseki.executables.macho/MachoFlags.Constants.MH_INCRLINK|{}MH_INCRLINK[0]
            final fun <get-MH_INCRLINK>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_INCRLINK.<get-MH_INCRLINK>|<get-MH_INCRLINK>(){}[0]
        final const val MH_LAZY_INIT // space.iseki.executables.macho/MachoFlags.Constants.MH_LAZY_INIT|{}MH_LAZY_INIT[0]
            final fun <get-MH_LAZY_INIT>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_LAZY_INIT.<get-MH_LAZY_INIT>|<get-MH_LAZY_INIT>(){}[0]
        final const val MH_NLIST_OUTOFSYNC_WITH_DYLDINFO // space.iseki.executables.macho/MachoFlags.Constants.MH_NLIST_OUTOFSYNC_WITH_DYLDINFO|{}MH_NLIST_OUTOFSYNC_WITH_DYLDINFO[0]
            final fun <get-MH_NLIST_OUTOFSYNC_WITH_DYLDINFO>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_NLIST_OUTOFSYNC_WITH_DYLDINFO.<get-MH_NLIST_OUTOFSYNC_WITH_DYLDINFO>|<get-MH_NLIST_OUTOFSYNC_WITH_DYLDINFO>(){}[0]
        final const val MH_NOFIXPREBINDING // space.iseki.executables.macho/MachoFlags.Constants.MH_NOFIXPREBINDING|{}MH_NOFIXPREBINDING[0]
            final fun <get-MH_NOFIXPREBINDING>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_NOFIXPREBINDING.<get-MH_NOFIXPREBINDING>|<get-MH_NOFIXPREBINDING>(){}[0]
        final const val MH_NOMULTIDEFS // space.iseki.executables.macho/MachoFlags.Constants.MH_NOMULTIDEFS|{}MH_NOMULTIDEFS[0]
            final fun <get-MH_NOMULTIDEFS>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_NOMULTIDEFS.<get-MH_NOMULTIDEFS>|<get-MH_NOMULTIDEFS>(){}[0]
        final const val MH_NOUNDEFS // space.iseki.executables.macho/MachoFlags.Constants.MH_NOUNDEFS|{}MH_NOUNDEFS[0]
            final fun <get-MH_NOUNDEFS>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_NOUNDEFS.<get-MH_NOUNDEFS>|<get-MH_NOUNDEFS>(){}[0]
        final const val MH_NO_HEAP_EXECUTION // space.iseki.executables.macho/MachoFlags.Constants.MH_NO_HEAP_EXECUTION|{}MH_NO_HEAP_EXECUTION[0]
            final fun <get-MH_NO_HEAP_EXECUTION>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_NO_HEAP_EXECUTION.<get-MH_NO_HEAP_EXECUTION>|<get-MH_NO_HEAP_EXECUTION>(){}[0]
        final const val MH_NO_REEXPORTED_DYLIBS // space.iseki.executables.macho/MachoFlags.Constants.MH_NO_REEXPORTED_DYLIBS|{}MH_NO_REEXPORTED_DYLIBS[0]
            final fun <get-MH_NO_REEXPORTED_DYLIBS>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_NO_REEXPORTED_DYLIBS.<get-MH_NO_REEXPORTED_DYLIBS>|<get-MH_NO_REEXPORTED_DYLIBS>(){}[0]
        final const val MH_PIE // space.iseki.executables.macho/MachoFlags.Constants.MH_PIE|{}MH_PIE[0]
            final fun <get-MH_PIE>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_PIE.<get-MH_PIE>|<get-MH_PIE>(){}[0]
        final const val MH_PREBINDABLE // space.iseki.executables.macho/MachoFlags.Constants.MH_PREBINDABLE|{}MH_PREBINDABLE[0]
            final fun <get-MH_PREBINDABLE>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_PREBINDABLE.<get-MH_PREBINDABLE>|<get-MH_PREBINDABLE>(){}[0]
        final const val MH_PREBOUND // space.iseki.executables.macho/MachoFlags.Constants.MH_PREBOUND|{}MH_PREBOUND[0]
            final fun <get-MH_PREBOUND>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_PREBOUND.<get-MH_PREBOUND>|<get-MH_PREBOUND>(){}[0]
        final const val MH_ROOT_SAFE // space.iseki.executables.macho/MachoFlags.Constants.MH_ROOT_SAFE|{}MH_ROOT_SAFE[0]
            final fun <get-MH_ROOT_SAFE>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_ROOT_SAFE.<get-MH_ROOT_SAFE>|<get-MH_ROOT_SAFE>(){}[0]
        final const val MH_SETUID_SAFE // space.iseki.executables.macho/MachoFlags.Constants.MH_SETUID_SAFE|{}MH_SETUID_SAFE[0]
            final fun <get-MH_SETUID_SAFE>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_SETUID_SAFE.<get-MH_SETUID_SAFE>|<get-MH_SETUID_SAFE>(){}[0]
        final const val MH_SIM_SUPPORT // space.iseki.executables.macho/MachoFlags.Constants.MH_SIM_SUPPORT|{}MH_SIM_SUPPORT[0]
            final fun <get-MH_SIM_SUPPORT>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_SIM_SUPPORT.<get-MH_SIM_SUPPORT>|<get-MH_SIM_SUPPORT>(){}[0]
        final const val MH_SPLIT_SEGS // space.iseki.executables.macho/MachoFlags.Constants.MH_SPLIT_SEGS|{}MH_SPLIT_SEGS[0]
            final fun <get-MH_SPLIT_SEGS>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_SPLIT_SEGS.<get-MH_SPLIT_SEGS>|<get-MH_SPLIT_SEGS>(){}[0]
        final const val MH_SUBSECTIONS_VIA_SYMBOLS // space.iseki.executables.macho/MachoFlags.Constants.MH_SUBSECTIONS_VIA_SYMBOLS|{}MH_SUBSECTIONS_VIA_SYMBOLS[0]
            final fun <get-MH_SUBSECTIONS_VIA_SYMBOLS>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_SUBSECTIONS_VIA_SYMBOLS.<get-MH_SUBSECTIONS_VIA_SYMBOLS>|<get-MH_SUBSECTIONS_VIA_SYMBOLS>(){}[0]
        final const val MH_TWOLEVEL // space.iseki.executables.macho/MachoFlags.Constants.MH_TWOLEVEL|{}MH_TWOLEVEL[0]
            final fun <get-MH_TWOLEVEL>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_TWOLEVEL.<get-MH_TWOLEVEL>|<get-MH_TWOLEVEL>(){}[0]
        final const val MH_WEAK_DEFINES // space.iseki.executables.macho/MachoFlags.Constants.MH_WEAK_DEFINES|{}MH_WEAK_DEFINES[0]
            final fun <get-MH_WEAK_DEFINES>(): kotlin/Int // space.iseki.executables.macho/MachoFlags.Constants.MH_WEAK_DEFINES.<get-MH_WEAK_DEFINES>|<get-MH_WEAK_DEFINES>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoLoadCommandType : kotlin/Comparable<space.iseki.executables.macho/MachoLoadCommandType> { // space.iseki.executables.macho/MachoLoadCommandType|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoLoadCommandType.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.macho/MachoLoadCommandType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.macho/MachoLoadCommandType): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.compareTo|compareTo(space.iseki.executables.macho.MachoLoadCommandType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoLoadCommandType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoLoadCommandType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoLoadCommandType.Companion|null[0]
        final val LC_BUILD_VERSION // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_BUILD_VERSION|{}LC_BUILD_VERSION[0]
            final fun <get-LC_BUILD_VERSION>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_BUILD_VERSION.<get-LC_BUILD_VERSION>|<get-LC_BUILD_VERSION>(){}[0]
        final val LC_CODE_SIGNATURE // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_CODE_SIGNATURE|{}LC_CODE_SIGNATURE[0]
            final fun <get-LC_CODE_SIGNATURE>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_CODE_SIGNATURE.<get-LC_CODE_SIGNATURE>|<get-LC_CODE_SIGNATURE>(){}[0]
        final val LC_DATA_IN_CODE // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DATA_IN_CODE|{}LC_DATA_IN_CODE[0]
            final fun <get-LC_DATA_IN_CODE>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DATA_IN_CODE.<get-LC_DATA_IN_CODE>|<get-LC_DATA_IN_CODE>(){}[0]
        final val LC_DYLD_CHAINED_FIXUPS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_CHAINED_FIXUPS|{}LC_DYLD_CHAINED_FIXUPS[0]
            final fun <get-LC_DYLD_CHAINED_FIXUPS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_CHAINED_FIXUPS.<get-LC_DYLD_CHAINED_FIXUPS>|<get-LC_DYLD_CHAINED_FIXUPS>(){}[0]
        final val LC_DYLD_ENVIRONMENT // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_ENVIRONMENT|{}LC_DYLD_ENVIRONMENT[0]
            final fun <get-LC_DYLD_ENVIRONMENT>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_ENVIRONMENT.<get-LC_DYLD_ENVIRONMENT>|<get-LC_DYLD_ENVIRONMENT>(){}[0]
        final val LC_DYLD_EXPORTS_TRIE // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_EXPORTS_TRIE|{}LC_DYLD_EXPORTS_TRIE[0]
            final fun <get-LC_DYLD_EXPORTS_TRIE>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_EXPORTS_TRIE.<get-LC_DYLD_EXPORTS_TRIE>|<get-LC_DYLD_EXPORTS_TRIE>(){}[0]
        final val LC_DYLD_INFO // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_INFO|{}LC_DYLD_INFO[0]
            final fun <get-LC_DYLD_INFO>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_INFO.<get-LC_DYLD_INFO>|<get-LC_DYLD_INFO>(){}[0]
        final val LC_DYLD_INFO_ONLY // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_INFO_ONLY|{}LC_DYLD_INFO_ONLY[0]
            final fun <get-LC_DYLD_INFO_ONLY>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLD_INFO_ONLY.<get-LC_DYLD_INFO_ONLY>|<get-LC_DYLD_INFO_ONLY>(){}[0]
        final val LC_DYLIB_CODE_SIGN_DRS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLIB_CODE_SIGN_DRS|{}LC_DYLIB_CODE_SIGN_DRS[0]
            final fun <get-LC_DYLIB_CODE_SIGN_DRS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYLIB_CODE_SIGN_DRS.<get-LC_DYLIB_CODE_SIGN_DRS>|<get-LC_DYLIB_CODE_SIGN_DRS>(){}[0]
        final val LC_DYSYMTAB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYSYMTAB|{}LC_DYSYMTAB[0]
            final fun <get-LC_DYSYMTAB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_DYSYMTAB.<get-LC_DYSYMTAB>|<get-LC_DYSYMTAB>(){}[0]
        final val LC_ENCRYPTION_INFO // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ENCRYPTION_INFO|{}LC_ENCRYPTION_INFO[0]
            final fun <get-LC_ENCRYPTION_INFO>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ENCRYPTION_INFO.<get-LC_ENCRYPTION_INFO>|<get-LC_ENCRYPTION_INFO>(){}[0]
        final val LC_ENCRYPTION_INFO_64 // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ENCRYPTION_INFO_64|{}LC_ENCRYPTION_INFO_64[0]
            final fun <get-LC_ENCRYPTION_INFO_64>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ENCRYPTION_INFO_64.<get-LC_ENCRYPTION_INFO_64>|<get-LC_ENCRYPTION_INFO_64>(){}[0]
        final val LC_FILESET_ENTRY // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_FILESET_ENTRY|{}LC_FILESET_ENTRY[0]
            final fun <get-LC_FILESET_ENTRY>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_FILESET_ENTRY.<get-LC_FILESET_ENTRY>|<get-LC_FILESET_ENTRY>(){}[0]
        final val LC_FUNCTION_STARTS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_FUNCTION_STARTS|{}LC_FUNCTION_STARTS[0]
            final fun <get-LC_FUNCTION_STARTS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_FUNCTION_STARTS.<get-LC_FUNCTION_STARTS>|<get-LC_FUNCTION_STARTS>(){}[0]
        final val LC_FVMFILE // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_FVMFILE|{}LC_FVMFILE[0]
            final fun <get-LC_FVMFILE>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_FVMFILE.<get-LC_FVMFILE>|<get-LC_FVMFILE>(){}[0]
        final val LC_IDENT // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_IDENT|{}LC_IDENT[0]
            final fun <get-LC_IDENT>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_IDENT.<get-LC_IDENT>|<get-LC_IDENT>(){}[0]
        final val LC_IDFVMLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_IDFVMLIB|{}LC_IDFVMLIB[0]
            final fun <get-LC_IDFVMLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_IDFVMLIB.<get-LC_IDFVMLIB>|<get-LC_IDFVMLIB>(){}[0]
        final val LC_ID_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ID_DYLIB|{}LC_ID_DYLIB[0]
            final fun <get-LC_ID_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ID_DYLIB.<get-LC_ID_DYLIB>|<get-LC_ID_DYLIB>(){}[0]
        final val LC_ID_DYLINKER // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ID_DYLINKER|{}LC_ID_DYLINKER[0]
            final fun <get-LC_ID_DYLINKER>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ID_DYLINKER.<get-LC_ID_DYLINKER>|<get-LC_ID_DYLINKER>(){}[0]
        final val LC_LAZY_LOAD_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LAZY_LOAD_DYLIB|{}LC_LAZY_LOAD_DYLIB[0]
            final fun <get-LC_LAZY_LOAD_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LAZY_LOAD_DYLIB.<get-LC_LAZY_LOAD_DYLIB>|<get-LC_LAZY_LOAD_DYLIB>(){}[0]
        final val LC_LINKER_OPTIMIZATION_HINT // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LINKER_OPTIMIZATION_HINT|{}LC_LINKER_OPTIMIZATION_HINT[0]
            final fun <get-LC_LINKER_OPTIMIZATION_HINT>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LINKER_OPTIMIZATION_HINT.<get-LC_LINKER_OPTIMIZATION_HINT>|<get-LC_LINKER_OPTIMIZATION_HINT>(){}[0]
        final val LC_LINKER_OPTION // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LINKER_OPTION|{}LC_LINKER_OPTION[0]
            final fun <get-LC_LINKER_OPTION>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LINKER_OPTION.<get-LC_LINKER_OPTION>|<get-LC_LINKER_OPTION>(){}[0]
        final val LC_LOADFVMLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOADFVMLIB|{}LC_LOADFVMLIB[0]
            final fun <get-LC_LOADFVMLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOADFVMLIB.<get-LC_LOADFVMLIB>|<get-LC_LOADFVMLIB>(){}[0]
        final val LC_LOAD_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_DYLIB|{}LC_LOAD_DYLIB[0]
            final fun <get-LC_LOAD_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_DYLIB.<get-LC_LOAD_DYLIB>|<get-LC_LOAD_DYLIB>(){}[0]
        final val LC_LOAD_DYLINKER // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_DYLINKER|{}LC_LOAD_DYLINKER[0]
            final fun <get-LC_LOAD_DYLINKER>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_DYLINKER.<get-LC_LOAD_DYLINKER>|<get-LC_LOAD_DYLINKER>(){}[0]
        final val LC_LOAD_UPWARD_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_UPWARD_DYLIB|{}LC_LOAD_UPWARD_DYLIB[0]
            final fun <get-LC_LOAD_UPWARD_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_UPWARD_DYLIB.<get-LC_LOAD_UPWARD_DYLIB>|<get-LC_LOAD_UPWARD_DYLIB>(){}[0]
        final val LC_LOAD_WEAK_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_WEAK_DYLIB|{}LC_LOAD_WEAK_DYLIB[0]
            final fun <get-LC_LOAD_WEAK_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_LOAD_WEAK_DYLIB.<get-LC_LOAD_WEAK_DYLIB>|<get-LC_LOAD_WEAK_DYLIB>(){}[0]
        final val LC_MAIN // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_MAIN|{}LC_MAIN[0]
            final fun <get-LC_MAIN>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_MAIN.<get-LC_MAIN>|<get-LC_MAIN>(){}[0]
        final val LC_NOTE // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_NOTE|{}LC_NOTE[0]
            final fun <get-LC_NOTE>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_NOTE.<get-LC_NOTE>|<get-LC_NOTE>(){}[0]
        final val LC_PREBIND_CKSUM // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_PREBIND_CKSUM|{}LC_PREBIND_CKSUM[0]
            final fun <get-LC_PREBIND_CKSUM>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_PREBIND_CKSUM.<get-LC_PREBIND_CKSUM>|<get-LC_PREBIND_CKSUM>(){}[0]
        final val LC_PREBOUND_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_PREBOUND_DYLIB|{}LC_PREBOUND_DYLIB[0]
            final fun <get-LC_PREBOUND_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_PREBOUND_DYLIB.<get-LC_PREBOUND_DYLIB>|<get-LC_PREBOUND_DYLIB>(){}[0]
        final val LC_PREPAGE // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_PREPAGE|{}LC_PREPAGE[0]
            final fun <get-LC_PREPAGE>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_PREPAGE.<get-LC_PREPAGE>|<get-LC_PREPAGE>(){}[0]
        final val LC_REEXPORT_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_REEXPORT_DYLIB|{}LC_REEXPORT_DYLIB[0]
            final fun <get-LC_REEXPORT_DYLIB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_REEXPORT_DYLIB.<get-LC_REEXPORT_DYLIB>|<get-LC_REEXPORT_DYLIB>(){}[0]
        final val LC_ROUTINES // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ROUTINES|{}LC_ROUTINES[0]
            final fun <get-LC_ROUTINES>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ROUTINES.<get-LC_ROUTINES>|<get-LC_ROUTINES>(){}[0]
        final val LC_ROUTINES_64 // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ROUTINES_64|{}LC_ROUTINES_64[0]
            final fun <get-LC_ROUTINES_64>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_ROUTINES_64.<get-LC_ROUTINES_64>|<get-LC_ROUTINES_64>(){}[0]
        final val LC_RPATH // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_RPATH|{}LC_RPATH[0]
            final fun <get-LC_RPATH>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_RPATH.<get-LC_RPATH>|<get-LC_RPATH>(){}[0]
        final val LC_SEGMENT // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SEGMENT|{}LC_SEGMENT[0]
            final fun <get-LC_SEGMENT>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SEGMENT.<get-LC_SEGMENT>|<get-LC_SEGMENT>(){}[0]
        final val LC_SEGMENT_64 // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SEGMENT_64|{}LC_SEGMENT_64[0]
            final fun <get-LC_SEGMENT_64>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SEGMENT_64.<get-LC_SEGMENT_64>|<get-LC_SEGMENT_64>(){}[0]
        final val LC_SEGMENT_SPLIT_INFO // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SEGMENT_SPLIT_INFO|{}LC_SEGMENT_SPLIT_INFO[0]
            final fun <get-LC_SEGMENT_SPLIT_INFO>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SEGMENT_SPLIT_INFO.<get-LC_SEGMENT_SPLIT_INFO>|<get-LC_SEGMENT_SPLIT_INFO>(){}[0]
        final val LC_SOURCE_VERSION // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SOURCE_VERSION|{}LC_SOURCE_VERSION[0]
            final fun <get-LC_SOURCE_VERSION>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SOURCE_VERSION.<get-LC_SOURCE_VERSION>|<get-LC_SOURCE_VERSION>(){}[0]
        final val LC_SUB_CLIENT // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_CLIENT|{}LC_SUB_CLIENT[0]
            final fun <get-LC_SUB_CLIENT>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_CLIENT.<get-LC_SUB_CLIENT>|<get-LC_SUB_CLIENT>(){}[0]
        final val LC_SUB_FRAMEWORK // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_FRAMEWORK|{}LC_SUB_FRAMEWORK[0]
            final fun <get-LC_SUB_FRAMEWORK>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_FRAMEWORK.<get-LC_SUB_FRAMEWORK>|<get-LC_SUB_FRAMEWORK>(){}[0]
        final val LC_SUB_LIBRARY // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_LIBRARY|{}LC_SUB_LIBRARY[0]
            final fun <get-LC_SUB_LIBRARY>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_LIBRARY.<get-LC_SUB_LIBRARY>|<get-LC_SUB_LIBRARY>(){}[0]
        final val LC_SUB_UMBRELLA // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_UMBRELLA|{}LC_SUB_UMBRELLA[0]
            final fun <get-LC_SUB_UMBRELLA>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SUB_UMBRELLA.<get-LC_SUB_UMBRELLA>|<get-LC_SUB_UMBRELLA>(){}[0]
        final val LC_SYMSEG // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SYMSEG|{}LC_SYMSEG[0]
            final fun <get-LC_SYMSEG>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SYMSEG.<get-LC_SYMSEG>|<get-LC_SYMSEG>(){}[0]
        final val LC_SYMTAB // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SYMTAB|{}LC_SYMTAB[0]
            final fun <get-LC_SYMTAB>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_SYMTAB.<get-LC_SYMTAB>|<get-LC_SYMTAB>(){}[0]
        final val LC_THREAD // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_THREAD|{}LC_THREAD[0]
            final fun <get-LC_THREAD>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_THREAD.<get-LC_THREAD>|<get-LC_THREAD>(){}[0]
        final val LC_TWOLEVEL_HINTS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_TWOLEVEL_HINTS|{}LC_TWOLEVEL_HINTS[0]
            final fun <get-LC_TWOLEVEL_HINTS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_TWOLEVEL_HINTS.<get-LC_TWOLEVEL_HINTS>|<get-LC_TWOLEVEL_HINTS>(){}[0]
        final val LC_UNIXTHREAD // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_UNIXTHREAD|{}LC_UNIXTHREAD[0]
            final fun <get-LC_UNIXTHREAD>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_UNIXTHREAD.<get-LC_UNIXTHREAD>|<get-LC_UNIXTHREAD>(){}[0]
        final val LC_UUID // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_UUID|{}LC_UUID[0]
            final fun <get-LC_UUID>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_UUID.<get-LC_UUID>|<get-LC_UUID>(){}[0]
        final val LC_VERSION_MIN_IPHONEOS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_IPHONEOS|{}LC_VERSION_MIN_IPHONEOS[0]
            final fun <get-LC_VERSION_MIN_IPHONEOS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_IPHONEOS.<get-LC_VERSION_MIN_IPHONEOS>|<get-LC_VERSION_MIN_IPHONEOS>(){}[0]
        final val LC_VERSION_MIN_MACOSX // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_MACOSX|{}LC_VERSION_MIN_MACOSX[0]
            final fun <get-LC_VERSION_MIN_MACOSX>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_MACOSX.<get-LC_VERSION_MIN_MACOSX>|<get-LC_VERSION_MIN_MACOSX>(){}[0]
        final val LC_VERSION_MIN_TVOS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_TVOS|{}LC_VERSION_MIN_TVOS[0]
            final fun <get-LC_VERSION_MIN_TVOS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_TVOS.<get-LC_VERSION_MIN_TVOS>|<get-LC_VERSION_MIN_TVOS>(){}[0]
        final val LC_VERSION_MIN_WATCHOS // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_WATCHOS|{}LC_VERSION_MIN_WATCHOS[0]
            final fun <get-LC_VERSION_MIN_WATCHOS>(): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.LC_VERSION_MIN_WATCHOS.<get-LC_VERSION_MIN_WATCHOS>|<get-LC_VERSION_MIN_WATCHOS>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoLoadCommandType> // space.iseki.executables.macho/MachoLoadCommandType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoLoadCommandType? // space.iseki.executables.macho/MachoLoadCommandType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoLoadCommandType.Constants|null[0]
        final const val LC_BUILD_VERSION // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_BUILD_VERSION|{}LC_BUILD_VERSION[0]
            final fun <get-LC_BUILD_VERSION>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_BUILD_VERSION.<get-LC_BUILD_VERSION>|<get-LC_BUILD_VERSION>(){}[0]
        final const val LC_CODE_SIGNATURE // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_CODE_SIGNATURE|{}LC_CODE_SIGNATURE[0]
            final fun <get-LC_CODE_SIGNATURE>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_CODE_SIGNATURE.<get-LC_CODE_SIGNATURE>|<get-LC_CODE_SIGNATURE>(){}[0]
        final const val LC_DATA_IN_CODE // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DATA_IN_CODE|{}LC_DATA_IN_CODE[0]
            final fun <get-LC_DATA_IN_CODE>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DATA_IN_CODE.<get-LC_DATA_IN_CODE>|<get-LC_DATA_IN_CODE>(){}[0]
        final const val LC_DYLD_CHAINED_FIXUPS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_CHAINED_FIXUPS|{}LC_DYLD_CHAINED_FIXUPS[0]
            final fun <get-LC_DYLD_CHAINED_FIXUPS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_CHAINED_FIXUPS.<get-LC_DYLD_CHAINED_FIXUPS>|<get-LC_DYLD_CHAINED_FIXUPS>(){}[0]
        final const val LC_DYLD_ENVIRONMENT // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_ENVIRONMENT|{}LC_DYLD_ENVIRONMENT[0]
            final fun <get-LC_DYLD_ENVIRONMENT>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_ENVIRONMENT.<get-LC_DYLD_ENVIRONMENT>|<get-LC_DYLD_ENVIRONMENT>(){}[0]
        final const val LC_DYLD_EXPORTS_TRIE // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_EXPORTS_TRIE|{}LC_DYLD_EXPORTS_TRIE[0]
            final fun <get-LC_DYLD_EXPORTS_TRIE>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_EXPORTS_TRIE.<get-LC_DYLD_EXPORTS_TRIE>|<get-LC_DYLD_EXPORTS_TRIE>(){}[0]
        final const val LC_DYLD_INFO // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_INFO|{}LC_DYLD_INFO[0]
            final fun <get-LC_DYLD_INFO>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_INFO.<get-LC_DYLD_INFO>|<get-LC_DYLD_INFO>(){}[0]
        final const val LC_DYLD_INFO_ONLY // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_INFO_ONLY|{}LC_DYLD_INFO_ONLY[0]
            final fun <get-LC_DYLD_INFO_ONLY>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLD_INFO_ONLY.<get-LC_DYLD_INFO_ONLY>|<get-LC_DYLD_INFO_ONLY>(){}[0]
        final const val LC_DYLIB_CODE_SIGN_DRS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLIB_CODE_SIGN_DRS|{}LC_DYLIB_CODE_SIGN_DRS[0]
            final fun <get-LC_DYLIB_CODE_SIGN_DRS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYLIB_CODE_SIGN_DRS.<get-LC_DYLIB_CODE_SIGN_DRS>|<get-LC_DYLIB_CODE_SIGN_DRS>(){}[0]
        final const val LC_DYSYMTAB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYSYMTAB|{}LC_DYSYMTAB[0]
            final fun <get-LC_DYSYMTAB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_DYSYMTAB.<get-LC_DYSYMTAB>|<get-LC_DYSYMTAB>(){}[0]
        final const val LC_ENCRYPTION_INFO // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ENCRYPTION_INFO|{}LC_ENCRYPTION_INFO[0]
            final fun <get-LC_ENCRYPTION_INFO>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ENCRYPTION_INFO.<get-LC_ENCRYPTION_INFO>|<get-LC_ENCRYPTION_INFO>(){}[0]
        final const val LC_ENCRYPTION_INFO_64 // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ENCRYPTION_INFO_64|{}LC_ENCRYPTION_INFO_64[0]
            final fun <get-LC_ENCRYPTION_INFO_64>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ENCRYPTION_INFO_64.<get-LC_ENCRYPTION_INFO_64>|<get-LC_ENCRYPTION_INFO_64>(){}[0]
        final const val LC_FILESET_ENTRY // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_FILESET_ENTRY|{}LC_FILESET_ENTRY[0]
            final fun <get-LC_FILESET_ENTRY>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_FILESET_ENTRY.<get-LC_FILESET_ENTRY>|<get-LC_FILESET_ENTRY>(){}[0]
        final const val LC_FUNCTION_STARTS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_FUNCTION_STARTS|{}LC_FUNCTION_STARTS[0]
            final fun <get-LC_FUNCTION_STARTS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_FUNCTION_STARTS.<get-LC_FUNCTION_STARTS>|<get-LC_FUNCTION_STARTS>(){}[0]
        final const val LC_FVMFILE // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_FVMFILE|{}LC_FVMFILE[0]
            final fun <get-LC_FVMFILE>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_FVMFILE.<get-LC_FVMFILE>|<get-LC_FVMFILE>(){}[0]
        final const val LC_IDENT // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_IDENT|{}LC_IDENT[0]
            final fun <get-LC_IDENT>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_IDENT.<get-LC_IDENT>|<get-LC_IDENT>(){}[0]
        final const val LC_IDFVMLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_IDFVMLIB|{}LC_IDFVMLIB[0]
            final fun <get-LC_IDFVMLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_IDFVMLIB.<get-LC_IDFVMLIB>|<get-LC_IDFVMLIB>(){}[0]
        final const val LC_ID_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ID_DYLIB|{}LC_ID_DYLIB[0]
            final fun <get-LC_ID_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ID_DYLIB.<get-LC_ID_DYLIB>|<get-LC_ID_DYLIB>(){}[0]
        final const val LC_ID_DYLINKER // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ID_DYLINKER|{}LC_ID_DYLINKER[0]
            final fun <get-LC_ID_DYLINKER>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ID_DYLINKER.<get-LC_ID_DYLINKER>|<get-LC_ID_DYLINKER>(){}[0]
        final const val LC_LAZY_LOAD_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LAZY_LOAD_DYLIB|{}LC_LAZY_LOAD_DYLIB[0]
            final fun <get-LC_LAZY_LOAD_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LAZY_LOAD_DYLIB.<get-LC_LAZY_LOAD_DYLIB>|<get-LC_LAZY_LOAD_DYLIB>(){}[0]
        final const val LC_LINKER_OPTIMIZATION_HINT // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LINKER_OPTIMIZATION_HINT|{}LC_LINKER_OPTIMIZATION_HINT[0]
            final fun <get-LC_LINKER_OPTIMIZATION_HINT>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LINKER_OPTIMIZATION_HINT.<get-LC_LINKER_OPTIMIZATION_HINT>|<get-LC_LINKER_OPTIMIZATION_HINT>(){}[0]
        final const val LC_LINKER_OPTION // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LINKER_OPTION|{}LC_LINKER_OPTION[0]
            final fun <get-LC_LINKER_OPTION>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LINKER_OPTION.<get-LC_LINKER_OPTION>|<get-LC_LINKER_OPTION>(){}[0]
        final const val LC_LOADFVMLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOADFVMLIB|{}LC_LOADFVMLIB[0]
            final fun <get-LC_LOADFVMLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOADFVMLIB.<get-LC_LOADFVMLIB>|<get-LC_LOADFVMLIB>(){}[0]
        final const val LC_LOAD_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_DYLIB|{}LC_LOAD_DYLIB[0]
            final fun <get-LC_LOAD_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_DYLIB.<get-LC_LOAD_DYLIB>|<get-LC_LOAD_DYLIB>(){}[0]
        final const val LC_LOAD_DYLINKER // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_DYLINKER|{}LC_LOAD_DYLINKER[0]
            final fun <get-LC_LOAD_DYLINKER>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_DYLINKER.<get-LC_LOAD_DYLINKER>|<get-LC_LOAD_DYLINKER>(){}[0]
        final const val LC_LOAD_UPWARD_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_UPWARD_DYLIB|{}LC_LOAD_UPWARD_DYLIB[0]
            final fun <get-LC_LOAD_UPWARD_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_UPWARD_DYLIB.<get-LC_LOAD_UPWARD_DYLIB>|<get-LC_LOAD_UPWARD_DYLIB>(){}[0]
        final const val LC_LOAD_WEAK_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_WEAK_DYLIB|{}LC_LOAD_WEAK_DYLIB[0]
            final fun <get-LC_LOAD_WEAK_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_LOAD_WEAK_DYLIB.<get-LC_LOAD_WEAK_DYLIB>|<get-LC_LOAD_WEAK_DYLIB>(){}[0]
        final const val LC_MAIN // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_MAIN|{}LC_MAIN[0]
            final fun <get-LC_MAIN>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_MAIN.<get-LC_MAIN>|<get-LC_MAIN>(){}[0]
        final const val LC_NOTE // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_NOTE|{}LC_NOTE[0]
            final fun <get-LC_NOTE>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_NOTE.<get-LC_NOTE>|<get-LC_NOTE>(){}[0]
        final const val LC_PREBIND_CKSUM // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_PREBIND_CKSUM|{}LC_PREBIND_CKSUM[0]
            final fun <get-LC_PREBIND_CKSUM>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_PREBIND_CKSUM.<get-LC_PREBIND_CKSUM>|<get-LC_PREBIND_CKSUM>(){}[0]
        final const val LC_PREBOUND_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_PREBOUND_DYLIB|{}LC_PREBOUND_DYLIB[0]
            final fun <get-LC_PREBOUND_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_PREBOUND_DYLIB.<get-LC_PREBOUND_DYLIB>|<get-LC_PREBOUND_DYLIB>(){}[0]
        final const val LC_PREPAGE // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_PREPAGE|{}LC_PREPAGE[0]
            final fun <get-LC_PREPAGE>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_PREPAGE.<get-LC_PREPAGE>|<get-LC_PREPAGE>(){}[0]
        final const val LC_REEXPORT_DYLIB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_REEXPORT_DYLIB|{}LC_REEXPORT_DYLIB[0]
            final fun <get-LC_REEXPORT_DYLIB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_REEXPORT_DYLIB.<get-LC_REEXPORT_DYLIB>|<get-LC_REEXPORT_DYLIB>(){}[0]
        final const val LC_ROUTINES // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ROUTINES|{}LC_ROUTINES[0]
            final fun <get-LC_ROUTINES>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ROUTINES.<get-LC_ROUTINES>|<get-LC_ROUTINES>(){}[0]
        final const val LC_ROUTINES_64 // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ROUTINES_64|{}LC_ROUTINES_64[0]
            final fun <get-LC_ROUTINES_64>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_ROUTINES_64.<get-LC_ROUTINES_64>|<get-LC_ROUTINES_64>(){}[0]
        final const val LC_RPATH // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_RPATH|{}LC_RPATH[0]
            final fun <get-LC_RPATH>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_RPATH.<get-LC_RPATH>|<get-LC_RPATH>(){}[0]
        final const val LC_SEGMENT // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SEGMENT|{}LC_SEGMENT[0]
            final fun <get-LC_SEGMENT>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SEGMENT.<get-LC_SEGMENT>|<get-LC_SEGMENT>(){}[0]
        final const val LC_SEGMENT_64 // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SEGMENT_64|{}LC_SEGMENT_64[0]
            final fun <get-LC_SEGMENT_64>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SEGMENT_64.<get-LC_SEGMENT_64>|<get-LC_SEGMENT_64>(){}[0]
        final const val LC_SEGMENT_SPLIT_INFO // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SEGMENT_SPLIT_INFO|{}LC_SEGMENT_SPLIT_INFO[0]
            final fun <get-LC_SEGMENT_SPLIT_INFO>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SEGMENT_SPLIT_INFO.<get-LC_SEGMENT_SPLIT_INFO>|<get-LC_SEGMENT_SPLIT_INFO>(){}[0]
        final const val LC_SOURCE_VERSION // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SOURCE_VERSION|{}LC_SOURCE_VERSION[0]
            final fun <get-LC_SOURCE_VERSION>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SOURCE_VERSION.<get-LC_SOURCE_VERSION>|<get-LC_SOURCE_VERSION>(){}[0]
        final const val LC_SUB_CLIENT // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_CLIENT|{}LC_SUB_CLIENT[0]
            final fun <get-LC_SUB_CLIENT>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_CLIENT.<get-LC_SUB_CLIENT>|<get-LC_SUB_CLIENT>(){}[0]
        final const val LC_SUB_FRAMEWORK // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_FRAMEWORK|{}LC_SUB_FRAMEWORK[0]
            final fun <get-LC_SUB_FRAMEWORK>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_FRAMEWORK.<get-LC_SUB_FRAMEWORK>|<get-LC_SUB_FRAMEWORK>(){}[0]
        final const val LC_SUB_LIBRARY // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_LIBRARY|{}LC_SUB_LIBRARY[0]
            final fun <get-LC_SUB_LIBRARY>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_LIBRARY.<get-LC_SUB_LIBRARY>|<get-LC_SUB_LIBRARY>(){}[0]
        final const val LC_SUB_UMBRELLA // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_UMBRELLA|{}LC_SUB_UMBRELLA[0]
            final fun <get-LC_SUB_UMBRELLA>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SUB_UMBRELLA.<get-LC_SUB_UMBRELLA>|<get-LC_SUB_UMBRELLA>(){}[0]
        final const val LC_SYMSEG // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SYMSEG|{}LC_SYMSEG[0]
            final fun <get-LC_SYMSEG>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SYMSEG.<get-LC_SYMSEG>|<get-LC_SYMSEG>(){}[0]
        final const val LC_SYMTAB // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SYMTAB|{}LC_SYMTAB[0]
            final fun <get-LC_SYMTAB>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_SYMTAB.<get-LC_SYMTAB>|<get-LC_SYMTAB>(){}[0]
        final const val LC_THREAD // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_THREAD|{}LC_THREAD[0]
            final fun <get-LC_THREAD>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_THREAD.<get-LC_THREAD>|<get-LC_THREAD>(){}[0]
        final const val LC_TWOLEVEL_HINTS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_TWOLEVEL_HINTS|{}LC_TWOLEVEL_HINTS[0]
            final fun <get-LC_TWOLEVEL_HINTS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_TWOLEVEL_HINTS.<get-LC_TWOLEVEL_HINTS>|<get-LC_TWOLEVEL_HINTS>(){}[0]
        final const val LC_UNIXTHREAD // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_UNIXTHREAD|{}LC_UNIXTHREAD[0]
            final fun <get-LC_UNIXTHREAD>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_UNIXTHREAD.<get-LC_UNIXTHREAD>|<get-LC_UNIXTHREAD>(){}[0]
        final const val LC_UUID // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_UUID|{}LC_UUID[0]
            final fun <get-LC_UUID>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_UUID.<get-LC_UUID>|<get-LC_UUID>(){}[0]
        final const val LC_VERSION_MIN_IPHONEOS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_IPHONEOS|{}LC_VERSION_MIN_IPHONEOS[0]
            final fun <get-LC_VERSION_MIN_IPHONEOS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_IPHONEOS.<get-LC_VERSION_MIN_IPHONEOS>|<get-LC_VERSION_MIN_IPHONEOS>(){}[0]
        final const val LC_VERSION_MIN_MACOSX // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_MACOSX|{}LC_VERSION_MIN_MACOSX[0]
            final fun <get-LC_VERSION_MIN_MACOSX>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_MACOSX.<get-LC_VERSION_MIN_MACOSX>|<get-LC_VERSION_MIN_MACOSX>(){}[0]
        final const val LC_VERSION_MIN_TVOS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_TVOS|{}LC_VERSION_MIN_TVOS[0]
            final fun <get-LC_VERSION_MIN_TVOS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_TVOS.<get-LC_VERSION_MIN_TVOS>|<get-LC_VERSION_MIN_TVOS>(){}[0]
        final const val LC_VERSION_MIN_WATCHOS // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_WATCHOS|{}LC_VERSION_MIN_WATCHOS[0]
            final fun <get-LC_VERSION_MIN_WATCHOS>(): kotlin/Int // space.iseki.executables.macho/MachoLoadCommandType.Constants.LC_VERSION_MIN_WATCHOS.<get-LC_VERSION_MIN_WATCHOS>|<get-LC_VERSION_MIN_WATCHOS>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoMagic : kotlin/Comparable<space.iseki.executables.macho/MachoMagic> { // space.iseki.executables.macho/MachoMagic|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoMagic.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.macho/MachoMagic.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoMagic.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.macho/MachoMagic): kotlin/Int // space.iseki.executables.macho/MachoMagic.compareTo|compareTo(space.iseki.executables.macho.MachoMagic){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoMagic.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoMagic.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoMagic.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoMagic.Companion|null[0]
        final val MH_CIGAM // space.iseki.executables.macho/MachoMagic.Companion.MH_CIGAM|{}MH_CIGAM[0]
            final fun <get-MH_CIGAM>(): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoMagic.Companion.MH_CIGAM.<get-MH_CIGAM>|<get-MH_CIGAM>(){}[0]
        final val MH_CIGAM_64 // space.iseki.executables.macho/MachoMagic.Companion.MH_CIGAM_64|{}MH_CIGAM_64[0]
            final fun <get-MH_CIGAM_64>(): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoMagic.Companion.MH_CIGAM_64.<get-MH_CIGAM_64>|<get-MH_CIGAM_64>(){}[0]
        final val MH_MAGIC // space.iseki.executables.macho/MachoMagic.Companion.MH_MAGIC|{}MH_MAGIC[0]
            final fun <get-MH_MAGIC>(): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoMagic.Companion.MH_MAGIC.<get-MH_MAGIC>|<get-MH_MAGIC>(){}[0]
        final val MH_MAGIC_64 // space.iseki.executables.macho/MachoMagic.Companion.MH_MAGIC_64|{}MH_MAGIC_64[0]
            final fun <get-MH_MAGIC_64>(): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoMagic.Companion.MH_MAGIC_64.<get-MH_MAGIC_64>|<get-MH_MAGIC_64>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoMagic> // space.iseki.executables.macho/MachoMagic.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoMagic.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoMagic? // space.iseki.executables.macho/MachoMagic.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoMagic.Constants|null[0]
        final const val MH_CIGAM // space.iseki.executables.macho/MachoMagic.Constants.MH_CIGAM|{}MH_CIGAM[0]
            final fun <get-MH_CIGAM>(): kotlin/Int // space.iseki.executables.macho/MachoMagic.Constants.MH_CIGAM.<get-MH_CIGAM>|<get-MH_CIGAM>(){}[0]
        final const val MH_CIGAM_64 // space.iseki.executables.macho/MachoMagic.Constants.MH_CIGAM_64|{}MH_CIGAM_64[0]
            final fun <get-MH_CIGAM_64>(): kotlin/Int // space.iseki.executables.macho/MachoMagic.Constants.MH_CIGAM_64.<get-MH_CIGAM_64>|<get-MH_CIGAM_64>(){}[0]
        final const val MH_MAGIC // space.iseki.executables.macho/MachoMagic.Constants.MH_MAGIC|{}MH_MAGIC[0]
            final fun <get-MH_MAGIC>(): kotlin/Int // space.iseki.executables.macho/MachoMagic.Constants.MH_MAGIC.<get-MH_MAGIC>|<get-MH_MAGIC>(){}[0]
        final const val MH_MAGIC_64 // space.iseki.executables.macho/MachoMagic.Constants.MH_MAGIC_64|{}MH_MAGIC_64[0]
            final fun <get-MH_MAGIC_64>(): kotlin/Int // space.iseki.executables.macho/MachoMagic.Constants.MH_MAGIC_64.<get-MH_MAGIC_64>|<get-MH_MAGIC_64>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoSectionAttributes : kotlin.collections/Set<space.iseki.executables.macho/MachoSectionAttributes> { // space.iseki.executables.macho/MachoSectionAttributes|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoSectionAttributes.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.macho/MachoSectionAttributes.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.macho/MachoSectionAttributes.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.macho/MachoSectionAttributes): kotlin/Boolean // space.iseki.executables.macho/MachoSectionAttributes.contains|contains(space.iseki.executables.macho.MachoSectionAttributes){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.macho/MachoSectionAttributes>): kotlin/Boolean // space.iseki.executables.macho/MachoSectionAttributes.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.macho.MachoSectionAttributes>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSectionAttributes.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.macho/MachoSectionAttributes.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.macho/MachoSectionAttributes> // space.iseki.executables.macho/MachoSectionAttributes.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.macho/MachoSectionAttributes): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.or|or(space.iseki.executables.macho.MachoSectionAttributes){}[0]
    final fun plus(space.iseki.executables.macho/MachoSectionAttributes): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.plus|plus(space.iseki.executables.macho.MachoSectionAttributes){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSectionAttributes.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoSectionAttributes.Companion|null[0]
        final val SECTION_ATTRIBUTES_SYS // space.iseki.executables.macho/MachoSectionAttributes.Companion.SECTION_ATTRIBUTES_SYS|{}SECTION_ATTRIBUTES_SYS[0]
            final fun <get-SECTION_ATTRIBUTES_SYS>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.SECTION_ATTRIBUTES_SYS.<get-SECTION_ATTRIBUTES_SYS>|<get-SECTION_ATTRIBUTES_SYS>(){}[0]
        final val S_ATTR_DEBUG // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_DEBUG|{}S_ATTR_DEBUG[0]
            final fun <get-S_ATTR_DEBUG>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_DEBUG.<get-S_ATTR_DEBUG>|<get-S_ATTR_DEBUG>(){}[0]
        final val S_ATTR_EXT_RELOC // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_EXT_RELOC|{}S_ATTR_EXT_RELOC[0]
            final fun <get-S_ATTR_EXT_RELOC>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_EXT_RELOC.<get-S_ATTR_EXT_RELOC>|<get-S_ATTR_EXT_RELOC>(){}[0]
        final val S_ATTR_LIVE_SUPPORT // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_LIVE_SUPPORT|{}S_ATTR_LIVE_SUPPORT[0]
            final fun <get-S_ATTR_LIVE_SUPPORT>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_LIVE_SUPPORT.<get-S_ATTR_LIVE_SUPPORT>|<get-S_ATTR_LIVE_SUPPORT>(){}[0]
        final val S_ATTR_LOC_RELOC // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_LOC_RELOC|{}S_ATTR_LOC_RELOC[0]
            final fun <get-S_ATTR_LOC_RELOC>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_LOC_RELOC.<get-S_ATTR_LOC_RELOC>|<get-S_ATTR_LOC_RELOC>(){}[0]
        final val S_ATTR_NO_DEAD_STRIP // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_NO_DEAD_STRIP|{}S_ATTR_NO_DEAD_STRIP[0]
            final fun <get-S_ATTR_NO_DEAD_STRIP>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_NO_DEAD_STRIP.<get-S_ATTR_NO_DEAD_STRIP>|<get-S_ATTR_NO_DEAD_STRIP>(){}[0]
        final val S_ATTR_NO_TOC // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_NO_TOC|{}S_ATTR_NO_TOC[0]
            final fun <get-S_ATTR_NO_TOC>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_NO_TOC.<get-S_ATTR_NO_TOC>|<get-S_ATTR_NO_TOC>(){}[0]
        final val S_ATTR_PURE_INSTRUCTIONS // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_PURE_INSTRUCTIONS|{}S_ATTR_PURE_INSTRUCTIONS[0]
            final fun <get-S_ATTR_PURE_INSTRUCTIONS>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_PURE_INSTRUCTIONS.<get-S_ATTR_PURE_INSTRUCTIONS>|<get-S_ATTR_PURE_INSTRUCTIONS>(){}[0]
        final val S_ATTR_SELF_MODIFYING_CODE // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_SELF_MODIFYING_CODE|{}S_ATTR_SELF_MODIFYING_CODE[0]
            final fun <get-S_ATTR_SELF_MODIFYING_CODE>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_SELF_MODIFYING_CODE.<get-S_ATTR_SELF_MODIFYING_CODE>|<get-S_ATTR_SELF_MODIFYING_CODE>(){}[0]
        final val S_ATTR_SOME_INSTRUCTIONS // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_SOME_INSTRUCTIONS|{}S_ATTR_SOME_INSTRUCTIONS[0]
            final fun <get-S_ATTR_SOME_INSTRUCTIONS>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_SOME_INSTRUCTIONS.<get-S_ATTR_SOME_INSTRUCTIONS>|<get-S_ATTR_SOME_INSTRUCTIONS>(){}[0]
        final val S_ATTR_STRIP_STATIC_SYMS // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_STRIP_STATIC_SYMS|{}S_ATTR_STRIP_STATIC_SYMS[0]
            final fun <get-S_ATTR_STRIP_STATIC_SYMS>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.S_ATTR_STRIP_STATIC_SYMS.<get-S_ATTR_STRIP_STATIC_SYMS>|<get-S_ATTR_STRIP_STATIC_SYMS>(){}[0]
        final val ZERO // space.iseki.executables.macho/MachoSectionAttributes.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoSectionAttributes> // space.iseki.executables.macho/MachoSectionAttributes.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoSectionAttributes? // space.iseki.executables.macho/MachoSectionAttributes.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoSectionAttributes.Constants|null[0]
        final const val SECTION_ATTRIBUTES_SYS // space.iseki.executables.macho/MachoSectionAttributes.Constants.SECTION_ATTRIBUTES_SYS|{}SECTION_ATTRIBUTES_SYS[0]
            final fun <get-SECTION_ATTRIBUTES_SYS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.SECTION_ATTRIBUTES_SYS.<get-SECTION_ATTRIBUTES_SYS>|<get-SECTION_ATTRIBUTES_SYS>(){}[0]
        final const val S_ATTR_DEBUG // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_DEBUG|{}S_ATTR_DEBUG[0]
            final fun <get-S_ATTR_DEBUG>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_DEBUG.<get-S_ATTR_DEBUG>|<get-S_ATTR_DEBUG>(){}[0]
        final const val S_ATTR_EXT_RELOC // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_EXT_RELOC|{}S_ATTR_EXT_RELOC[0]
            final fun <get-S_ATTR_EXT_RELOC>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_EXT_RELOC.<get-S_ATTR_EXT_RELOC>|<get-S_ATTR_EXT_RELOC>(){}[0]
        final const val S_ATTR_LIVE_SUPPORT // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_LIVE_SUPPORT|{}S_ATTR_LIVE_SUPPORT[0]
            final fun <get-S_ATTR_LIVE_SUPPORT>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_LIVE_SUPPORT.<get-S_ATTR_LIVE_SUPPORT>|<get-S_ATTR_LIVE_SUPPORT>(){}[0]
        final const val S_ATTR_LOC_RELOC // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_LOC_RELOC|{}S_ATTR_LOC_RELOC[0]
            final fun <get-S_ATTR_LOC_RELOC>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_LOC_RELOC.<get-S_ATTR_LOC_RELOC>|<get-S_ATTR_LOC_RELOC>(){}[0]
        final const val S_ATTR_NO_DEAD_STRIP // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_NO_DEAD_STRIP|{}S_ATTR_NO_DEAD_STRIP[0]
            final fun <get-S_ATTR_NO_DEAD_STRIP>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_NO_DEAD_STRIP.<get-S_ATTR_NO_DEAD_STRIP>|<get-S_ATTR_NO_DEAD_STRIP>(){}[0]
        final const val S_ATTR_NO_TOC // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_NO_TOC|{}S_ATTR_NO_TOC[0]
            final fun <get-S_ATTR_NO_TOC>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_NO_TOC.<get-S_ATTR_NO_TOC>|<get-S_ATTR_NO_TOC>(){}[0]
        final const val S_ATTR_PURE_INSTRUCTIONS // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_PURE_INSTRUCTIONS|{}S_ATTR_PURE_INSTRUCTIONS[0]
            final fun <get-S_ATTR_PURE_INSTRUCTIONS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_PURE_INSTRUCTIONS.<get-S_ATTR_PURE_INSTRUCTIONS>|<get-S_ATTR_PURE_INSTRUCTIONS>(){}[0]
        final const val S_ATTR_SELF_MODIFYING_CODE // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_SELF_MODIFYING_CODE|{}S_ATTR_SELF_MODIFYING_CODE[0]
            final fun <get-S_ATTR_SELF_MODIFYING_CODE>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_SELF_MODIFYING_CODE.<get-S_ATTR_SELF_MODIFYING_CODE>|<get-S_ATTR_SELF_MODIFYING_CODE>(){}[0]
        final const val S_ATTR_SOME_INSTRUCTIONS // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_SOME_INSTRUCTIONS|{}S_ATTR_SOME_INSTRUCTIONS[0]
            final fun <get-S_ATTR_SOME_INSTRUCTIONS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_SOME_INSTRUCTIONS.<get-S_ATTR_SOME_INSTRUCTIONS>|<get-S_ATTR_SOME_INSTRUCTIONS>(){}[0]
        final const val S_ATTR_STRIP_STATIC_SYMS // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_STRIP_STATIC_SYMS|{}S_ATTR_STRIP_STATIC_SYMS[0]
            final fun <get-S_ATTR_STRIP_STATIC_SYMS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionAttributes.Constants.S_ATTR_STRIP_STATIC_SYMS.<get-S_ATTR_STRIP_STATIC_SYMS>|<get-S_ATTR_STRIP_STATIC_SYMS>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoSectionType : kotlin/Comparable<space.iseki.executables.macho/MachoSectionType> { // space.iseki.executables.macho/MachoSectionType|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoSectionType.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.macho/MachoSectionType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.macho/MachoSectionType): kotlin/Int // space.iseki.executables.macho/MachoSectionType.compareTo|compareTo(space.iseki.executables.macho.MachoSectionType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSectionType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSectionType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoSectionType.Companion|null[0]
        final val S_16BYTE_LITERALS // space.iseki.executables.macho/MachoSectionType.Companion.S_16BYTE_LITERALS|{}S_16BYTE_LITERALS[0]
            final fun <get-S_16BYTE_LITERALS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_16BYTE_LITERALS.<get-S_16BYTE_LITERALS>|<get-S_16BYTE_LITERALS>(){}[0]
        final val S_4BYTE_LITERALS // space.iseki.executables.macho/MachoSectionType.Companion.S_4BYTE_LITERALS|{}S_4BYTE_LITERALS[0]
            final fun <get-S_4BYTE_LITERALS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_4BYTE_LITERALS.<get-S_4BYTE_LITERALS>|<get-S_4BYTE_LITERALS>(){}[0]
        final val S_8BYTE_LITERALS // space.iseki.executables.macho/MachoSectionType.Companion.S_8BYTE_LITERALS|{}S_8BYTE_LITERALS[0]
            final fun <get-S_8BYTE_LITERALS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_8BYTE_LITERALS.<get-S_8BYTE_LITERALS>|<get-S_8BYTE_LITERALS>(){}[0]
        final val S_COALESCED // space.iseki.executables.macho/MachoSectionType.Companion.S_COALESCED|{}S_COALESCED[0]
            final fun <get-S_COALESCED>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_COALESCED.<get-S_COALESCED>|<get-S_COALESCED>(){}[0]
        final val S_CSTRING_LITERALS // space.iseki.executables.macho/MachoSectionType.Companion.S_CSTRING_LITERALS|{}S_CSTRING_LITERALS[0]
            final fun <get-S_CSTRING_LITERALS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_CSTRING_LITERALS.<get-S_CSTRING_LITERALS>|<get-S_CSTRING_LITERALS>(){}[0]
        final val S_DTRACE_DOF // space.iseki.executables.macho/MachoSectionType.Companion.S_DTRACE_DOF|{}S_DTRACE_DOF[0]
            final fun <get-S_DTRACE_DOF>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_DTRACE_DOF.<get-S_DTRACE_DOF>|<get-S_DTRACE_DOF>(){}[0]
        final val S_GB_ZEROFILL // space.iseki.executables.macho/MachoSectionType.Companion.S_GB_ZEROFILL|{}S_GB_ZEROFILL[0]
            final fun <get-S_GB_ZEROFILL>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_GB_ZEROFILL.<get-S_GB_ZEROFILL>|<get-S_GB_ZEROFILL>(){}[0]
        final val S_INIT_FUNC_OFFSETS // space.iseki.executables.macho/MachoSectionType.Companion.S_INIT_FUNC_OFFSETS|{}S_INIT_FUNC_OFFSETS[0]
            final fun <get-S_INIT_FUNC_OFFSETS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_INIT_FUNC_OFFSETS.<get-S_INIT_FUNC_OFFSETS>|<get-S_INIT_FUNC_OFFSETS>(){}[0]
        final val S_INTERPOSING // space.iseki.executables.macho/MachoSectionType.Companion.S_INTERPOSING|{}S_INTERPOSING[0]
            final fun <get-S_INTERPOSING>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_INTERPOSING.<get-S_INTERPOSING>|<get-S_INTERPOSING>(){}[0]
        final val S_LAZY_DYLIB_SYMBOL_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_LAZY_DYLIB_SYMBOL_POINTERS|{}S_LAZY_DYLIB_SYMBOL_POINTERS[0]
            final fun <get-S_LAZY_DYLIB_SYMBOL_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_LAZY_DYLIB_SYMBOL_POINTERS.<get-S_LAZY_DYLIB_SYMBOL_POINTERS>|<get-S_LAZY_DYLIB_SYMBOL_POINTERS>(){}[0]
        final val S_LAZY_SYMBOL_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_LAZY_SYMBOL_POINTERS|{}S_LAZY_SYMBOL_POINTERS[0]
            final fun <get-S_LAZY_SYMBOL_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_LAZY_SYMBOL_POINTERS.<get-S_LAZY_SYMBOL_POINTERS>|<get-S_LAZY_SYMBOL_POINTERS>(){}[0]
        final val S_LITERAL_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_LITERAL_POINTERS|{}S_LITERAL_POINTERS[0]
            final fun <get-S_LITERAL_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_LITERAL_POINTERS.<get-S_LITERAL_POINTERS>|<get-S_LITERAL_POINTERS>(){}[0]
        final val S_MOD_INIT_FUNC_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_MOD_INIT_FUNC_POINTERS|{}S_MOD_INIT_FUNC_POINTERS[0]
            final fun <get-S_MOD_INIT_FUNC_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_MOD_INIT_FUNC_POINTERS.<get-S_MOD_INIT_FUNC_POINTERS>|<get-S_MOD_INIT_FUNC_POINTERS>(){}[0]
        final val S_MOD_TERM_FUNC_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_MOD_TERM_FUNC_POINTERS|{}S_MOD_TERM_FUNC_POINTERS[0]
            final fun <get-S_MOD_TERM_FUNC_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_MOD_TERM_FUNC_POINTERS.<get-S_MOD_TERM_FUNC_POINTERS>|<get-S_MOD_TERM_FUNC_POINTERS>(){}[0]
        final val S_NON_LAZY_SYMBOL_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_NON_LAZY_SYMBOL_POINTERS|{}S_NON_LAZY_SYMBOL_POINTERS[0]
            final fun <get-S_NON_LAZY_SYMBOL_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_NON_LAZY_SYMBOL_POINTERS.<get-S_NON_LAZY_SYMBOL_POINTERS>|<get-S_NON_LAZY_SYMBOL_POINTERS>(){}[0]
        final val S_REGULAR // space.iseki.executables.macho/MachoSectionType.Companion.S_REGULAR|{}S_REGULAR[0]
            final fun <get-S_REGULAR>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_REGULAR.<get-S_REGULAR>|<get-S_REGULAR>(){}[0]
        final val S_SYMBOL_STUBS // space.iseki.executables.macho/MachoSectionType.Companion.S_SYMBOL_STUBS|{}S_SYMBOL_STUBS[0]
            final fun <get-S_SYMBOL_STUBS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_SYMBOL_STUBS.<get-S_SYMBOL_STUBS>|<get-S_SYMBOL_STUBS>(){}[0]
        final val S_THREAD_LOCAL_INIT_FUNCTION_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_INIT_FUNCTION_POINTERS|{}S_THREAD_LOCAL_INIT_FUNCTION_POINTERS[0]
            final fun <get-S_THREAD_LOCAL_INIT_FUNCTION_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_INIT_FUNCTION_POINTERS.<get-S_THREAD_LOCAL_INIT_FUNCTION_POINTERS>|<get-S_THREAD_LOCAL_INIT_FUNCTION_POINTERS>(){}[0]
        final val S_THREAD_LOCAL_REGULAR // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_REGULAR|{}S_THREAD_LOCAL_REGULAR[0]
            final fun <get-S_THREAD_LOCAL_REGULAR>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_REGULAR.<get-S_THREAD_LOCAL_REGULAR>|<get-S_THREAD_LOCAL_REGULAR>(){}[0]
        final val S_THREAD_LOCAL_VARIABLES // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_VARIABLES|{}S_THREAD_LOCAL_VARIABLES[0]
            final fun <get-S_THREAD_LOCAL_VARIABLES>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_VARIABLES.<get-S_THREAD_LOCAL_VARIABLES>|<get-S_THREAD_LOCAL_VARIABLES>(){}[0]
        final val S_THREAD_LOCAL_VARIABLE_POINTERS // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_VARIABLE_POINTERS|{}S_THREAD_LOCAL_VARIABLE_POINTERS[0]
            final fun <get-S_THREAD_LOCAL_VARIABLE_POINTERS>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_VARIABLE_POINTERS.<get-S_THREAD_LOCAL_VARIABLE_POINTERS>|<get-S_THREAD_LOCAL_VARIABLE_POINTERS>(){}[0]
        final val S_THREAD_LOCAL_ZEROFILL // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_ZEROFILL|{}S_THREAD_LOCAL_ZEROFILL[0]
            final fun <get-S_THREAD_LOCAL_ZEROFILL>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_THREAD_LOCAL_ZEROFILL.<get-S_THREAD_LOCAL_ZEROFILL>|<get-S_THREAD_LOCAL_ZEROFILL>(){}[0]
        final val S_ZEROFILL // space.iseki.executables.macho/MachoSectionType.Companion.S_ZEROFILL|{}S_ZEROFILL[0]
            final fun <get-S_ZEROFILL>(): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.S_ZEROFILL.<get-S_ZEROFILL>|<get-S_ZEROFILL>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoSectionType> // space.iseki.executables.macho/MachoSectionType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoSectionType? // space.iseki.executables.macho/MachoSectionType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoSectionType.Constants|null[0]
        final const val S_16BYTE_LITERALS // space.iseki.executables.macho/MachoSectionType.Constants.S_16BYTE_LITERALS|{}S_16BYTE_LITERALS[0]
            final fun <get-S_16BYTE_LITERALS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_16BYTE_LITERALS.<get-S_16BYTE_LITERALS>|<get-S_16BYTE_LITERALS>(){}[0]
        final const val S_4BYTE_LITERALS // space.iseki.executables.macho/MachoSectionType.Constants.S_4BYTE_LITERALS|{}S_4BYTE_LITERALS[0]
            final fun <get-S_4BYTE_LITERALS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_4BYTE_LITERALS.<get-S_4BYTE_LITERALS>|<get-S_4BYTE_LITERALS>(){}[0]
        final const val S_8BYTE_LITERALS // space.iseki.executables.macho/MachoSectionType.Constants.S_8BYTE_LITERALS|{}S_8BYTE_LITERALS[0]
            final fun <get-S_8BYTE_LITERALS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_8BYTE_LITERALS.<get-S_8BYTE_LITERALS>|<get-S_8BYTE_LITERALS>(){}[0]
        final const val S_COALESCED // space.iseki.executables.macho/MachoSectionType.Constants.S_COALESCED|{}S_COALESCED[0]
            final fun <get-S_COALESCED>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_COALESCED.<get-S_COALESCED>|<get-S_COALESCED>(){}[0]
        final const val S_CSTRING_LITERALS // space.iseki.executables.macho/MachoSectionType.Constants.S_CSTRING_LITERALS|{}S_CSTRING_LITERALS[0]
            final fun <get-S_CSTRING_LITERALS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_CSTRING_LITERALS.<get-S_CSTRING_LITERALS>|<get-S_CSTRING_LITERALS>(){}[0]
        final const val S_DTRACE_DOF // space.iseki.executables.macho/MachoSectionType.Constants.S_DTRACE_DOF|{}S_DTRACE_DOF[0]
            final fun <get-S_DTRACE_DOF>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_DTRACE_DOF.<get-S_DTRACE_DOF>|<get-S_DTRACE_DOF>(){}[0]
        final const val S_GB_ZEROFILL // space.iseki.executables.macho/MachoSectionType.Constants.S_GB_ZEROFILL|{}S_GB_ZEROFILL[0]
            final fun <get-S_GB_ZEROFILL>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_GB_ZEROFILL.<get-S_GB_ZEROFILL>|<get-S_GB_ZEROFILL>(){}[0]
        final const val S_INIT_FUNC_OFFSETS // space.iseki.executables.macho/MachoSectionType.Constants.S_INIT_FUNC_OFFSETS|{}S_INIT_FUNC_OFFSETS[0]
            final fun <get-S_INIT_FUNC_OFFSETS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_INIT_FUNC_OFFSETS.<get-S_INIT_FUNC_OFFSETS>|<get-S_INIT_FUNC_OFFSETS>(){}[0]
        final const val S_INTERPOSING // space.iseki.executables.macho/MachoSectionType.Constants.S_INTERPOSING|{}S_INTERPOSING[0]
            final fun <get-S_INTERPOSING>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_INTERPOSING.<get-S_INTERPOSING>|<get-S_INTERPOSING>(){}[0]
        final const val S_LAZY_DYLIB_SYMBOL_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_LAZY_DYLIB_SYMBOL_POINTERS|{}S_LAZY_DYLIB_SYMBOL_POINTERS[0]
            final fun <get-S_LAZY_DYLIB_SYMBOL_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_LAZY_DYLIB_SYMBOL_POINTERS.<get-S_LAZY_DYLIB_SYMBOL_POINTERS>|<get-S_LAZY_DYLIB_SYMBOL_POINTERS>(){}[0]
        final const val S_LAZY_SYMBOL_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_LAZY_SYMBOL_POINTERS|{}S_LAZY_SYMBOL_POINTERS[0]
            final fun <get-S_LAZY_SYMBOL_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_LAZY_SYMBOL_POINTERS.<get-S_LAZY_SYMBOL_POINTERS>|<get-S_LAZY_SYMBOL_POINTERS>(){}[0]
        final const val S_LITERAL_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_LITERAL_POINTERS|{}S_LITERAL_POINTERS[0]
            final fun <get-S_LITERAL_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_LITERAL_POINTERS.<get-S_LITERAL_POINTERS>|<get-S_LITERAL_POINTERS>(){}[0]
        final const val S_MOD_INIT_FUNC_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_MOD_INIT_FUNC_POINTERS|{}S_MOD_INIT_FUNC_POINTERS[0]
            final fun <get-S_MOD_INIT_FUNC_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_MOD_INIT_FUNC_POINTERS.<get-S_MOD_INIT_FUNC_POINTERS>|<get-S_MOD_INIT_FUNC_POINTERS>(){}[0]
        final const val S_MOD_TERM_FUNC_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_MOD_TERM_FUNC_POINTERS|{}S_MOD_TERM_FUNC_POINTERS[0]
            final fun <get-S_MOD_TERM_FUNC_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_MOD_TERM_FUNC_POINTERS.<get-S_MOD_TERM_FUNC_POINTERS>|<get-S_MOD_TERM_FUNC_POINTERS>(){}[0]
        final const val S_NON_LAZY_SYMBOL_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_NON_LAZY_SYMBOL_POINTERS|{}S_NON_LAZY_SYMBOL_POINTERS[0]
            final fun <get-S_NON_LAZY_SYMBOL_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_NON_LAZY_SYMBOL_POINTERS.<get-S_NON_LAZY_SYMBOL_POINTERS>|<get-S_NON_LAZY_SYMBOL_POINTERS>(){}[0]
        final const val S_REGULAR // space.iseki.executables.macho/MachoSectionType.Constants.S_REGULAR|{}S_REGULAR[0]
            final fun <get-S_REGULAR>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_REGULAR.<get-S_REGULAR>|<get-S_REGULAR>(){}[0]
        final const val S_SYMBOL_STUBS // space.iseki.executables.macho/MachoSectionType.Constants.S_SYMBOL_STUBS|{}S_SYMBOL_STUBS[0]
            final fun <get-S_SYMBOL_STUBS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_SYMBOL_STUBS.<get-S_SYMBOL_STUBS>|<get-S_SYMBOL_STUBS>(){}[0]
        final const val S_THREAD_LOCAL_INIT_FUNCTION_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_INIT_FUNCTION_POINTERS|{}S_THREAD_LOCAL_INIT_FUNCTION_POINTERS[0]
            final fun <get-S_THREAD_LOCAL_INIT_FUNCTION_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_INIT_FUNCTION_POINTERS.<get-S_THREAD_LOCAL_INIT_FUNCTION_POINTERS>|<get-S_THREAD_LOCAL_INIT_FUNCTION_POINTERS>(){}[0]
        final const val S_THREAD_LOCAL_REGULAR // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_REGULAR|{}S_THREAD_LOCAL_REGULAR[0]
            final fun <get-S_THREAD_LOCAL_REGULAR>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_REGULAR.<get-S_THREAD_LOCAL_REGULAR>|<get-S_THREAD_LOCAL_REGULAR>(){}[0]
        final const val S_THREAD_LOCAL_VARIABLES // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_VARIABLES|{}S_THREAD_LOCAL_VARIABLES[0]
            final fun <get-S_THREAD_LOCAL_VARIABLES>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_VARIABLES.<get-S_THREAD_LOCAL_VARIABLES>|<get-S_THREAD_LOCAL_VARIABLES>(){}[0]
        final const val S_THREAD_LOCAL_VARIABLE_POINTERS // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_VARIABLE_POINTERS|{}S_THREAD_LOCAL_VARIABLE_POINTERS[0]
            final fun <get-S_THREAD_LOCAL_VARIABLE_POINTERS>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_VARIABLE_POINTERS.<get-S_THREAD_LOCAL_VARIABLE_POINTERS>|<get-S_THREAD_LOCAL_VARIABLE_POINTERS>(){}[0]
        final const val S_THREAD_LOCAL_ZEROFILL // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_ZEROFILL|{}S_THREAD_LOCAL_ZEROFILL[0]
            final fun <get-S_THREAD_LOCAL_ZEROFILL>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_THREAD_LOCAL_ZEROFILL.<get-S_THREAD_LOCAL_ZEROFILL>|<get-S_THREAD_LOCAL_ZEROFILL>(){}[0]
        final const val S_ZEROFILL // space.iseki.executables.macho/MachoSectionType.Constants.S_ZEROFILL|{}S_ZEROFILL[0]
            final fun <get-S_ZEROFILL>(): kotlin/Int // space.iseki.executables.macho/MachoSectionType.Constants.S_ZEROFILL.<get-S_ZEROFILL>|<get-S_ZEROFILL>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoSegmentFlag : kotlin.collections/Set<space.iseki.executables.macho/MachoSegmentFlag> { // space.iseki.executables.macho/MachoSegmentFlag|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoSegmentFlag.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.macho/MachoSegmentFlag.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.macho/MachoSegmentFlag.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.macho/MachoSegmentFlag): kotlin/Boolean // space.iseki.executables.macho/MachoSegmentFlag.contains|contains(space.iseki.executables.macho.MachoSegmentFlag){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.macho/MachoSegmentFlag>): kotlin/Boolean // space.iseki.executables.macho/MachoSegmentFlag.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.macho.MachoSegmentFlag>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSegmentFlag.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.macho/MachoSegmentFlag.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.macho/MachoSegmentFlag> // space.iseki.executables.macho/MachoSegmentFlag.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.macho/MachoSegmentFlag): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.or|or(space.iseki.executables.macho.MachoSegmentFlag){}[0]
    final fun plus(space.iseki.executables.macho/MachoSegmentFlag): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.plus|plus(space.iseki.executables.macho.MachoSegmentFlag){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSegmentFlag.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoSegmentFlag.Companion|null[0]
        final val SG_FVMLIB // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_FVMLIB|{}SG_FVMLIB[0]
            final fun <get-SG_FVMLIB>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_FVMLIB.<get-SG_FVMLIB>|<get-SG_FVMLIB>(){}[0]
        final val SG_HIGHVM // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_HIGHVM|{}SG_HIGHVM[0]
            final fun <get-SG_HIGHVM>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_HIGHVM.<get-SG_HIGHVM>|<get-SG_HIGHVM>(){}[0]
        final val SG_NORELOC // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_NORELOC|{}SG_NORELOC[0]
            final fun <get-SG_NORELOC>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_NORELOC.<get-SG_NORELOC>|<get-SG_NORELOC>(){}[0]
        final val SG_PROTECTED_VERSION_1 // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_PROTECTED_VERSION_1|{}SG_PROTECTED_VERSION_1[0]
            final fun <get-SG_PROTECTED_VERSION_1>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_PROTECTED_VERSION_1.<get-SG_PROTECTED_VERSION_1>|<get-SG_PROTECTED_VERSION_1>(){}[0]
        final val SG_READ_ONLY // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_READ_ONLY|{}SG_READ_ONLY[0]
            final fun <get-SG_READ_ONLY>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.SG_READ_ONLY.<get-SG_READ_ONLY>|<get-SG_READ_ONLY>(){}[0]
        final val ZERO // space.iseki.executables.macho/MachoSegmentFlag.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoSegmentFlag> // space.iseki.executables.macho/MachoSegmentFlag.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoSegmentFlag? // space.iseki.executables.macho/MachoSegmentFlag.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoSegmentFlag.Constants|null[0]
        final const val SG_FVMLIB // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_FVMLIB|{}SG_FVMLIB[0]
            final fun <get-SG_FVMLIB>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_FVMLIB.<get-SG_FVMLIB>|<get-SG_FVMLIB>(){}[0]
        final const val SG_HIGHVM // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_HIGHVM|{}SG_HIGHVM[0]
            final fun <get-SG_HIGHVM>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_HIGHVM.<get-SG_HIGHVM>|<get-SG_HIGHVM>(){}[0]
        final const val SG_NORELOC // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_NORELOC|{}SG_NORELOC[0]
            final fun <get-SG_NORELOC>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_NORELOC.<get-SG_NORELOC>|<get-SG_NORELOC>(){}[0]
        final const val SG_PROTECTED_VERSION_1 // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_PROTECTED_VERSION_1|{}SG_PROTECTED_VERSION_1[0]
            final fun <get-SG_PROTECTED_VERSION_1>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_PROTECTED_VERSION_1.<get-SG_PROTECTED_VERSION_1>|<get-SG_PROTECTED_VERSION_1>(){}[0]
        final const val SG_READ_ONLY // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_READ_ONLY|{}SG_READ_ONLY[0]
            final fun <get-SG_READ_ONLY>(): kotlin/Int // space.iseki.executables.macho/MachoSegmentFlag.Constants.SG_READ_ONLY.<get-SG_READ_ONLY>|<get-SG_READ_ONLY>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoSymbolDescFlags : kotlin.collections/Set<space.iseki.executables.macho/MachoSymbolDescFlags> { // space.iseki.executables.macho/MachoSymbolDescFlags|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.macho/MachoSymbolDescFlags.<init>|<init>(kotlin.Short){}[0]

    final val size // space.iseki.executables.macho/MachoSymbolDescFlags.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoSymbolDescFlags.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.macho/MachoSymbolDescFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.macho/MachoSymbolDescFlags): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolDescFlags.contains|contains(space.iseki.executables.macho.MachoSymbolDescFlags){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.macho/MachoSymbolDescFlags>): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolDescFlags.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.macho.MachoSymbolDescFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolDescFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSymbolDescFlags.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolDescFlags.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.macho/MachoSymbolDescFlags> // space.iseki.executables.macho/MachoSymbolDescFlags.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.macho/MachoSymbolDescFlags): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.or|or(space.iseki.executables.macho.MachoSymbolDescFlags){}[0]
    final fun plus(space.iseki.executables.macho/MachoSymbolDescFlags): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.plus|plus(space.iseki.executables.macho.MachoSymbolDescFlags){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSymbolDescFlags.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoSymbolDescFlags.Companion|null[0]
        final val N_DESC_DISCARDED // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_DESC_DISCARDED|{}N_DESC_DISCARDED[0]
            final fun <get-N_DESC_DISCARDED>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_DESC_DISCARDED.<get-N_DESC_DISCARDED>|<get-N_DESC_DISCARDED>(){}[0]
        final val N_NO_DEAD_STRIP // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_NO_DEAD_STRIP|{}N_NO_DEAD_STRIP[0]
            final fun <get-N_NO_DEAD_STRIP>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_NO_DEAD_STRIP.<get-N_NO_DEAD_STRIP>|<get-N_NO_DEAD_STRIP>(){}[0]
        final val N_WEAK_DEF // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_WEAK_DEF|{}N_WEAK_DEF[0]
            final fun <get-N_WEAK_DEF>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_WEAK_DEF.<get-N_WEAK_DEF>|<get-N_WEAK_DEF>(){}[0]
        final val N_WEAK_REF // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_WEAK_REF|{}N_WEAK_REF[0]
            final fun <get-N_WEAK_REF>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.N_WEAK_REF.<get-N_WEAK_REF>|<get-N_WEAK_REF>(){}[0]
        final val REFERENCED_DYNAMICALLY // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCED_DYNAMICALLY|{}REFERENCED_DYNAMICALLY[0]
            final fun <get-REFERENCED_DYNAMICALLY>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCED_DYNAMICALLY.<get-REFERENCED_DYNAMICALLY>|<get-REFERENCED_DYNAMICALLY>(){}[0]
        final val REFERENCE_FLAG_DEFINED // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_DEFINED|{}REFERENCE_FLAG_DEFINED[0]
            final fun <get-REFERENCE_FLAG_DEFINED>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_DEFINED.<get-REFERENCE_FLAG_DEFINED>|<get-REFERENCE_FLAG_DEFINED>(){}[0]
        final val REFERENCE_FLAG_PRIVATE_DEFINED // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_PRIVATE_DEFINED|{}REFERENCE_FLAG_PRIVATE_DEFINED[0]
            final fun <get-REFERENCE_FLAG_PRIVATE_DEFINED>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_PRIVATE_DEFINED.<get-REFERENCE_FLAG_PRIVATE_DEFINED>|<get-REFERENCE_FLAG_PRIVATE_DEFINED>(){}[0]
        final val REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY|{}REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY[0]
            final fun <get-REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY.<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY>|<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY>(){}[0]
        final val REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY|{}REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY[0]
            final fun <get-REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY.<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY>|<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY>(){}[0]
        final val REFERENCE_FLAG_UNDEFINED_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_UNDEFINED_LAZY|{}REFERENCE_FLAG_UNDEFINED_LAZY[0]
            final fun <get-REFERENCE_FLAG_UNDEFINED_LAZY>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_UNDEFINED_LAZY.<get-REFERENCE_FLAG_UNDEFINED_LAZY>|<get-REFERENCE_FLAG_UNDEFINED_LAZY>(){}[0]
        final val REFERENCE_FLAG_UNDEFINED_NON_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_UNDEFINED_NON_LAZY|{}REFERENCE_FLAG_UNDEFINED_NON_LAZY[0]
            final fun <get-REFERENCE_FLAG_UNDEFINED_NON_LAZY>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.REFERENCE_FLAG_UNDEFINED_NON_LAZY.<get-REFERENCE_FLAG_UNDEFINED_NON_LAZY>|<get-REFERENCE_FLAG_UNDEFINED_NON_LAZY>(){}[0]
        final val ZERO // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoSymbolDescFlags> // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoSymbolDescFlags? // space.iseki.executables.macho/MachoSymbolDescFlags.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoSymbolDescFlags.Constants|null[0]
        final const val N_DESC_DISCARDED // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_DESC_DISCARDED|{}N_DESC_DISCARDED[0]
            final fun <get-N_DESC_DISCARDED>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_DESC_DISCARDED.<get-N_DESC_DISCARDED>|<get-N_DESC_DISCARDED>(){}[0]
        final const val N_NO_DEAD_STRIP // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_NO_DEAD_STRIP|{}N_NO_DEAD_STRIP[0]
            final fun <get-N_NO_DEAD_STRIP>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_NO_DEAD_STRIP.<get-N_NO_DEAD_STRIP>|<get-N_NO_DEAD_STRIP>(){}[0]
        final const val N_WEAK_DEF // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_WEAK_DEF|{}N_WEAK_DEF[0]
            final fun <get-N_WEAK_DEF>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_WEAK_DEF.<get-N_WEAK_DEF>|<get-N_WEAK_DEF>(){}[0]
        final const val N_WEAK_REF // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_WEAK_REF|{}N_WEAK_REF[0]
            final fun <get-N_WEAK_REF>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.N_WEAK_REF.<get-N_WEAK_REF>|<get-N_WEAK_REF>(){}[0]
        final const val REFERENCED_DYNAMICALLY // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCED_DYNAMICALLY|{}REFERENCED_DYNAMICALLY[0]
            final fun <get-REFERENCED_DYNAMICALLY>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCED_DYNAMICALLY.<get-REFERENCED_DYNAMICALLY>|<get-REFERENCED_DYNAMICALLY>(){}[0]
        final const val REFERENCE_FLAG_DEFINED // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_DEFINED|{}REFERENCE_FLAG_DEFINED[0]
            final fun <get-REFERENCE_FLAG_DEFINED>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_DEFINED.<get-REFERENCE_FLAG_DEFINED>|<get-REFERENCE_FLAG_DEFINED>(){}[0]
        final const val REFERENCE_FLAG_PRIVATE_DEFINED // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_PRIVATE_DEFINED|{}REFERENCE_FLAG_PRIVATE_DEFINED[0]
            final fun <get-REFERENCE_FLAG_PRIVATE_DEFINED>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_PRIVATE_DEFINED.<get-REFERENCE_FLAG_PRIVATE_DEFINED>|<get-REFERENCE_FLAG_PRIVATE_DEFINED>(){}[0]
        final const val REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY|{}REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY[0]
            final fun <get-REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY.<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY>|<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY>(){}[0]
        final const val REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY|{}REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY[0]
            final fun <get-REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY.<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY>|<get-REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY>(){}[0]
        final const val REFERENCE_FLAG_UNDEFINED_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_UNDEFINED_LAZY|{}REFERENCE_FLAG_UNDEFINED_LAZY[0]
            final fun <get-REFERENCE_FLAG_UNDEFINED_LAZY>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_UNDEFINED_LAZY.<get-REFERENCE_FLAG_UNDEFINED_LAZY>|<get-REFERENCE_FLAG_UNDEFINED_LAZY>(){}[0]
        final const val REFERENCE_FLAG_UNDEFINED_NON_LAZY // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_UNDEFINED_NON_LAZY|{}REFERENCE_FLAG_UNDEFINED_NON_LAZY[0]
            final fun <get-REFERENCE_FLAG_UNDEFINED_NON_LAZY>(): kotlin/Short // space.iseki.executables.macho/MachoSymbolDescFlags.Constants.REFERENCE_FLAG_UNDEFINED_NON_LAZY.<get-REFERENCE_FLAG_UNDEFINED_NON_LAZY>|<get-REFERENCE_FLAG_UNDEFINED_NON_LAZY>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoSymbolType : kotlin.collections/Set<space.iseki.executables.macho/MachoSymbolType> { // space.iseki.executables.macho/MachoSymbolType|null[0]
    constructor <init>(kotlin/Byte) // space.iseki.executables.macho/MachoSymbolType.<init>|<init>(kotlin.Byte){}[0]

    final val size // space.iseki.executables.macho/MachoSymbolType.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoSymbolType.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.macho/MachoSymbolType.value|{}value[0]
        final fun <get-value>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.macho/MachoSymbolType): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolType.contains|contains(space.iseki.executables.macho.MachoSymbolType){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.macho/MachoSymbolType>): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolType.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.macho.MachoSymbolType>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoSymbolType.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.macho/MachoSymbolType.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.macho/MachoSymbolType> // space.iseki.executables.macho/MachoSymbolType.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.macho/MachoSymbolType): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.or|or(space.iseki.executables.macho.MachoSymbolType){}[0]
    final fun plus(space.iseki.executables.macho/MachoSymbolType): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.plus|plus(space.iseki.executables.macho.MachoSymbolType){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoSymbolType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoSymbolType.Companion|null[0]
        final val N_ABS // space.iseki.executables.macho/MachoSymbolType.Companion.N_ABS|{}N_ABS[0]
            final fun <get-N_ABS>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_ABS.<get-N_ABS>|<get-N_ABS>(){}[0]
        final val N_EXT // space.iseki.executables.macho/MachoSymbolType.Companion.N_EXT|{}N_EXT[0]
            final fun <get-N_EXT>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_EXT.<get-N_EXT>|<get-N_EXT>(){}[0]
        final val N_INDR // space.iseki.executables.macho/MachoSymbolType.Companion.N_INDR|{}N_INDR[0]
            final fun <get-N_INDR>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_INDR.<get-N_INDR>|<get-N_INDR>(){}[0]
        final val N_PBUD // space.iseki.executables.macho/MachoSymbolType.Companion.N_PBUD|{}N_PBUD[0]
            final fun <get-N_PBUD>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_PBUD.<get-N_PBUD>|<get-N_PBUD>(){}[0]
        final val N_PEXT // space.iseki.executables.macho/MachoSymbolType.Companion.N_PEXT|{}N_PEXT[0]
            final fun <get-N_PEXT>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_PEXT.<get-N_PEXT>|<get-N_PEXT>(){}[0]
        final val N_SECT // space.iseki.executables.macho/MachoSymbolType.Companion.N_SECT|{}N_SECT[0]
            final fun <get-N_SECT>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_SECT.<get-N_SECT>|<get-N_SECT>(){}[0]
        final val N_STAB // space.iseki.executables.macho/MachoSymbolType.Companion.N_STAB|{}N_STAB[0]
            final fun <get-N_STAB>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_STAB.<get-N_STAB>|<get-N_STAB>(){}[0]
        final val N_TYPE // space.iseki.executables.macho/MachoSymbolType.Companion.N_TYPE|{}N_TYPE[0]
            final fun <get-N_TYPE>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_TYPE.<get-N_TYPE>|<get-N_TYPE>(){}[0]
        final val N_UNDF // space.iseki.executables.macho/MachoSymbolType.Companion.N_UNDF|{}N_UNDF[0]
            final fun <get-N_UNDF>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.N_UNDF.<get-N_UNDF>|<get-N_UNDF>(){}[0]
        final val ZERO // space.iseki.executables.macho/MachoSymbolType.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoSymbolType> // space.iseki.executables.macho/MachoSymbolType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoSymbolType? // space.iseki.executables.macho/MachoSymbolType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoSymbolType.Constants|null[0]
        final const val N_ABS // space.iseki.executables.macho/MachoSymbolType.Constants.N_ABS|{}N_ABS[0]
            final fun <get-N_ABS>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_ABS.<get-N_ABS>|<get-N_ABS>(){}[0]
        final const val N_EXT // space.iseki.executables.macho/MachoSymbolType.Constants.N_EXT|{}N_EXT[0]
            final fun <get-N_EXT>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_EXT.<get-N_EXT>|<get-N_EXT>(){}[0]
        final const val N_INDR // space.iseki.executables.macho/MachoSymbolType.Constants.N_INDR|{}N_INDR[0]
            final fun <get-N_INDR>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_INDR.<get-N_INDR>|<get-N_INDR>(){}[0]
        final const val N_PBUD // space.iseki.executables.macho/MachoSymbolType.Constants.N_PBUD|{}N_PBUD[0]
            final fun <get-N_PBUD>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_PBUD.<get-N_PBUD>|<get-N_PBUD>(){}[0]
        final const val N_PEXT // space.iseki.executables.macho/MachoSymbolType.Constants.N_PEXT|{}N_PEXT[0]
            final fun <get-N_PEXT>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_PEXT.<get-N_PEXT>|<get-N_PEXT>(){}[0]
        final const val N_SECT // space.iseki.executables.macho/MachoSymbolType.Constants.N_SECT|{}N_SECT[0]
            final fun <get-N_SECT>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_SECT.<get-N_SECT>|<get-N_SECT>(){}[0]
        final const val N_STAB // space.iseki.executables.macho/MachoSymbolType.Constants.N_STAB|{}N_STAB[0]
            final fun <get-N_STAB>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_STAB.<get-N_STAB>|<get-N_STAB>(){}[0]
        final const val N_TYPE // space.iseki.executables.macho/MachoSymbolType.Constants.N_TYPE|{}N_TYPE[0]
            final fun <get-N_TYPE>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_TYPE.<get-N_TYPE>|<get-N_TYPE>(){}[0]
        final const val N_UNDF // space.iseki.executables.macho/MachoSymbolType.Constants.N_UNDF|{}N_UNDF[0]
            final fun <get-N_UNDF>(): kotlin/Byte // space.iseki.executables.macho/MachoSymbolType.Constants.N_UNDF.<get-N_UNDF>|<get-N_UNDF>(){}[0]
    }
}

final value class space.iseki.executables.macho/MachoVMProt : kotlin.collections/Set<space.iseki.executables.macho/MachoVMProt> { // space.iseki.executables.macho/MachoVMProt|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.macho/MachoVMProt.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.macho/MachoVMProt.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.macho/MachoVMProt.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.macho/MachoVMProt): kotlin/Boolean // space.iseki.executables.macho/MachoVMProt.contains|contains(space.iseki.executables.macho.MachoVMProt){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.macho/MachoVMProt>): kotlin/Boolean // space.iseki.executables.macho/MachoVMProt.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.macho.MachoVMProt>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/MachoVMProt.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.macho/MachoVMProt.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.macho/MachoVMProt> // space.iseki.executables.macho/MachoVMProt.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.macho/MachoVMProt): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.or|or(space.iseki.executables.macho.MachoVMProt){}[0]
    final fun plus(space.iseki.executables.macho/MachoVMProt): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.plus|plus(space.iseki.executables.macho.MachoVMProt){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/MachoVMProt.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/MachoVMProt.Companion|null[0]
        final val VM_PROT_ALL // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_ALL|{}VM_PROT_ALL[0]
            final fun <get-VM_PROT_ALL>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_ALL.<get-VM_PROT_ALL>|<get-VM_PROT_ALL>(){}[0]
        final val VM_PROT_COPY // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_COPY|{}VM_PROT_COPY[0]
            final fun <get-VM_PROT_COPY>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_COPY.<get-VM_PROT_COPY>|<get-VM_PROT_COPY>(){}[0]
        final val VM_PROT_DEFAULT // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_DEFAULT|{}VM_PROT_DEFAULT[0]
            final fun <get-VM_PROT_DEFAULT>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_DEFAULT.<get-VM_PROT_DEFAULT>|<get-VM_PROT_DEFAULT>(){}[0]
        final val VM_PROT_EXECUTE // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_EXECUTE|{}VM_PROT_EXECUTE[0]
            final fun <get-VM_PROT_EXECUTE>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_EXECUTE.<get-VM_PROT_EXECUTE>|<get-VM_PROT_EXECUTE>(){}[0]
        final val VM_PROT_EXECUTE_ONLY // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_EXECUTE_ONLY|{}VM_PROT_EXECUTE_ONLY[0]
            final fun <get-VM_PROT_EXECUTE_ONLY>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_EXECUTE_ONLY.<get-VM_PROT_EXECUTE_ONLY>|<get-VM_PROT_EXECUTE_ONLY>(){}[0]
        final val VM_PROT_IS_MASK // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_IS_MASK|{}VM_PROT_IS_MASK[0]
            final fun <get-VM_PROT_IS_MASK>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_IS_MASK.<get-VM_PROT_IS_MASK>|<get-VM_PROT_IS_MASK>(){}[0]
        final val VM_PROT_NONE // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_NONE|{}VM_PROT_NONE[0]
            final fun <get-VM_PROT_NONE>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_NONE.<get-VM_PROT_NONE>|<get-VM_PROT_NONE>(){}[0]
        final val VM_PROT_NO_CHANGE // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_NO_CHANGE|{}VM_PROT_NO_CHANGE[0]
            final fun <get-VM_PROT_NO_CHANGE>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_NO_CHANGE.<get-VM_PROT_NO_CHANGE>|<get-VM_PROT_NO_CHANGE>(){}[0]
        final val VM_PROT_READ // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_READ|{}VM_PROT_READ[0]
            final fun <get-VM_PROT_READ>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_READ.<get-VM_PROT_READ>|<get-VM_PROT_READ>(){}[0]
        final val VM_PROT_STRIP_READ // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_STRIP_READ|{}VM_PROT_STRIP_READ[0]
            final fun <get-VM_PROT_STRIP_READ>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_STRIP_READ.<get-VM_PROT_STRIP_READ>|<get-VM_PROT_STRIP_READ>(){}[0]
        final val VM_PROT_TRUSTED // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_TRUSTED|{}VM_PROT_TRUSTED[0]
            final fun <get-VM_PROT_TRUSTED>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_TRUSTED.<get-VM_PROT_TRUSTED>|<get-VM_PROT_TRUSTED>(){}[0]
        final val VM_PROT_WANTS_COPY // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_WANTS_COPY|{}VM_PROT_WANTS_COPY[0]
            final fun <get-VM_PROT_WANTS_COPY>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_WANTS_COPY.<get-VM_PROT_WANTS_COPY>|<get-VM_PROT_WANTS_COPY>(){}[0]
        final val VM_PROT_WRITE // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_WRITE|{}VM_PROT_WRITE[0]
            final fun <get-VM_PROT_WRITE>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.VM_PROT_WRITE.<get-VM_PROT_WRITE>|<get-VM_PROT_WRITE>(){}[0]
        final val ZERO // space.iseki.executables.macho/MachoVMProt.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/MachoVMProt> // space.iseki.executables.macho/MachoVMProt.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.macho/MachoVMProt? // space.iseki.executables.macho/MachoVMProt.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.macho/MachoVMProt.Constants|null[0]
        final const val VM_PROT_ALL // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_ALL|{}VM_PROT_ALL[0]
            final fun <get-VM_PROT_ALL>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_ALL.<get-VM_PROT_ALL>|<get-VM_PROT_ALL>(){}[0]
        final const val VM_PROT_COPY // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_COPY|{}VM_PROT_COPY[0]
            final fun <get-VM_PROT_COPY>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_COPY.<get-VM_PROT_COPY>|<get-VM_PROT_COPY>(){}[0]
        final const val VM_PROT_DEFAULT // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_DEFAULT|{}VM_PROT_DEFAULT[0]
            final fun <get-VM_PROT_DEFAULT>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_DEFAULT.<get-VM_PROT_DEFAULT>|<get-VM_PROT_DEFAULT>(){}[0]
        final const val VM_PROT_EXECUTE // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_EXECUTE|{}VM_PROT_EXECUTE[0]
            final fun <get-VM_PROT_EXECUTE>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_EXECUTE.<get-VM_PROT_EXECUTE>|<get-VM_PROT_EXECUTE>(){}[0]
        final const val VM_PROT_EXECUTE_ONLY // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_EXECUTE_ONLY|{}VM_PROT_EXECUTE_ONLY[0]
            final fun <get-VM_PROT_EXECUTE_ONLY>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_EXECUTE_ONLY.<get-VM_PROT_EXECUTE_ONLY>|<get-VM_PROT_EXECUTE_ONLY>(){}[0]
        final const val VM_PROT_IS_MASK // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_IS_MASK|{}VM_PROT_IS_MASK[0]
            final fun <get-VM_PROT_IS_MASK>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_IS_MASK.<get-VM_PROT_IS_MASK>|<get-VM_PROT_IS_MASK>(){}[0]
        final const val VM_PROT_NONE // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_NONE|{}VM_PROT_NONE[0]
            final fun <get-VM_PROT_NONE>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_NONE.<get-VM_PROT_NONE>|<get-VM_PROT_NONE>(){}[0]
        final const val VM_PROT_NO_CHANGE // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_NO_CHANGE|{}VM_PROT_NO_CHANGE[0]
            final fun <get-VM_PROT_NO_CHANGE>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_NO_CHANGE.<get-VM_PROT_NO_CHANGE>|<get-VM_PROT_NO_CHANGE>(){}[0]
        final const val VM_PROT_READ // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_READ|{}VM_PROT_READ[0]
            final fun <get-VM_PROT_READ>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_READ.<get-VM_PROT_READ>|<get-VM_PROT_READ>(){}[0]
        final const val VM_PROT_STRIP_READ // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_STRIP_READ|{}VM_PROT_STRIP_READ[0]
            final fun <get-VM_PROT_STRIP_READ>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_STRIP_READ.<get-VM_PROT_STRIP_READ>|<get-VM_PROT_STRIP_READ>(){}[0]
        final const val VM_PROT_TRUSTED // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_TRUSTED|{}VM_PROT_TRUSTED[0]
            final fun <get-VM_PROT_TRUSTED>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_TRUSTED.<get-VM_PROT_TRUSTED>|<get-VM_PROT_TRUSTED>(){}[0]
        final const val VM_PROT_WANTS_COPY // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_WANTS_COPY|{}VM_PROT_WANTS_COPY[0]
            final fun <get-VM_PROT_WANTS_COPY>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_WANTS_COPY.<get-VM_PROT_WANTS_COPY>|<get-VM_PROT_WANTS_COPY>(){}[0]
        final const val VM_PROT_WRITE // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_WRITE|{}VM_PROT_WRITE[0]
            final fun <get-VM_PROT_WRITE>(): kotlin/Int // space.iseki.executables.macho/MachoVMProt.Constants.VM_PROT_WRITE.<get-VM_PROT_WRITE>|<get-VM_PROT_WRITE>(){}[0]
    }
}

final value class space.iseki.executables.macho/PackedVersion : kotlin/Comparable<space.iseki.executables.macho/PackedVersion> { // space.iseki.executables.macho/PackedVersion|null[0]
    constructor <init>(kotlin/UInt) // space.iseki.executables.macho/PackedVersion.<init>|<init>(kotlin.UInt){}[0]
    constructor <init>(kotlin/UInt, kotlin/UInt, kotlin/UInt) // space.iseki.executables.macho/PackedVersion.<init>|<init>(kotlin.UInt;kotlin.UInt;kotlin.UInt){}[0]

    final val major // space.iseki.executables.macho/PackedVersion.major|{}major[0]
        final fun <get-major>(): kotlin/UInt // space.iseki.executables.macho/PackedVersion.major.<get-major>|<get-major>(){}[0]
    final val minor // space.iseki.executables.macho/PackedVersion.minor|{}minor[0]
        final fun <get-minor>(): kotlin/UInt // space.iseki.executables.macho/PackedVersion.minor.<get-minor>|<get-minor>(){}[0]
    final val subminor // space.iseki.executables.macho/PackedVersion.subminor|{}subminor[0]
        final fun <get-subminor>(): kotlin/UInt // space.iseki.executables.macho/PackedVersion.subminor.<get-subminor>|<get-subminor>(){}[0]
    final val value // space.iseki.executables.macho/PackedVersion.value|{}value[0]
        final fun <get-value>(): kotlin/UInt // space.iseki.executables.macho/PackedVersion.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.macho/PackedVersion): kotlin/Int // space.iseki.executables.macho/PackedVersion.compareTo|compareTo(space.iseki.executables.macho.PackedVersion){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.macho/PackedVersion.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.macho/PackedVersion.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.macho/PackedVersion.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.macho/PackedVersion.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.macho/PackedVersion> // space.iseki.executables.macho/PackedVersion.Companion.serializer|serializer(){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<space.iseki.executables.macho/PackedVersion> { // space.iseki.executables.macho/PackedVersion.Serializer|null[0]
        final val descriptor // space.iseki.executables.macho/PackedVersion.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.macho/PackedVersion.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.macho/PackedVersion // space.iseki.executables.macho/PackedVersion.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.macho/PackedVersion) // space.iseki.executables.macho/PackedVersion.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.macho.PackedVersion){}[0]
    }
}

final value class space.iseki.executables.pe.vi/FileInfoFlags : kotlin.collections/Set<space.iseki.executables.pe.vi/FileInfoFlags> { // space.iseki.executables.pe.vi/FileInfoFlags|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.pe.vi/FileInfoFlags.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.pe.vi/FileInfoFlags.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.pe.vi/FileInfoFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.pe.vi/FileInfoFlags): kotlin/Boolean // space.iseki.executables.pe.vi/FileInfoFlags.contains|contains(space.iseki.executables.pe.vi.FileInfoFlags){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.pe.vi/FileInfoFlags>): kotlin/Boolean // space.iseki.executables.pe.vi/FileInfoFlags.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.pe.vi.FileInfoFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe.vi/FileInfoFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.pe.vi/FileInfoFlags.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.pe.vi/FileInfoFlags> // space.iseki.executables.pe.vi/FileInfoFlags.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.pe.vi/FileInfoFlags): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.or|or(space.iseki.executables.pe.vi.FileInfoFlags){}[0]
    final fun plus(space.iseki.executables.pe.vi/FileInfoFlags): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.plus|plus(space.iseki.executables.pe.vi.FileInfoFlags){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe.vi/FileInfoFlags.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe.vi/FileInfoFlags.Companion|null[0]
        final val DEBUG // space.iseki.executables.pe.vi/FileInfoFlags.Companion.DEBUG|{}DEBUG[0]
            final fun <get-DEBUG>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.DEBUG.<get-DEBUG>|<get-DEBUG>(){}[0]
        final val INFOINFERRED // space.iseki.executables.pe.vi/FileInfoFlags.Companion.INFOINFERRED|{}INFOINFERRED[0]
            final fun <get-INFOINFERRED>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.INFOINFERRED.<get-INFOINFERRED>|<get-INFOINFERRED>(){}[0]
        final val PATCHED // space.iseki.executables.pe.vi/FileInfoFlags.Companion.PATCHED|{}PATCHED[0]
            final fun <get-PATCHED>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.PATCHED.<get-PATCHED>|<get-PATCHED>(){}[0]
        final val PRERELEASE // space.iseki.executables.pe.vi/FileInfoFlags.Companion.PRERELEASE|{}PRERELEASE[0]
            final fun <get-PRERELEASE>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.PRERELEASE.<get-PRERELEASE>|<get-PRERELEASE>(){}[0]
        final val PRIVATEBUILD // space.iseki.executables.pe.vi/FileInfoFlags.Companion.PRIVATEBUILD|{}PRIVATEBUILD[0]
            final fun <get-PRIVATEBUILD>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.PRIVATEBUILD.<get-PRIVATEBUILD>|<get-PRIVATEBUILD>(){}[0]
        final val SPECIALBUILD // space.iseki.executables.pe.vi/FileInfoFlags.Companion.SPECIALBUILD|{}SPECIALBUILD[0]
            final fun <get-SPECIALBUILD>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.SPECIALBUILD.<get-SPECIALBUILD>|<get-SPECIALBUILD>(){}[0]
        final val ZERO // space.iseki.executables.pe.vi/FileInfoFlags.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe.vi/FileInfoFlags> // space.iseki.executables.pe.vi/FileInfoFlags.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe.vi/FileInfoFlags? // space.iseki.executables.pe.vi/FileInfoFlags.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe.vi/FileInfoFlags.Constants|null[0]
        final const val DEBUG // space.iseki.executables.pe.vi/FileInfoFlags.Constants.DEBUG|{}DEBUG[0]
            final fun <get-DEBUG>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.Constants.DEBUG.<get-DEBUG>|<get-DEBUG>(){}[0]
        final const val INFOINFERRED // space.iseki.executables.pe.vi/FileInfoFlags.Constants.INFOINFERRED|{}INFOINFERRED[0]
            final fun <get-INFOINFERRED>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.Constants.INFOINFERRED.<get-INFOINFERRED>|<get-INFOINFERRED>(){}[0]
        final const val PATCHED // space.iseki.executables.pe.vi/FileInfoFlags.Constants.PATCHED|{}PATCHED[0]
            final fun <get-PATCHED>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.Constants.PATCHED.<get-PATCHED>|<get-PATCHED>(){}[0]
        final const val PRERELEASE // space.iseki.executables.pe.vi/FileInfoFlags.Constants.PRERELEASE|{}PRERELEASE[0]
            final fun <get-PRERELEASE>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.Constants.PRERELEASE.<get-PRERELEASE>|<get-PRERELEASE>(){}[0]
        final const val PRIVATEBUILD // space.iseki.executables.pe.vi/FileInfoFlags.Constants.PRIVATEBUILD|{}PRIVATEBUILD[0]
            final fun <get-PRIVATEBUILD>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.Constants.PRIVATEBUILD.<get-PRIVATEBUILD>|<get-PRIVATEBUILD>(){}[0]
        final const val SPECIALBUILD // space.iseki.executables.pe.vi/FileInfoFlags.Constants.SPECIALBUILD|{}SPECIALBUILD[0]
            final fun <get-SPECIALBUILD>(): kotlin/Int // space.iseki.executables.pe.vi/FileInfoFlags.Constants.SPECIALBUILD.<get-SPECIALBUILD>|<get-SPECIALBUILD>(){}[0]
    }
}

final value class space.iseki.executables.pe.vi/FileOs : kotlin/Comparable<space.iseki.executables.pe.vi/FileOs> { // space.iseki.executables.pe.vi/FileOs|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.pe.vi/FileOs.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.pe.vi/FileOs.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.pe.vi/FileOs): kotlin/Int // space.iseki.executables.pe.vi/FileOs.compareTo|compareTo(space.iseki.executables.pe.vi.FileOs){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe.vi/FileOs.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe.vi/FileOs.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe.vi/FileOs.Companion|null[0]
        final val VOS_DOS // space.iseki.executables.pe.vi/FileOs.Companion.VOS_DOS|{}VOS_DOS[0]
            final fun <get-VOS_DOS>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_DOS.<get-VOS_DOS>|<get-VOS_DOS>(){}[0]
        final val VOS_DOS_WINDOWS16 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_DOS_WINDOWS16|{}VOS_DOS_WINDOWS16[0]
            final fun <get-VOS_DOS_WINDOWS16>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_DOS_WINDOWS16.<get-VOS_DOS_WINDOWS16>|<get-VOS_DOS_WINDOWS16>(){}[0]
        final val VOS_DOS_WINDOWS32 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_DOS_WINDOWS32|{}VOS_DOS_WINDOWS32[0]
            final fun <get-VOS_DOS_WINDOWS32>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_DOS_WINDOWS32.<get-VOS_DOS_WINDOWS32>|<get-VOS_DOS_WINDOWS32>(){}[0]
        final val VOS_NT // space.iseki.executables.pe.vi/FileOs.Companion.VOS_NT|{}VOS_NT[0]
            final fun <get-VOS_NT>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_NT.<get-VOS_NT>|<get-VOS_NT>(){}[0]
        final val VOS_NT_WINDOWS32 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_NT_WINDOWS32|{}VOS_NT_WINDOWS32[0]
            final fun <get-VOS_NT_WINDOWS32>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_NT_WINDOWS32.<get-VOS_NT_WINDOWS32>|<get-VOS_NT_WINDOWS32>(){}[0]
        final val VOS_OS216 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS216|{}VOS_OS216[0]
            final fun <get-VOS_OS216>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS216.<get-VOS_OS216>|<get-VOS_OS216>(){}[0]
        final val VOS_OS216_PM16 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS216_PM16|{}VOS_OS216_PM16[0]
            final fun <get-VOS_OS216_PM16>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS216_PM16.<get-VOS_OS216_PM16>|<get-VOS_OS216_PM16>(){}[0]
        final val VOS_OS232 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS232|{}VOS_OS232[0]
            final fun <get-VOS_OS232>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS232.<get-VOS_OS232>|<get-VOS_OS232>(){}[0]
        final val VOS_OS232_PM32 // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS232_PM32|{}VOS_OS232_PM32[0]
            final fun <get-VOS_OS232_PM32>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_OS232_PM32.<get-VOS_OS232_PM32>|<get-VOS_OS232_PM32>(){}[0]
        final val VOS_UNKNOWN // space.iseki.executables.pe.vi/FileOs.Companion.VOS_UNKNOWN|{}VOS_UNKNOWN[0]
            final fun <get-VOS_UNKNOWN>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS_UNKNOWN.<get-VOS_UNKNOWN>|<get-VOS_UNKNOWN>(){}[0]
        final val VOS__PM16 // space.iseki.executables.pe.vi/FileOs.Companion.VOS__PM16|{}VOS__PM16[0]
            final fun <get-VOS__PM16>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS__PM16.<get-VOS__PM16>|<get-VOS__PM16>(){}[0]
        final val VOS__PM32 // space.iseki.executables.pe.vi/FileOs.Companion.VOS__PM32|{}VOS__PM32[0]
            final fun <get-VOS__PM32>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS__PM32.<get-VOS__PM32>|<get-VOS__PM32>(){}[0]
        final val VOS__WINDOWS16 // space.iseki.executables.pe.vi/FileOs.Companion.VOS__WINDOWS16|{}VOS__WINDOWS16[0]
            final fun <get-VOS__WINDOWS16>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS__WINDOWS16.<get-VOS__WINDOWS16>|<get-VOS__WINDOWS16>(){}[0]
        final val VOS__WINDOWS32 // space.iseki.executables.pe.vi/FileOs.Companion.VOS__WINDOWS32|{}VOS__WINDOWS32[0]
            final fun <get-VOS__WINDOWS32>(): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.VOS__WINDOWS32.<get-VOS__WINDOWS32>|<get-VOS__WINDOWS32>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe.vi/FileOs> // space.iseki.executables.pe.vi/FileOs.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe.vi/FileOs? // space.iseki.executables.pe.vi/FileOs.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe.vi/FileOs.Constants|null[0]
        final const val VOS_DOS // space.iseki.executables.pe.vi/FileOs.Constants.VOS_DOS|{}VOS_DOS[0]
            final fun <get-VOS_DOS>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_DOS.<get-VOS_DOS>|<get-VOS_DOS>(){}[0]
        final const val VOS_DOS_WINDOWS16 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_DOS_WINDOWS16|{}VOS_DOS_WINDOWS16[0]
            final fun <get-VOS_DOS_WINDOWS16>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_DOS_WINDOWS16.<get-VOS_DOS_WINDOWS16>|<get-VOS_DOS_WINDOWS16>(){}[0]
        final const val VOS_DOS_WINDOWS32 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_DOS_WINDOWS32|{}VOS_DOS_WINDOWS32[0]
            final fun <get-VOS_DOS_WINDOWS32>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_DOS_WINDOWS32.<get-VOS_DOS_WINDOWS32>|<get-VOS_DOS_WINDOWS32>(){}[0]
        final const val VOS_NT // space.iseki.executables.pe.vi/FileOs.Constants.VOS_NT|{}VOS_NT[0]
            final fun <get-VOS_NT>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_NT.<get-VOS_NT>|<get-VOS_NT>(){}[0]
        final const val VOS_NT_WINDOWS32 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_NT_WINDOWS32|{}VOS_NT_WINDOWS32[0]
            final fun <get-VOS_NT_WINDOWS32>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_NT_WINDOWS32.<get-VOS_NT_WINDOWS32>|<get-VOS_NT_WINDOWS32>(){}[0]
        final const val VOS_OS216 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS216|{}VOS_OS216[0]
            final fun <get-VOS_OS216>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS216.<get-VOS_OS216>|<get-VOS_OS216>(){}[0]
        final const val VOS_OS216_PM16 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS216_PM16|{}VOS_OS216_PM16[0]
            final fun <get-VOS_OS216_PM16>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS216_PM16.<get-VOS_OS216_PM16>|<get-VOS_OS216_PM16>(){}[0]
        final const val VOS_OS232 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS232|{}VOS_OS232[0]
            final fun <get-VOS_OS232>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS232.<get-VOS_OS232>|<get-VOS_OS232>(){}[0]
        final const val VOS_OS232_PM32 // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS232_PM32|{}VOS_OS232_PM32[0]
            final fun <get-VOS_OS232_PM32>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_OS232_PM32.<get-VOS_OS232_PM32>|<get-VOS_OS232_PM32>(){}[0]
        final const val VOS_UNKNOWN // space.iseki.executables.pe.vi/FileOs.Constants.VOS_UNKNOWN|{}VOS_UNKNOWN[0]
            final fun <get-VOS_UNKNOWN>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS_UNKNOWN.<get-VOS_UNKNOWN>|<get-VOS_UNKNOWN>(){}[0]
        final const val VOS__PM16 // space.iseki.executables.pe.vi/FileOs.Constants.VOS__PM16|{}VOS__PM16[0]
            final fun <get-VOS__PM16>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS__PM16.<get-VOS__PM16>|<get-VOS__PM16>(){}[0]
        final const val VOS__PM32 // space.iseki.executables.pe.vi/FileOs.Constants.VOS__PM32|{}VOS__PM32[0]
            final fun <get-VOS__PM32>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS__PM32.<get-VOS__PM32>|<get-VOS__PM32>(){}[0]
        final const val VOS__WINDOWS16 // space.iseki.executables.pe.vi/FileOs.Constants.VOS__WINDOWS16|{}VOS__WINDOWS16[0]
            final fun <get-VOS__WINDOWS16>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS__WINDOWS16.<get-VOS__WINDOWS16>|<get-VOS__WINDOWS16>(){}[0]
        final const val VOS__WINDOWS32 // space.iseki.executables.pe.vi/FileOs.Constants.VOS__WINDOWS32|{}VOS__WINDOWS32[0]
            final fun <get-VOS__WINDOWS32>(): kotlin/Int // space.iseki.executables.pe.vi/FileOs.Constants.VOS__WINDOWS32.<get-VOS__WINDOWS32>|<get-VOS__WINDOWS32>(){}[0]
    }
}

final value class space.iseki.executables.pe.vi/FileType : kotlin/Comparable<space.iseki.executables.pe.vi/FileType> { // space.iseki.executables.pe.vi/FileType|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.pe.vi/FileType.<init>|<init>(kotlin.Int){}[0]

    final val value // space.iseki.executables.pe.vi/FileType.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.pe.vi/FileType): kotlin/Int // space.iseki.executables.pe.vi/FileType.compareTo|compareTo(space.iseki.executables.pe.vi.FileType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe.vi/FileType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe.vi/FileType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe.vi/FileType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe.vi/FileType.Companion|null[0]
        final val APP // space.iseki.executables.pe.vi/FileType.Companion.APP|{}APP[0]
            final fun <get-APP>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.APP.<get-APP>|<get-APP>(){}[0]
        final val DLL // space.iseki.executables.pe.vi/FileType.Companion.DLL|{}DLL[0]
            final fun <get-DLL>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.DLL.<get-DLL>|<get-DLL>(){}[0]
        final val DRV // space.iseki.executables.pe.vi/FileType.Companion.DRV|{}DRV[0]
            final fun <get-DRV>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.DRV.<get-DRV>|<get-DRV>(){}[0]
        final val FONT // space.iseki.executables.pe.vi/FileType.Companion.FONT|{}FONT[0]
            final fun <get-FONT>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.FONT.<get-FONT>|<get-FONT>(){}[0]
        final val STATIC_LIB // space.iseki.executables.pe.vi/FileType.Companion.STATIC_LIB|{}STATIC_LIB[0]
            final fun <get-STATIC_LIB>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.STATIC_LIB.<get-STATIC_LIB>|<get-STATIC_LIB>(){}[0]
        final val UNKNOWN // space.iseki.executables.pe.vi/FileType.Companion.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
        final val VXD // space.iseki.executables.pe.vi/FileType.Companion.VXD|{}VXD[0]
            final fun <get-VXD>(): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.VXD.<get-VXD>|<get-VXD>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe.vi/FileType> // space.iseki.executables.pe.vi/FileType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe.vi/FileType? // space.iseki.executables.pe.vi/FileType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe.vi/FileType.Constants|null[0]
        final const val APP // space.iseki.executables.pe.vi/FileType.Constants.APP|{}APP[0]
            final fun <get-APP>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.APP.<get-APP>|<get-APP>(){}[0]
        final const val DLL // space.iseki.executables.pe.vi/FileType.Constants.DLL|{}DLL[0]
            final fun <get-DLL>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.DLL.<get-DLL>|<get-DLL>(){}[0]
        final const val DRV // space.iseki.executables.pe.vi/FileType.Constants.DRV|{}DRV[0]
            final fun <get-DRV>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.DRV.<get-DRV>|<get-DRV>(){}[0]
        final const val FONT // space.iseki.executables.pe.vi/FileType.Constants.FONT|{}FONT[0]
            final fun <get-FONT>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.FONT.<get-FONT>|<get-FONT>(){}[0]
        final const val STATIC_LIB // space.iseki.executables.pe.vi/FileType.Constants.STATIC_LIB|{}STATIC_LIB[0]
            final fun <get-STATIC_LIB>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.STATIC_LIB.<get-STATIC_LIB>|<get-STATIC_LIB>(){}[0]
        final const val UNKNOWN // space.iseki.executables.pe.vi/FileType.Constants.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
        final const val VXD // space.iseki.executables.pe.vi/FileType.Constants.VXD|{}VXD[0]
            final fun <get-VXD>(): kotlin/Int // space.iseki.executables.pe.vi/FileType.Constants.VXD.<get-VXD>|<get-VXD>(){}[0]
    }
}

final value class space.iseki.executables.pe/Characteristics : kotlin.collections/Set<space.iseki.executables.pe/Characteristics> { // space.iseki.executables.pe/Characteristics|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.pe/Characteristics.<init>|<init>(kotlin.Short){}[0]

    final val size // space.iseki.executables.pe/Characteristics.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.pe/Characteristics.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.pe/Characteristics.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.pe/Characteristics.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.pe/Characteristics): kotlin/Boolean // space.iseki.executables.pe/Characteristics.contains|contains(space.iseki.executables.pe.Characteristics){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.pe/Characteristics>): kotlin/Boolean // space.iseki.executables.pe/Characteristics.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.pe.Characteristics>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/Characteristics.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/Characteristics.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.pe/Characteristics.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.pe/Characteristics> // space.iseki.executables.pe/Characteristics.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.pe/Characteristics): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.or|or(space.iseki.executables.pe.Characteristics){}[0]
    final fun plus(space.iseki.executables.pe/Characteristics): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.plus|plus(space.iseki.executables.pe.Characteristics){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/Characteristics.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/Characteristics.Companion|null[0]
        final val IMAGE_FILE_32BIT_MACHINE // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_32BIT_MACHINE|{}IMAGE_FILE_32BIT_MACHINE[0]
            final fun <get-IMAGE_FILE_32BIT_MACHINE>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_32BIT_MACHINE.<get-IMAGE_FILE_32BIT_MACHINE>|<get-IMAGE_FILE_32BIT_MACHINE>(){}[0]
        final val IMAGE_FILE_AGGRESSIVE_WS_TRIM // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_AGGRESSIVE_WS_TRIM|{}IMAGE_FILE_AGGRESSIVE_WS_TRIM[0]
            final fun <get-IMAGE_FILE_AGGRESSIVE_WS_TRIM>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_AGGRESSIVE_WS_TRIM.<get-IMAGE_FILE_AGGRESSIVE_WS_TRIM>|<get-IMAGE_FILE_AGGRESSIVE_WS_TRIM>(){}[0]
        final val IMAGE_FILE_BYTES_REVERSED_HI // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_BYTES_REVERSED_HI|{}IMAGE_FILE_BYTES_REVERSED_HI[0]
            final fun <get-IMAGE_FILE_BYTES_REVERSED_HI>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_BYTES_REVERSED_HI.<get-IMAGE_FILE_BYTES_REVERSED_HI>|<get-IMAGE_FILE_BYTES_REVERSED_HI>(){}[0]
        final val IMAGE_FILE_BYTES_REVERSED_LO // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_BYTES_REVERSED_LO|{}IMAGE_FILE_BYTES_REVERSED_LO[0]
            final fun <get-IMAGE_FILE_BYTES_REVERSED_LO>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_BYTES_REVERSED_LO.<get-IMAGE_FILE_BYTES_REVERSED_LO>|<get-IMAGE_FILE_BYTES_REVERSED_LO>(){}[0]
        final val IMAGE_FILE_DEBUG_STRIPPED // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_DEBUG_STRIPPED|{}IMAGE_FILE_DEBUG_STRIPPED[0]
            final fun <get-IMAGE_FILE_DEBUG_STRIPPED>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_DEBUG_STRIPPED.<get-IMAGE_FILE_DEBUG_STRIPPED>|<get-IMAGE_FILE_DEBUG_STRIPPED>(){}[0]
        final val IMAGE_FILE_DLL // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_DLL|{}IMAGE_FILE_DLL[0]
            final fun <get-IMAGE_FILE_DLL>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_DLL.<get-IMAGE_FILE_DLL>|<get-IMAGE_FILE_DLL>(){}[0]
        final val IMAGE_FILE_EXECUTABLE_IMAGE // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_EXECUTABLE_IMAGE|{}IMAGE_FILE_EXECUTABLE_IMAGE[0]
            final fun <get-IMAGE_FILE_EXECUTABLE_IMAGE>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_EXECUTABLE_IMAGE.<get-IMAGE_FILE_EXECUTABLE_IMAGE>|<get-IMAGE_FILE_EXECUTABLE_IMAGE>(){}[0]
        final val IMAGE_FILE_LARGE_ADDRESS_AWARE // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_LARGE_ADDRESS_AWARE|{}IMAGE_FILE_LARGE_ADDRESS_AWARE[0]
            final fun <get-IMAGE_FILE_LARGE_ADDRESS_AWARE>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_LARGE_ADDRESS_AWARE.<get-IMAGE_FILE_LARGE_ADDRESS_AWARE>|<get-IMAGE_FILE_LARGE_ADDRESS_AWARE>(){}[0]
        final val IMAGE_FILE_LINE_NUMS_STRIPPED // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_LINE_NUMS_STRIPPED|{}IMAGE_FILE_LINE_NUMS_STRIPPED[0]
            final fun <get-IMAGE_FILE_LINE_NUMS_STRIPPED>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_LINE_NUMS_STRIPPED.<get-IMAGE_FILE_LINE_NUMS_STRIPPED>|<get-IMAGE_FILE_LINE_NUMS_STRIPPED>(){}[0]
        final val IMAGE_FILE_LOCAL_SYMS_STRIPPED // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_LOCAL_SYMS_STRIPPED|{}IMAGE_FILE_LOCAL_SYMS_STRIPPED[0]
            final fun <get-IMAGE_FILE_LOCAL_SYMS_STRIPPED>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_LOCAL_SYMS_STRIPPED.<get-IMAGE_FILE_LOCAL_SYMS_STRIPPED>|<get-IMAGE_FILE_LOCAL_SYMS_STRIPPED>(){}[0]
        final val IMAGE_FILE_NET_RUN_FROM_SWAP // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_NET_RUN_FROM_SWAP|{}IMAGE_FILE_NET_RUN_FROM_SWAP[0]
            final fun <get-IMAGE_FILE_NET_RUN_FROM_SWAP>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_NET_RUN_FROM_SWAP.<get-IMAGE_FILE_NET_RUN_FROM_SWAP>|<get-IMAGE_FILE_NET_RUN_FROM_SWAP>(){}[0]
        final val IMAGE_FILE_RELOCS_STRIPPED // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_RELOCS_STRIPPED|{}IMAGE_FILE_RELOCS_STRIPPED[0]
            final fun <get-IMAGE_FILE_RELOCS_STRIPPED>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_RELOCS_STRIPPED.<get-IMAGE_FILE_RELOCS_STRIPPED>|<get-IMAGE_FILE_RELOCS_STRIPPED>(){}[0]
        final val IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP|{}IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP[0]
            final fun <get-IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP.<get-IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP>|<get-IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP>(){}[0]
        final val IMAGE_FILE_SYSTEM // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_SYSTEM|{}IMAGE_FILE_SYSTEM[0]
            final fun <get-IMAGE_FILE_SYSTEM>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_SYSTEM.<get-IMAGE_FILE_SYSTEM>|<get-IMAGE_FILE_SYSTEM>(){}[0]
        final val IMAGE_FILE_UP_SYSTEM_ONLY // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_UP_SYSTEM_ONLY|{}IMAGE_FILE_UP_SYSTEM_ONLY[0]
            final fun <get-IMAGE_FILE_UP_SYSTEM_ONLY>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.IMAGE_FILE_UP_SYSTEM_ONLY.<get-IMAGE_FILE_UP_SYSTEM_ONLY>|<get-IMAGE_FILE_UP_SYSTEM_ONLY>(){}[0]
        final val ZERO // space.iseki.executables.pe/Characteristics.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/Characteristics> // space.iseki.executables.pe/Characteristics.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe/Characteristics? // space.iseki.executables.pe/Characteristics.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe/Characteristics.Constants|null[0]
        final const val IMAGE_FILE_32BIT_MACHINE // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_32BIT_MACHINE|{}IMAGE_FILE_32BIT_MACHINE[0]
            final fun <get-IMAGE_FILE_32BIT_MACHINE>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_32BIT_MACHINE.<get-IMAGE_FILE_32BIT_MACHINE>|<get-IMAGE_FILE_32BIT_MACHINE>(){}[0]
        final const val IMAGE_FILE_AGGRESSIVE_WS_TRIM // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_AGGRESSIVE_WS_TRIM|{}IMAGE_FILE_AGGRESSIVE_WS_TRIM[0]
            final fun <get-IMAGE_FILE_AGGRESSIVE_WS_TRIM>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_AGGRESSIVE_WS_TRIM.<get-IMAGE_FILE_AGGRESSIVE_WS_TRIM>|<get-IMAGE_FILE_AGGRESSIVE_WS_TRIM>(){}[0]
        final const val IMAGE_FILE_BYTES_REVERSED_HI // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_BYTES_REVERSED_HI|{}IMAGE_FILE_BYTES_REVERSED_HI[0]
            final fun <get-IMAGE_FILE_BYTES_REVERSED_HI>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_BYTES_REVERSED_HI.<get-IMAGE_FILE_BYTES_REVERSED_HI>|<get-IMAGE_FILE_BYTES_REVERSED_HI>(){}[0]
        final const val IMAGE_FILE_BYTES_REVERSED_LO // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_BYTES_REVERSED_LO|{}IMAGE_FILE_BYTES_REVERSED_LO[0]
            final fun <get-IMAGE_FILE_BYTES_REVERSED_LO>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_BYTES_REVERSED_LO.<get-IMAGE_FILE_BYTES_REVERSED_LO>|<get-IMAGE_FILE_BYTES_REVERSED_LO>(){}[0]
        final const val IMAGE_FILE_DEBUG_STRIPPED // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_DEBUG_STRIPPED|{}IMAGE_FILE_DEBUG_STRIPPED[0]
            final fun <get-IMAGE_FILE_DEBUG_STRIPPED>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_DEBUG_STRIPPED.<get-IMAGE_FILE_DEBUG_STRIPPED>|<get-IMAGE_FILE_DEBUG_STRIPPED>(){}[0]
        final const val IMAGE_FILE_DLL // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_DLL|{}IMAGE_FILE_DLL[0]
            final fun <get-IMAGE_FILE_DLL>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_DLL.<get-IMAGE_FILE_DLL>|<get-IMAGE_FILE_DLL>(){}[0]
        final const val IMAGE_FILE_EXECUTABLE_IMAGE // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_EXECUTABLE_IMAGE|{}IMAGE_FILE_EXECUTABLE_IMAGE[0]
            final fun <get-IMAGE_FILE_EXECUTABLE_IMAGE>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_EXECUTABLE_IMAGE.<get-IMAGE_FILE_EXECUTABLE_IMAGE>|<get-IMAGE_FILE_EXECUTABLE_IMAGE>(){}[0]
        final const val IMAGE_FILE_LARGE_ADDRESS_AWARE // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_LARGE_ADDRESS_AWARE|{}IMAGE_FILE_LARGE_ADDRESS_AWARE[0]
            final fun <get-IMAGE_FILE_LARGE_ADDRESS_AWARE>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_LARGE_ADDRESS_AWARE.<get-IMAGE_FILE_LARGE_ADDRESS_AWARE>|<get-IMAGE_FILE_LARGE_ADDRESS_AWARE>(){}[0]
        final const val IMAGE_FILE_LINE_NUMS_STRIPPED // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_LINE_NUMS_STRIPPED|{}IMAGE_FILE_LINE_NUMS_STRIPPED[0]
            final fun <get-IMAGE_FILE_LINE_NUMS_STRIPPED>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_LINE_NUMS_STRIPPED.<get-IMAGE_FILE_LINE_NUMS_STRIPPED>|<get-IMAGE_FILE_LINE_NUMS_STRIPPED>(){}[0]
        final const val IMAGE_FILE_LOCAL_SYMS_STRIPPED // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_LOCAL_SYMS_STRIPPED|{}IMAGE_FILE_LOCAL_SYMS_STRIPPED[0]
            final fun <get-IMAGE_FILE_LOCAL_SYMS_STRIPPED>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_LOCAL_SYMS_STRIPPED.<get-IMAGE_FILE_LOCAL_SYMS_STRIPPED>|<get-IMAGE_FILE_LOCAL_SYMS_STRIPPED>(){}[0]
        final const val IMAGE_FILE_NET_RUN_FROM_SWAP // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_NET_RUN_FROM_SWAP|{}IMAGE_FILE_NET_RUN_FROM_SWAP[0]
            final fun <get-IMAGE_FILE_NET_RUN_FROM_SWAP>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_NET_RUN_FROM_SWAP.<get-IMAGE_FILE_NET_RUN_FROM_SWAP>|<get-IMAGE_FILE_NET_RUN_FROM_SWAP>(){}[0]
        final const val IMAGE_FILE_RELOCS_STRIPPED // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_RELOCS_STRIPPED|{}IMAGE_FILE_RELOCS_STRIPPED[0]
            final fun <get-IMAGE_FILE_RELOCS_STRIPPED>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_RELOCS_STRIPPED.<get-IMAGE_FILE_RELOCS_STRIPPED>|<get-IMAGE_FILE_RELOCS_STRIPPED>(){}[0]
        final const val IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP|{}IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP[0]
            final fun <get-IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP.<get-IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP>|<get-IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP>(){}[0]
        final const val IMAGE_FILE_SYSTEM // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_SYSTEM|{}IMAGE_FILE_SYSTEM[0]
            final fun <get-IMAGE_FILE_SYSTEM>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_SYSTEM.<get-IMAGE_FILE_SYSTEM>|<get-IMAGE_FILE_SYSTEM>(){}[0]
        final const val IMAGE_FILE_UP_SYSTEM_ONLY // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_UP_SYSTEM_ONLY|{}IMAGE_FILE_UP_SYSTEM_ONLY[0]
            final fun <get-IMAGE_FILE_UP_SYSTEM_ONLY>(): kotlin/Short // space.iseki.executables.pe/Characteristics.Constants.IMAGE_FILE_UP_SYSTEM_ONLY.<get-IMAGE_FILE_UP_SYSTEM_ONLY>|<get-IMAGE_FILE_UP_SYSTEM_ONLY>(){}[0]
    }
}

final value class space.iseki.executables.pe/CodePage : kotlin/Comparable<space.iseki.executables.pe/CodePage> { // space.iseki.executables.pe/CodePage|null[0]
    constructor <init>(kotlin/UInt) // space.iseki.executables.pe/CodePage.<init>|<init>(kotlin.UInt){}[0]

    final val dotNetName // space.iseki.executables.pe/CodePage.dotNetName|{}dotNetName[0]
        final fun <get-dotNetName>(): kotlin/String? // space.iseki.executables.pe/CodePage.dotNetName.<get-dotNetName>|<get-dotNetName>(){}[0]
    final val value // space.iseki.executables.pe/CodePage.value|{}value[0]
        final fun <get-value>(): kotlin/UInt // space.iseki.executables.pe/CodePage.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.pe/CodePage): kotlin/Int // space.iseki.executables.pe/CodePage.compareTo|compareTo(space.iseki.executables.pe.CodePage){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/CodePage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/CodePage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/CodePage.toString|toString(){}[0]
}

final value class space.iseki.executables.pe/DataDirectoryItem { // space.iseki.executables.pe/DataDirectoryItem|null[0]
    constructor <init>(kotlin/Int, kotlin/Int) // space.iseki.executables.pe/DataDirectoryItem.<init>|<init>(kotlin.Int;kotlin.Int){}[0]
    constructor <init>(kotlin/Long) // space.iseki.executables.pe/DataDirectoryItem.<init>|<init>(kotlin.Long){}[0]

    final val size // space.iseki.executables.pe/DataDirectoryItem.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.pe/DataDirectoryItem.size.<get-size>|<get-size>(){}[0]
    final val virtualAddress // space.iseki.executables.pe/DataDirectoryItem.virtualAddress|{}virtualAddress[0]
        final fun <get-virtualAddress>(): space.iseki.executables.common/Address32 // space.iseki.executables.pe/DataDirectoryItem.virtualAddress.<get-virtualAddress>|<get-virtualAddress>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/DataDirectoryItem.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/DataDirectoryItem.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/DataDirectoryItem.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/DataDirectoryItem.Companion|null[0]
        final val ZERO // space.iseki.executables.pe/DataDirectoryItem.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/DataDirectoryItem.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun invoke(kotlin/UInt, kotlin/UInt): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/DataDirectoryItem.Companion.invoke|invoke(kotlin.UInt;kotlin.UInt){}[0]
        final fun parse(kotlin/ByteArray, kotlin/Int): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/DataDirectoryItem.Companion.parse|parse(kotlin.ByteArray;kotlin.Int){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/DataDirectoryItem> // space.iseki.executables.pe/DataDirectoryItem.Companion.serializer|serializer(){}[0]
        final fun toString(kotlin/Long): kotlin/String // space.iseki.executables.pe/DataDirectoryItem.Companion.toString|toString(kotlin.Long){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<space.iseki.executables.pe/DataDirectoryItem> { // space.iseki.executables.pe/DataDirectoryItem.Serializer|null[0]
        final val descriptor // space.iseki.executables.pe/DataDirectoryItem.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/DataDirectoryItem.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/DataDirectoryItem // space.iseki.executables.pe/DataDirectoryItem.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/DataDirectoryItem) // space.iseki.executables.pe/DataDirectoryItem.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.DataDirectoryItem){}[0]
    }
}

final value class space.iseki.executables.pe/DllCharacteristics : kotlin.collections/Set<space.iseki.executables.pe/DllCharacteristics> { // space.iseki.executables.pe/DllCharacteristics|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.pe/DllCharacteristics.<init>|<init>(kotlin.Short){}[0]

    final val size // space.iseki.executables.pe/DllCharacteristics.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.pe/DllCharacteristics.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.pe/DllCharacteristics.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.pe/DllCharacteristics): kotlin/Boolean // space.iseki.executables.pe/DllCharacteristics.contains|contains(space.iseki.executables.pe.DllCharacteristics){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.pe/DllCharacteristics>): kotlin/Boolean // space.iseki.executables.pe/DllCharacteristics.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.pe.DllCharacteristics>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/DllCharacteristics.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/DllCharacteristics.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.pe/DllCharacteristics.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.pe/DllCharacteristics> // space.iseki.executables.pe/DllCharacteristics.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.pe/DllCharacteristics): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.or|or(space.iseki.executables.pe.DllCharacteristics){}[0]
    final fun plus(space.iseki.executables.pe/DllCharacteristics): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.plus|plus(space.iseki.executables.pe.DllCharacteristics){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/DllCharacteristics.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/DllCharacteristics.Companion|null[0]
        final val APPCONTAINER // space.iseki.executables.pe/DllCharacteristics.Companion.APPCONTAINER|{}APPCONTAINER[0]
            final fun <get-APPCONTAINER>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.APPCONTAINER.<get-APPCONTAINER>|<get-APPCONTAINER>(){}[0]
        final val DYNAMIC_BASE // space.iseki.executables.pe/DllCharacteristics.Companion.DYNAMIC_BASE|{}DYNAMIC_BASE[0]
            final fun <get-DYNAMIC_BASE>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.DYNAMIC_BASE.<get-DYNAMIC_BASE>|<get-DYNAMIC_BASE>(){}[0]
        final val FORCE_INTEGRITY // space.iseki.executables.pe/DllCharacteristics.Companion.FORCE_INTEGRITY|{}FORCE_INTEGRITY[0]
            final fun <get-FORCE_INTEGRITY>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.FORCE_INTEGRITY.<get-FORCE_INTEGRITY>|<get-FORCE_INTEGRITY>(){}[0]
        final val GUARD_CF // space.iseki.executables.pe/DllCharacteristics.Companion.GUARD_CF|{}GUARD_CF[0]
            final fun <get-GUARD_CF>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.GUARD_CF.<get-GUARD_CF>|<get-GUARD_CF>(){}[0]
        final val HIGH_ENTROPY_VA // space.iseki.executables.pe/DllCharacteristics.Companion.HIGH_ENTROPY_VA|{}HIGH_ENTROPY_VA[0]
            final fun <get-HIGH_ENTROPY_VA>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.HIGH_ENTROPY_VA.<get-HIGH_ENTROPY_VA>|<get-HIGH_ENTROPY_VA>(){}[0]
        final val NO_BIND // space.iseki.executables.pe/DllCharacteristics.Companion.NO_BIND|{}NO_BIND[0]
            final fun <get-NO_BIND>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.NO_BIND.<get-NO_BIND>|<get-NO_BIND>(){}[0]
        final val NO_ISOLATION // space.iseki.executables.pe/DllCharacteristics.Companion.NO_ISOLATION|{}NO_ISOLATION[0]
            final fun <get-NO_ISOLATION>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.NO_ISOLATION.<get-NO_ISOLATION>|<get-NO_ISOLATION>(){}[0]
        final val NO_SEH // space.iseki.executables.pe/DllCharacteristics.Companion.NO_SEH|{}NO_SEH[0]
            final fun <get-NO_SEH>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.NO_SEH.<get-NO_SEH>|<get-NO_SEH>(){}[0]
        final val NX_COMPAT // space.iseki.executables.pe/DllCharacteristics.Companion.NX_COMPAT|{}NX_COMPAT[0]
            final fun <get-NX_COMPAT>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.NX_COMPAT.<get-NX_COMPAT>|<get-NX_COMPAT>(){}[0]
        final val TERMINAL_SERVER_AWARE // space.iseki.executables.pe/DllCharacteristics.Companion.TERMINAL_SERVER_AWARE|{}TERMINAL_SERVER_AWARE[0]
            final fun <get-TERMINAL_SERVER_AWARE>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.TERMINAL_SERVER_AWARE.<get-TERMINAL_SERVER_AWARE>|<get-TERMINAL_SERVER_AWARE>(){}[0]
        final val WDM_DRIVER // space.iseki.executables.pe/DllCharacteristics.Companion.WDM_DRIVER|{}WDM_DRIVER[0]
            final fun <get-WDM_DRIVER>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.WDM_DRIVER.<get-WDM_DRIVER>|<get-WDM_DRIVER>(){}[0]
        final val ZERO // space.iseki.executables.pe/DllCharacteristics.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/DllCharacteristics> // space.iseki.executables.pe/DllCharacteristics.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe/DllCharacteristics? // space.iseki.executables.pe/DllCharacteristics.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe/DllCharacteristics.Constants|null[0]
        final const val APPCONTAINER // space.iseki.executables.pe/DllCharacteristics.Constants.APPCONTAINER|{}APPCONTAINER[0]
            final fun <get-APPCONTAINER>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.APPCONTAINER.<get-APPCONTAINER>|<get-APPCONTAINER>(){}[0]
        final const val DYNAMIC_BASE // space.iseki.executables.pe/DllCharacteristics.Constants.DYNAMIC_BASE|{}DYNAMIC_BASE[0]
            final fun <get-DYNAMIC_BASE>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.DYNAMIC_BASE.<get-DYNAMIC_BASE>|<get-DYNAMIC_BASE>(){}[0]
        final const val FORCE_INTEGRITY // space.iseki.executables.pe/DllCharacteristics.Constants.FORCE_INTEGRITY|{}FORCE_INTEGRITY[0]
            final fun <get-FORCE_INTEGRITY>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.FORCE_INTEGRITY.<get-FORCE_INTEGRITY>|<get-FORCE_INTEGRITY>(){}[0]
        final const val GUARD_CF // space.iseki.executables.pe/DllCharacteristics.Constants.GUARD_CF|{}GUARD_CF[0]
            final fun <get-GUARD_CF>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.GUARD_CF.<get-GUARD_CF>|<get-GUARD_CF>(){}[0]
        final const val HIGH_ENTROPY_VA // space.iseki.executables.pe/DllCharacteristics.Constants.HIGH_ENTROPY_VA|{}HIGH_ENTROPY_VA[0]
            final fun <get-HIGH_ENTROPY_VA>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.HIGH_ENTROPY_VA.<get-HIGH_ENTROPY_VA>|<get-HIGH_ENTROPY_VA>(){}[0]
        final const val NO_BIND // space.iseki.executables.pe/DllCharacteristics.Constants.NO_BIND|{}NO_BIND[0]
            final fun <get-NO_BIND>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.NO_BIND.<get-NO_BIND>|<get-NO_BIND>(){}[0]
        final const val NO_ISOLATION // space.iseki.executables.pe/DllCharacteristics.Constants.NO_ISOLATION|{}NO_ISOLATION[0]
            final fun <get-NO_ISOLATION>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.NO_ISOLATION.<get-NO_ISOLATION>|<get-NO_ISOLATION>(){}[0]
        final const val NO_SEH // space.iseki.executables.pe/DllCharacteristics.Constants.NO_SEH|{}NO_SEH[0]
            final fun <get-NO_SEH>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.NO_SEH.<get-NO_SEH>|<get-NO_SEH>(){}[0]
        final const val NX_COMPAT // space.iseki.executables.pe/DllCharacteristics.Constants.NX_COMPAT|{}NX_COMPAT[0]
            final fun <get-NX_COMPAT>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.NX_COMPAT.<get-NX_COMPAT>|<get-NX_COMPAT>(){}[0]
        final const val TERMINAL_SERVER_AWARE // space.iseki.executables.pe/DllCharacteristics.Constants.TERMINAL_SERVER_AWARE|{}TERMINAL_SERVER_AWARE[0]
            final fun <get-TERMINAL_SERVER_AWARE>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.TERMINAL_SERVER_AWARE.<get-TERMINAL_SERVER_AWARE>|<get-TERMINAL_SERVER_AWARE>(){}[0]
        final const val WDM_DRIVER // space.iseki.executables.pe/DllCharacteristics.Constants.WDM_DRIVER|{}WDM_DRIVER[0]
            final fun <get-WDM_DRIVER>(): kotlin/Short // space.iseki.executables.pe/DllCharacteristics.Constants.WDM_DRIVER.<get-WDM_DRIVER>|<get-WDM_DRIVER>(){}[0]
    }
}

final value class space.iseki.executables.pe/LangID { // space.iseki.executables.pe/LangID|null[0]
    constructor <init>(kotlin/String) // space.iseki.executables.pe/LangID.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/UShort) // space.iseki.executables.pe/LangID.<init>|<init>(kotlin.UShort){}[0]

    final val value // space.iseki.executables.pe/LangID.value|{}value[0]
        final fun <get-value>(): kotlin/UShort // space.iseki.executables.pe/LangID.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/LangID.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/LangID.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/LangID.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/LangID.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/LangID> // space.iseki.executables.pe/LangID.Companion.serializer|serializer(){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<space.iseki.executables.pe/LangID> { // space.iseki.executables.pe/LangID.Serializer|null[0]
        final val descriptor // space.iseki.executables.pe/LangID.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // space.iseki.executables.pe/LangID.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): space.iseki.executables.pe/LangID // space.iseki.executables.pe/LangID.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, space.iseki.executables.pe/LangID) // space.iseki.executables.pe/LangID.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;space.iseki.executables.pe.LangID){}[0]
    }
}

final value class space.iseki.executables.pe/MachineType : kotlin/Comparable<space.iseki.executables.pe/MachineType> { // space.iseki.executables.pe/MachineType|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.pe/MachineType.<init>|<init>(kotlin.Short){}[0]

    final val value // space.iseki.executables.pe/MachineType.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.pe/MachineType.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.pe/MachineType): kotlin/Int // space.iseki.executables.pe/MachineType.compareTo|compareTo(space.iseki.executables.pe.MachineType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/MachineType.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/MachineType.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/MachineType.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/MachineType.Companion|null[0]
        final val ALPHA // space.iseki.executables.pe/MachineType.Companion.ALPHA|{}ALPHA[0]
            final fun <get-ALPHA>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.ALPHA.<get-ALPHA>|<get-ALPHA>(){}[0]
        final val ALPHA64 // space.iseki.executables.pe/MachineType.Companion.ALPHA64|{}ALPHA64[0]
            final fun <get-ALPHA64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.ALPHA64.<get-ALPHA64>|<get-ALPHA64>(){}[0]
        final val AM33 // space.iseki.executables.pe/MachineType.Companion.AM33|{}AM33[0]
            final fun <get-AM33>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.AM33.<get-AM33>|<get-AM33>(){}[0]
        final val AMD64 // space.iseki.executables.pe/MachineType.Companion.AMD64|{}AMD64[0]
            final fun <get-AMD64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.AMD64.<get-AMD64>|<get-AMD64>(){}[0]
        final val ARM // space.iseki.executables.pe/MachineType.Companion.ARM|{}ARM[0]
            final fun <get-ARM>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.ARM.<get-ARM>|<get-ARM>(){}[0]
        final val ARM64 // space.iseki.executables.pe/MachineType.Companion.ARM64|{}ARM64[0]
            final fun <get-ARM64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.ARM64.<get-ARM64>|<get-ARM64>(){}[0]
        final val ARMNT // space.iseki.executables.pe/MachineType.Companion.ARMNT|{}ARMNT[0]
            final fun <get-ARMNT>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.ARMNT.<get-ARMNT>|<get-ARMNT>(){}[0]
        final val AXP64 // space.iseki.executables.pe/MachineType.Companion.AXP64|{}AXP64[0]
            final fun <get-AXP64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.AXP64.<get-AXP64>|<get-AXP64>(){}[0]
        final val EBC // space.iseki.executables.pe/MachineType.Companion.EBC|{}EBC[0]
            final fun <get-EBC>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.EBC.<get-EBC>|<get-EBC>(){}[0]
        final val I386 // space.iseki.executables.pe/MachineType.Companion.I386|{}I386[0]
            final fun <get-I386>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.I386.<get-I386>|<get-I386>(){}[0]
        final val IA64 // space.iseki.executables.pe/MachineType.Companion.IA64|{}IA64[0]
            final fun <get-IA64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.IA64.<get-IA64>|<get-IA64>(){}[0]
        final val LOONGARCH32 // space.iseki.executables.pe/MachineType.Companion.LOONGARCH32|{}LOONGARCH32[0]
            final fun <get-LOONGARCH32>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.LOONGARCH32.<get-LOONGARCH32>|<get-LOONGARCH32>(){}[0]
        final val LOONGARCH64 // space.iseki.executables.pe/MachineType.Companion.LOONGARCH64|{}LOONGARCH64[0]
            final fun <get-LOONGARCH64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.LOONGARCH64.<get-LOONGARCH64>|<get-LOONGARCH64>(){}[0]
        final val M32R // space.iseki.executables.pe/MachineType.Companion.M32R|{}M32R[0]
            final fun <get-M32R>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.M32R.<get-M32R>|<get-M32R>(){}[0]
        final val MIPS16 // space.iseki.executables.pe/MachineType.Companion.MIPS16|{}MIPS16[0]
            final fun <get-MIPS16>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.MIPS16.<get-MIPS16>|<get-MIPS16>(){}[0]
        final val MIPSFPU // space.iseki.executables.pe/MachineType.Companion.MIPSFPU|{}MIPSFPU[0]
            final fun <get-MIPSFPU>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.MIPSFPU.<get-MIPSFPU>|<get-MIPSFPU>(){}[0]
        final val MIPSFPU16 // space.iseki.executables.pe/MachineType.Companion.MIPSFPU16|{}MIPSFPU16[0]
            final fun <get-MIPSFPU16>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.MIPSFPU16.<get-MIPSFPU16>|<get-MIPSFPU16>(){}[0]
        final val POWERPC // space.iseki.executables.pe/MachineType.Companion.POWERPC|{}POWERPC[0]
            final fun <get-POWERPC>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.POWERPC.<get-POWERPC>|<get-POWERPC>(){}[0]
        final val POWERPCFP // space.iseki.executables.pe/MachineType.Companion.POWERPCFP|{}POWERPCFP[0]
            final fun <get-POWERPCFP>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.POWERPCFP.<get-POWERPCFP>|<get-POWERPCFP>(){}[0]
        final val R4000 // space.iseki.executables.pe/MachineType.Companion.R4000|{}R4000[0]
            final fun <get-R4000>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.R4000.<get-R4000>|<get-R4000>(){}[0]
        final val RISCV128 // space.iseki.executables.pe/MachineType.Companion.RISCV128|{}RISCV128[0]
            final fun <get-RISCV128>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.RISCV128.<get-RISCV128>|<get-RISCV128>(){}[0]
        final val RISCV32 // space.iseki.executables.pe/MachineType.Companion.RISCV32|{}RISCV32[0]
            final fun <get-RISCV32>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.RISCV32.<get-RISCV32>|<get-RISCV32>(){}[0]
        final val RISCV64 // space.iseki.executables.pe/MachineType.Companion.RISCV64|{}RISCV64[0]
            final fun <get-RISCV64>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.RISCV64.<get-RISCV64>|<get-RISCV64>(){}[0]
        final val SH3 // space.iseki.executables.pe/MachineType.Companion.SH3|{}SH3[0]
            final fun <get-SH3>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.SH3.<get-SH3>|<get-SH3>(){}[0]
        final val SH3DSP // space.iseki.executables.pe/MachineType.Companion.SH3DSP|{}SH3DSP[0]
            final fun <get-SH3DSP>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.SH3DSP.<get-SH3DSP>|<get-SH3DSP>(){}[0]
        final val SH4 // space.iseki.executables.pe/MachineType.Companion.SH4|{}SH4[0]
            final fun <get-SH4>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.SH4.<get-SH4>|<get-SH4>(){}[0]
        final val SH5 // space.iseki.executables.pe/MachineType.Companion.SH5|{}SH5[0]
            final fun <get-SH5>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.SH5.<get-SH5>|<get-SH5>(){}[0]
        final val THUMB // space.iseki.executables.pe/MachineType.Companion.THUMB|{}THUMB[0]
            final fun <get-THUMB>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.THUMB.<get-THUMB>|<get-THUMB>(){}[0]
        final val UNKNOWN // space.iseki.executables.pe/MachineType.Companion.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
        final val WCEMIPSV2 // space.iseki.executables.pe/MachineType.Companion.WCEMIPSV2|{}WCEMIPSV2[0]
            final fun <get-WCEMIPSV2>(): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.WCEMIPSV2.<get-WCEMIPSV2>|<get-WCEMIPSV2>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/MachineType> // space.iseki.executables.pe/MachineType.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe/MachineType? // space.iseki.executables.pe/MachineType.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe/MachineType.Constants|null[0]
        final const val ALPHA // space.iseki.executables.pe/MachineType.Constants.ALPHA|{}ALPHA[0]
            final fun <get-ALPHA>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.ALPHA.<get-ALPHA>|<get-ALPHA>(){}[0]
        final const val ALPHA64 // space.iseki.executables.pe/MachineType.Constants.ALPHA64|{}ALPHA64[0]
            final fun <get-ALPHA64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.ALPHA64.<get-ALPHA64>|<get-ALPHA64>(){}[0]
        final const val AM33 // space.iseki.executables.pe/MachineType.Constants.AM33|{}AM33[0]
            final fun <get-AM33>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.AM33.<get-AM33>|<get-AM33>(){}[0]
        final const val AMD64 // space.iseki.executables.pe/MachineType.Constants.AMD64|{}AMD64[0]
            final fun <get-AMD64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.AMD64.<get-AMD64>|<get-AMD64>(){}[0]
        final const val ARM // space.iseki.executables.pe/MachineType.Constants.ARM|{}ARM[0]
            final fun <get-ARM>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.ARM.<get-ARM>|<get-ARM>(){}[0]
        final const val ARM64 // space.iseki.executables.pe/MachineType.Constants.ARM64|{}ARM64[0]
            final fun <get-ARM64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.ARM64.<get-ARM64>|<get-ARM64>(){}[0]
        final const val ARMNT // space.iseki.executables.pe/MachineType.Constants.ARMNT|{}ARMNT[0]
            final fun <get-ARMNT>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.ARMNT.<get-ARMNT>|<get-ARMNT>(){}[0]
        final const val AXP64 // space.iseki.executables.pe/MachineType.Constants.AXP64|{}AXP64[0]
            final fun <get-AXP64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.AXP64.<get-AXP64>|<get-AXP64>(){}[0]
        final const val EBC // space.iseki.executables.pe/MachineType.Constants.EBC|{}EBC[0]
            final fun <get-EBC>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.EBC.<get-EBC>|<get-EBC>(){}[0]
        final const val I386 // space.iseki.executables.pe/MachineType.Constants.I386|{}I386[0]
            final fun <get-I386>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.I386.<get-I386>|<get-I386>(){}[0]
        final const val IA64 // space.iseki.executables.pe/MachineType.Constants.IA64|{}IA64[0]
            final fun <get-IA64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.IA64.<get-IA64>|<get-IA64>(){}[0]
        final const val LOONGARCH32 // space.iseki.executables.pe/MachineType.Constants.LOONGARCH32|{}LOONGARCH32[0]
            final fun <get-LOONGARCH32>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.LOONGARCH32.<get-LOONGARCH32>|<get-LOONGARCH32>(){}[0]
        final const val LOONGARCH64 // space.iseki.executables.pe/MachineType.Constants.LOONGARCH64|{}LOONGARCH64[0]
            final fun <get-LOONGARCH64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.LOONGARCH64.<get-LOONGARCH64>|<get-LOONGARCH64>(){}[0]
        final const val M32R // space.iseki.executables.pe/MachineType.Constants.M32R|{}M32R[0]
            final fun <get-M32R>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.M32R.<get-M32R>|<get-M32R>(){}[0]
        final const val MIPS16 // space.iseki.executables.pe/MachineType.Constants.MIPS16|{}MIPS16[0]
            final fun <get-MIPS16>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.MIPS16.<get-MIPS16>|<get-MIPS16>(){}[0]
        final const val MIPSFPU // space.iseki.executables.pe/MachineType.Constants.MIPSFPU|{}MIPSFPU[0]
            final fun <get-MIPSFPU>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.MIPSFPU.<get-MIPSFPU>|<get-MIPSFPU>(){}[0]
        final const val MIPSFPU16 // space.iseki.executables.pe/MachineType.Constants.MIPSFPU16|{}MIPSFPU16[0]
            final fun <get-MIPSFPU16>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.MIPSFPU16.<get-MIPSFPU16>|<get-MIPSFPU16>(){}[0]
        final const val POWERPC // space.iseki.executables.pe/MachineType.Constants.POWERPC|{}POWERPC[0]
            final fun <get-POWERPC>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.POWERPC.<get-POWERPC>|<get-POWERPC>(){}[0]
        final const val POWERPCFP // space.iseki.executables.pe/MachineType.Constants.POWERPCFP|{}POWERPCFP[0]
            final fun <get-POWERPCFP>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.POWERPCFP.<get-POWERPCFP>|<get-POWERPCFP>(){}[0]
        final const val R4000 // space.iseki.executables.pe/MachineType.Constants.R4000|{}R4000[0]
            final fun <get-R4000>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.R4000.<get-R4000>|<get-R4000>(){}[0]
        final const val RISCV128 // space.iseki.executables.pe/MachineType.Constants.RISCV128|{}RISCV128[0]
            final fun <get-RISCV128>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.RISCV128.<get-RISCV128>|<get-RISCV128>(){}[0]
        final const val RISCV32 // space.iseki.executables.pe/MachineType.Constants.RISCV32|{}RISCV32[0]
            final fun <get-RISCV32>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.RISCV32.<get-RISCV32>|<get-RISCV32>(){}[0]
        final const val RISCV64 // space.iseki.executables.pe/MachineType.Constants.RISCV64|{}RISCV64[0]
            final fun <get-RISCV64>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.RISCV64.<get-RISCV64>|<get-RISCV64>(){}[0]
        final const val SH3 // space.iseki.executables.pe/MachineType.Constants.SH3|{}SH3[0]
            final fun <get-SH3>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.SH3.<get-SH3>|<get-SH3>(){}[0]
        final const val SH3DSP // space.iseki.executables.pe/MachineType.Constants.SH3DSP|{}SH3DSP[0]
            final fun <get-SH3DSP>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.SH3DSP.<get-SH3DSP>|<get-SH3DSP>(){}[0]
        final const val SH4 // space.iseki.executables.pe/MachineType.Constants.SH4|{}SH4[0]
            final fun <get-SH4>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.SH4.<get-SH4>|<get-SH4>(){}[0]
        final const val SH5 // space.iseki.executables.pe/MachineType.Constants.SH5|{}SH5[0]
            final fun <get-SH5>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.SH5.<get-SH5>|<get-SH5>(){}[0]
        final const val THUMB // space.iseki.executables.pe/MachineType.Constants.THUMB|{}THUMB[0]
            final fun <get-THUMB>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.THUMB.<get-THUMB>|<get-THUMB>(){}[0]
        final const val UNKNOWN // space.iseki.executables.pe/MachineType.Constants.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
        final const val WCEMIPSV2 // space.iseki.executables.pe/MachineType.Constants.WCEMIPSV2|{}WCEMIPSV2[0]
            final fun <get-WCEMIPSV2>(): kotlin/Short // space.iseki.executables.pe/MachineType.Constants.WCEMIPSV2.<get-WCEMIPSV2>|<get-WCEMIPSV2>(){}[0]
    }
}

final value class space.iseki.executables.pe/PE32Magic : kotlin/Comparable<space.iseki.executables.pe/PE32Magic> { // space.iseki.executables.pe/PE32Magic|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.pe/PE32Magic.<init>|<init>(kotlin.Short){}[0]

    final val value // space.iseki.executables.pe/PE32Magic.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.pe/PE32Magic.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.pe/PE32Magic): kotlin/Int // space.iseki.executables.pe/PE32Magic.compareTo|compareTo(space.iseki.executables.pe.PE32Magic){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/PE32Magic.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/PE32Magic.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/PE32Magic.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/PE32Magic.Companion|null[0]
        final val PE32 // space.iseki.executables.pe/PE32Magic.Companion.PE32|{}PE32[0]
            final fun <get-PE32>(): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/PE32Magic.Companion.PE32.<get-PE32>|<get-PE32>(){}[0]
        final val PE32Plus // space.iseki.executables.pe/PE32Magic.Companion.PE32Plus|{}PE32Plus[0]
            final fun <get-PE32Plus>(): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/PE32Magic.Companion.PE32Plus.<get-PE32Plus>|<get-PE32Plus>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/PE32Magic> // space.iseki.executables.pe/PE32Magic.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe/PE32Magic // space.iseki.executables.pe/PE32Magic.Companion.valueOf|valueOf(kotlin.String){}[0]
    }
}

final value class space.iseki.executables.pe/SectionFlags : kotlin.collections/Set<space.iseki.executables.pe/SectionFlags> { // space.iseki.executables.pe/SectionFlags|null[0]
    constructor <init>(kotlin/Int) // space.iseki.executables.pe/SectionFlags.<init>|<init>(kotlin.Int){}[0]

    final val size // space.iseki.executables.pe/SectionFlags.size|{}size[0]
        final fun <get-size>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.size.<get-size>|<get-size>(){}[0]
    final val value // space.iseki.executables.pe/SectionFlags.value|{}value[0]
        final fun <get-value>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.value.<get-value>|<get-value>(){}[0]

    final fun contains(space.iseki.executables.pe/SectionFlags): kotlin/Boolean // space.iseki.executables.pe/SectionFlags.contains|contains(space.iseki.executables.pe.SectionFlags){}[0]
    final fun containsAll(kotlin.collections/Collection<space.iseki.executables.pe/SectionFlags>): kotlin/Boolean // space.iseki.executables.pe/SectionFlags.containsAll|containsAll(kotlin.collections.Collection<space.iseki.executables.pe.SectionFlags>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/SectionFlags.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/SectionFlags.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // space.iseki.executables.pe/SectionFlags.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<space.iseki.executables.pe/SectionFlags> // space.iseki.executables.pe/SectionFlags.iterator|iterator(){}[0]
    final fun or(space.iseki.executables.pe/SectionFlags): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.or|or(space.iseki.executables.pe.SectionFlags){}[0]
    final fun plus(space.iseki.executables.pe/SectionFlags): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.plus|plus(space.iseki.executables.pe.SectionFlags){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/SectionFlags.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/SectionFlags.Companion|null[0]
        final val IMAGE_SCN_ALIGN_1024BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_1024BYTES|{}IMAGE_SCN_ALIGN_1024BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_1024BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_1024BYTES.<get-IMAGE_SCN_ALIGN_1024BYTES>|<get-IMAGE_SCN_ALIGN_1024BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_128BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_128BYTES|{}IMAGE_SCN_ALIGN_128BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_128BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_128BYTES.<get-IMAGE_SCN_ALIGN_128BYTES>|<get-IMAGE_SCN_ALIGN_128BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_16BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_16BYTES|{}IMAGE_SCN_ALIGN_16BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_16BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_16BYTES.<get-IMAGE_SCN_ALIGN_16BYTES>|<get-IMAGE_SCN_ALIGN_16BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_1BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_1BYTES|{}IMAGE_SCN_ALIGN_1BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_1BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_1BYTES.<get-IMAGE_SCN_ALIGN_1BYTES>|<get-IMAGE_SCN_ALIGN_1BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_2048BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_2048BYTES|{}IMAGE_SCN_ALIGN_2048BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_2048BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_2048BYTES.<get-IMAGE_SCN_ALIGN_2048BYTES>|<get-IMAGE_SCN_ALIGN_2048BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_256BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_256BYTES|{}IMAGE_SCN_ALIGN_256BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_256BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_256BYTES.<get-IMAGE_SCN_ALIGN_256BYTES>|<get-IMAGE_SCN_ALIGN_256BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_2BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_2BYTES|{}IMAGE_SCN_ALIGN_2BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_2BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_2BYTES.<get-IMAGE_SCN_ALIGN_2BYTES>|<get-IMAGE_SCN_ALIGN_2BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_32BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_32BYTES|{}IMAGE_SCN_ALIGN_32BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_32BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_32BYTES.<get-IMAGE_SCN_ALIGN_32BYTES>|<get-IMAGE_SCN_ALIGN_32BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_4096BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_4096BYTES|{}IMAGE_SCN_ALIGN_4096BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_4096BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_4096BYTES.<get-IMAGE_SCN_ALIGN_4096BYTES>|<get-IMAGE_SCN_ALIGN_4096BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_4BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_4BYTES|{}IMAGE_SCN_ALIGN_4BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_4BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_4BYTES.<get-IMAGE_SCN_ALIGN_4BYTES>|<get-IMAGE_SCN_ALIGN_4BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_512BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_512BYTES|{}IMAGE_SCN_ALIGN_512BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_512BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_512BYTES.<get-IMAGE_SCN_ALIGN_512BYTES>|<get-IMAGE_SCN_ALIGN_512BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_64BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_64BYTES|{}IMAGE_SCN_ALIGN_64BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_64BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_64BYTES.<get-IMAGE_SCN_ALIGN_64BYTES>|<get-IMAGE_SCN_ALIGN_64BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_8192BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_8192BYTES|{}IMAGE_SCN_ALIGN_8192BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_8192BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_8192BYTES.<get-IMAGE_SCN_ALIGN_8192BYTES>|<get-IMAGE_SCN_ALIGN_8192BYTES>(){}[0]
        final val IMAGE_SCN_ALIGN_8BYTES // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_8BYTES|{}IMAGE_SCN_ALIGN_8BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_8BYTES>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_ALIGN_8BYTES.<get-IMAGE_SCN_ALIGN_8BYTES>|<get-IMAGE_SCN_ALIGN_8BYTES>(){}[0]
        final val IMAGE_SCN_CNT_CODE // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_CNT_CODE|{}IMAGE_SCN_CNT_CODE[0]
            final fun <get-IMAGE_SCN_CNT_CODE>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_CNT_CODE.<get-IMAGE_SCN_CNT_CODE>|<get-IMAGE_SCN_CNT_CODE>(){}[0]
        final val IMAGE_SCN_CNT_INITIALIZED_DATA // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_CNT_INITIALIZED_DATA|{}IMAGE_SCN_CNT_INITIALIZED_DATA[0]
            final fun <get-IMAGE_SCN_CNT_INITIALIZED_DATA>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_CNT_INITIALIZED_DATA.<get-IMAGE_SCN_CNT_INITIALIZED_DATA>|<get-IMAGE_SCN_CNT_INITIALIZED_DATA>(){}[0]
        final val IMAGE_SCN_CNT_UNINITIALIZED_DATA // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_CNT_UNINITIALIZED_DATA|{}IMAGE_SCN_CNT_UNINITIALIZED_DATA[0]
            final fun <get-IMAGE_SCN_CNT_UNINITIALIZED_DATA>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_CNT_UNINITIALIZED_DATA.<get-IMAGE_SCN_CNT_UNINITIALIZED_DATA>|<get-IMAGE_SCN_CNT_UNINITIALIZED_DATA>(){}[0]
        final val IMAGE_SCN_GPREL // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_GPREL|{}IMAGE_SCN_GPREL[0]
            final fun <get-IMAGE_SCN_GPREL>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_GPREL.<get-IMAGE_SCN_GPREL>|<get-IMAGE_SCN_GPREL>(){}[0]
        final val IMAGE_SCN_LNK_COMDAT // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_COMDAT|{}IMAGE_SCN_LNK_COMDAT[0]
            final fun <get-IMAGE_SCN_LNK_COMDAT>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_COMDAT.<get-IMAGE_SCN_LNK_COMDAT>|<get-IMAGE_SCN_LNK_COMDAT>(){}[0]
        final val IMAGE_SCN_LNK_INFO // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_INFO|{}IMAGE_SCN_LNK_INFO[0]
            final fun <get-IMAGE_SCN_LNK_INFO>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_INFO.<get-IMAGE_SCN_LNK_INFO>|<get-IMAGE_SCN_LNK_INFO>(){}[0]
        final val IMAGE_SCN_LNK_NRELOC_OVFL // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_NRELOC_OVFL|{}IMAGE_SCN_LNK_NRELOC_OVFL[0]
            final fun <get-IMAGE_SCN_LNK_NRELOC_OVFL>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_NRELOC_OVFL.<get-IMAGE_SCN_LNK_NRELOC_OVFL>|<get-IMAGE_SCN_LNK_NRELOC_OVFL>(){}[0]
        final val IMAGE_SCN_LNK_OTHER // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_OTHER|{}IMAGE_SCN_LNK_OTHER[0]
            final fun <get-IMAGE_SCN_LNK_OTHER>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_OTHER.<get-IMAGE_SCN_LNK_OTHER>|<get-IMAGE_SCN_LNK_OTHER>(){}[0]
        final val IMAGE_SCN_LNK_REMOVE // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_REMOVE|{}IMAGE_SCN_LNK_REMOVE[0]
            final fun <get-IMAGE_SCN_LNK_REMOVE>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_LNK_REMOVE.<get-IMAGE_SCN_LNK_REMOVE>|<get-IMAGE_SCN_LNK_REMOVE>(){}[0]
        final val IMAGE_SCN_MEM_16BIT // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_16BIT|{}IMAGE_SCN_MEM_16BIT[0]
            final fun <get-IMAGE_SCN_MEM_16BIT>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_16BIT.<get-IMAGE_SCN_MEM_16BIT>|<get-IMAGE_SCN_MEM_16BIT>(){}[0]
        final val IMAGE_SCN_MEM_DISCARDABLE // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_DISCARDABLE|{}IMAGE_SCN_MEM_DISCARDABLE[0]
            final fun <get-IMAGE_SCN_MEM_DISCARDABLE>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_DISCARDABLE.<get-IMAGE_SCN_MEM_DISCARDABLE>|<get-IMAGE_SCN_MEM_DISCARDABLE>(){}[0]
        final val IMAGE_SCN_MEM_EXECUTE // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_EXECUTE|{}IMAGE_SCN_MEM_EXECUTE[0]
            final fun <get-IMAGE_SCN_MEM_EXECUTE>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_EXECUTE.<get-IMAGE_SCN_MEM_EXECUTE>|<get-IMAGE_SCN_MEM_EXECUTE>(){}[0]
        final val IMAGE_SCN_MEM_LOCKED // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_LOCKED|{}IMAGE_SCN_MEM_LOCKED[0]
            final fun <get-IMAGE_SCN_MEM_LOCKED>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_LOCKED.<get-IMAGE_SCN_MEM_LOCKED>|<get-IMAGE_SCN_MEM_LOCKED>(){}[0]
        final val IMAGE_SCN_MEM_NOT_CACHED // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_NOT_CACHED|{}IMAGE_SCN_MEM_NOT_CACHED[0]
            final fun <get-IMAGE_SCN_MEM_NOT_CACHED>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_NOT_CACHED.<get-IMAGE_SCN_MEM_NOT_CACHED>|<get-IMAGE_SCN_MEM_NOT_CACHED>(){}[0]
        final val IMAGE_SCN_MEM_NOT_PAGED // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_NOT_PAGED|{}IMAGE_SCN_MEM_NOT_PAGED[0]
            final fun <get-IMAGE_SCN_MEM_NOT_PAGED>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_NOT_PAGED.<get-IMAGE_SCN_MEM_NOT_PAGED>|<get-IMAGE_SCN_MEM_NOT_PAGED>(){}[0]
        final val IMAGE_SCN_MEM_PRELOAD // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_PRELOAD|{}IMAGE_SCN_MEM_PRELOAD[0]
            final fun <get-IMAGE_SCN_MEM_PRELOAD>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_PRELOAD.<get-IMAGE_SCN_MEM_PRELOAD>|<get-IMAGE_SCN_MEM_PRELOAD>(){}[0]
        final val IMAGE_SCN_MEM_PURGEABLE // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_PURGEABLE|{}IMAGE_SCN_MEM_PURGEABLE[0]
            final fun <get-IMAGE_SCN_MEM_PURGEABLE>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_PURGEABLE.<get-IMAGE_SCN_MEM_PURGEABLE>|<get-IMAGE_SCN_MEM_PURGEABLE>(){}[0]
        final val IMAGE_SCN_MEM_READ // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_READ|{}IMAGE_SCN_MEM_READ[0]
            final fun <get-IMAGE_SCN_MEM_READ>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_READ.<get-IMAGE_SCN_MEM_READ>|<get-IMAGE_SCN_MEM_READ>(){}[0]
        final val IMAGE_SCN_MEM_SHARED // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_SHARED|{}IMAGE_SCN_MEM_SHARED[0]
            final fun <get-IMAGE_SCN_MEM_SHARED>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_SHARED.<get-IMAGE_SCN_MEM_SHARED>|<get-IMAGE_SCN_MEM_SHARED>(){}[0]
        final val IMAGE_SCN_MEM_WRITE // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_WRITE|{}IMAGE_SCN_MEM_WRITE[0]
            final fun <get-IMAGE_SCN_MEM_WRITE>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_MEM_WRITE.<get-IMAGE_SCN_MEM_WRITE>|<get-IMAGE_SCN_MEM_WRITE>(){}[0]
        final val IMAGE_SCN_TYPE_NO_PAD // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_TYPE_NO_PAD|{}IMAGE_SCN_TYPE_NO_PAD[0]
            final fun <get-IMAGE_SCN_TYPE_NO_PAD>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.IMAGE_SCN_TYPE_NO_PAD.<get-IMAGE_SCN_TYPE_NO_PAD>|<get-IMAGE_SCN_TYPE_NO_PAD>(){}[0]
        final val ZERO // space.iseki.executables.pe/SectionFlags.Companion.ZERO|{}ZERO[0]
            final fun <get-ZERO>(): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.ZERO.<get-ZERO>|<get-ZERO>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/SectionFlags> // space.iseki.executables.pe/SectionFlags.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe/SectionFlags? // space.iseki.executables.pe/SectionFlags.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe/SectionFlags.Constants|null[0]
        final const val IMAGE_SCN_ALIGN_1024BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_1024BYTES|{}IMAGE_SCN_ALIGN_1024BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_1024BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_1024BYTES.<get-IMAGE_SCN_ALIGN_1024BYTES>|<get-IMAGE_SCN_ALIGN_1024BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_128BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_128BYTES|{}IMAGE_SCN_ALIGN_128BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_128BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_128BYTES.<get-IMAGE_SCN_ALIGN_128BYTES>|<get-IMAGE_SCN_ALIGN_128BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_16BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_16BYTES|{}IMAGE_SCN_ALIGN_16BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_16BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_16BYTES.<get-IMAGE_SCN_ALIGN_16BYTES>|<get-IMAGE_SCN_ALIGN_16BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_1BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_1BYTES|{}IMAGE_SCN_ALIGN_1BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_1BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_1BYTES.<get-IMAGE_SCN_ALIGN_1BYTES>|<get-IMAGE_SCN_ALIGN_1BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_2048BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_2048BYTES|{}IMAGE_SCN_ALIGN_2048BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_2048BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_2048BYTES.<get-IMAGE_SCN_ALIGN_2048BYTES>|<get-IMAGE_SCN_ALIGN_2048BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_256BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_256BYTES|{}IMAGE_SCN_ALIGN_256BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_256BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_256BYTES.<get-IMAGE_SCN_ALIGN_256BYTES>|<get-IMAGE_SCN_ALIGN_256BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_2BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_2BYTES|{}IMAGE_SCN_ALIGN_2BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_2BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_2BYTES.<get-IMAGE_SCN_ALIGN_2BYTES>|<get-IMAGE_SCN_ALIGN_2BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_32BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_32BYTES|{}IMAGE_SCN_ALIGN_32BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_32BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_32BYTES.<get-IMAGE_SCN_ALIGN_32BYTES>|<get-IMAGE_SCN_ALIGN_32BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_4096BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_4096BYTES|{}IMAGE_SCN_ALIGN_4096BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_4096BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_4096BYTES.<get-IMAGE_SCN_ALIGN_4096BYTES>|<get-IMAGE_SCN_ALIGN_4096BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_4BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_4BYTES|{}IMAGE_SCN_ALIGN_4BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_4BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_4BYTES.<get-IMAGE_SCN_ALIGN_4BYTES>|<get-IMAGE_SCN_ALIGN_4BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_512BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_512BYTES|{}IMAGE_SCN_ALIGN_512BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_512BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_512BYTES.<get-IMAGE_SCN_ALIGN_512BYTES>|<get-IMAGE_SCN_ALIGN_512BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_64BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_64BYTES|{}IMAGE_SCN_ALIGN_64BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_64BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_64BYTES.<get-IMAGE_SCN_ALIGN_64BYTES>|<get-IMAGE_SCN_ALIGN_64BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_8192BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_8192BYTES|{}IMAGE_SCN_ALIGN_8192BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_8192BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_8192BYTES.<get-IMAGE_SCN_ALIGN_8192BYTES>|<get-IMAGE_SCN_ALIGN_8192BYTES>(){}[0]
        final const val IMAGE_SCN_ALIGN_8BYTES // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_8BYTES|{}IMAGE_SCN_ALIGN_8BYTES[0]
            final fun <get-IMAGE_SCN_ALIGN_8BYTES>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_ALIGN_8BYTES.<get-IMAGE_SCN_ALIGN_8BYTES>|<get-IMAGE_SCN_ALIGN_8BYTES>(){}[0]
        final const val IMAGE_SCN_CNT_CODE // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_CNT_CODE|{}IMAGE_SCN_CNT_CODE[0]
            final fun <get-IMAGE_SCN_CNT_CODE>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_CNT_CODE.<get-IMAGE_SCN_CNT_CODE>|<get-IMAGE_SCN_CNT_CODE>(){}[0]
        final const val IMAGE_SCN_CNT_INITIALIZED_DATA // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_CNT_INITIALIZED_DATA|{}IMAGE_SCN_CNT_INITIALIZED_DATA[0]
            final fun <get-IMAGE_SCN_CNT_INITIALIZED_DATA>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_CNT_INITIALIZED_DATA.<get-IMAGE_SCN_CNT_INITIALIZED_DATA>|<get-IMAGE_SCN_CNT_INITIALIZED_DATA>(){}[0]
        final const val IMAGE_SCN_CNT_UNINITIALIZED_DATA // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_CNT_UNINITIALIZED_DATA|{}IMAGE_SCN_CNT_UNINITIALIZED_DATA[0]
            final fun <get-IMAGE_SCN_CNT_UNINITIALIZED_DATA>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_CNT_UNINITIALIZED_DATA.<get-IMAGE_SCN_CNT_UNINITIALIZED_DATA>|<get-IMAGE_SCN_CNT_UNINITIALIZED_DATA>(){}[0]
        final const val IMAGE_SCN_GPREL // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_GPREL|{}IMAGE_SCN_GPREL[0]
            final fun <get-IMAGE_SCN_GPREL>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_GPREL.<get-IMAGE_SCN_GPREL>|<get-IMAGE_SCN_GPREL>(){}[0]
        final const val IMAGE_SCN_LNK_COMDAT // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_COMDAT|{}IMAGE_SCN_LNK_COMDAT[0]
            final fun <get-IMAGE_SCN_LNK_COMDAT>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_COMDAT.<get-IMAGE_SCN_LNK_COMDAT>|<get-IMAGE_SCN_LNK_COMDAT>(){}[0]
        final const val IMAGE_SCN_LNK_INFO // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_INFO|{}IMAGE_SCN_LNK_INFO[0]
            final fun <get-IMAGE_SCN_LNK_INFO>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_INFO.<get-IMAGE_SCN_LNK_INFO>|<get-IMAGE_SCN_LNK_INFO>(){}[0]
        final const val IMAGE_SCN_LNK_NRELOC_OVFL // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_NRELOC_OVFL|{}IMAGE_SCN_LNK_NRELOC_OVFL[0]
            final fun <get-IMAGE_SCN_LNK_NRELOC_OVFL>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_NRELOC_OVFL.<get-IMAGE_SCN_LNK_NRELOC_OVFL>|<get-IMAGE_SCN_LNK_NRELOC_OVFL>(){}[0]
        final const val IMAGE_SCN_LNK_OTHER // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_OTHER|{}IMAGE_SCN_LNK_OTHER[0]
            final fun <get-IMAGE_SCN_LNK_OTHER>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_OTHER.<get-IMAGE_SCN_LNK_OTHER>|<get-IMAGE_SCN_LNK_OTHER>(){}[0]
        final const val IMAGE_SCN_LNK_REMOVE // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_REMOVE|{}IMAGE_SCN_LNK_REMOVE[0]
            final fun <get-IMAGE_SCN_LNK_REMOVE>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_LNK_REMOVE.<get-IMAGE_SCN_LNK_REMOVE>|<get-IMAGE_SCN_LNK_REMOVE>(){}[0]
        final const val IMAGE_SCN_MEM_16BIT // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_16BIT|{}IMAGE_SCN_MEM_16BIT[0]
            final fun <get-IMAGE_SCN_MEM_16BIT>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_16BIT.<get-IMAGE_SCN_MEM_16BIT>|<get-IMAGE_SCN_MEM_16BIT>(){}[0]
        final const val IMAGE_SCN_MEM_DISCARDABLE // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_DISCARDABLE|{}IMAGE_SCN_MEM_DISCARDABLE[0]
            final fun <get-IMAGE_SCN_MEM_DISCARDABLE>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_DISCARDABLE.<get-IMAGE_SCN_MEM_DISCARDABLE>|<get-IMAGE_SCN_MEM_DISCARDABLE>(){}[0]
        final const val IMAGE_SCN_MEM_EXECUTE // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_EXECUTE|{}IMAGE_SCN_MEM_EXECUTE[0]
            final fun <get-IMAGE_SCN_MEM_EXECUTE>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_EXECUTE.<get-IMAGE_SCN_MEM_EXECUTE>|<get-IMAGE_SCN_MEM_EXECUTE>(){}[0]
        final const val IMAGE_SCN_MEM_LOCKED // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_LOCKED|{}IMAGE_SCN_MEM_LOCKED[0]
            final fun <get-IMAGE_SCN_MEM_LOCKED>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_LOCKED.<get-IMAGE_SCN_MEM_LOCKED>|<get-IMAGE_SCN_MEM_LOCKED>(){}[0]
        final const val IMAGE_SCN_MEM_NOT_CACHED // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_NOT_CACHED|{}IMAGE_SCN_MEM_NOT_CACHED[0]
            final fun <get-IMAGE_SCN_MEM_NOT_CACHED>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_NOT_CACHED.<get-IMAGE_SCN_MEM_NOT_CACHED>|<get-IMAGE_SCN_MEM_NOT_CACHED>(){}[0]
        final const val IMAGE_SCN_MEM_NOT_PAGED // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_NOT_PAGED|{}IMAGE_SCN_MEM_NOT_PAGED[0]
            final fun <get-IMAGE_SCN_MEM_NOT_PAGED>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_NOT_PAGED.<get-IMAGE_SCN_MEM_NOT_PAGED>|<get-IMAGE_SCN_MEM_NOT_PAGED>(){}[0]
        final const val IMAGE_SCN_MEM_PRELOAD // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_PRELOAD|{}IMAGE_SCN_MEM_PRELOAD[0]
            final fun <get-IMAGE_SCN_MEM_PRELOAD>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_PRELOAD.<get-IMAGE_SCN_MEM_PRELOAD>|<get-IMAGE_SCN_MEM_PRELOAD>(){}[0]
        final const val IMAGE_SCN_MEM_PURGEABLE // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_PURGEABLE|{}IMAGE_SCN_MEM_PURGEABLE[0]
            final fun <get-IMAGE_SCN_MEM_PURGEABLE>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_PURGEABLE.<get-IMAGE_SCN_MEM_PURGEABLE>|<get-IMAGE_SCN_MEM_PURGEABLE>(){}[0]
        final const val IMAGE_SCN_MEM_READ // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_READ|{}IMAGE_SCN_MEM_READ[0]
            final fun <get-IMAGE_SCN_MEM_READ>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_READ.<get-IMAGE_SCN_MEM_READ>|<get-IMAGE_SCN_MEM_READ>(){}[0]
        final const val IMAGE_SCN_MEM_SHARED // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_SHARED|{}IMAGE_SCN_MEM_SHARED[0]
            final fun <get-IMAGE_SCN_MEM_SHARED>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_SHARED.<get-IMAGE_SCN_MEM_SHARED>|<get-IMAGE_SCN_MEM_SHARED>(){}[0]
        final const val IMAGE_SCN_MEM_WRITE // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_WRITE|{}IMAGE_SCN_MEM_WRITE[0]
            final fun <get-IMAGE_SCN_MEM_WRITE>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_MEM_WRITE.<get-IMAGE_SCN_MEM_WRITE>|<get-IMAGE_SCN_MEM_WRITE>(){}[0]
        final const val IMAGE_SCN_TYPE_NO_PAD // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_TYPE_NO_PAD|{}IMAGE_SCN_TYPE_NO_PAD[0]
            final fun <get-IMAGE_SCN_TYPE_NO_PAD>(): kotlin/Int // space.iseki.executables.pe/SectionFlags.Constants.IMAGE_SCN_TYPE_NO_PAD.<get-IMAGE_SCN_TYPE_NO_PAD>|<get-IMAGE_SCN_TYPE_NO_PAD>(){}[0]
    }
}

final value class space.iseki.executables.pe/WindowsSubsystems : kotlin/Comparable<space.iseki.executables.pe/WindowsSubsystems> { // space.iseki.executables.pe/WindowsSubsystems|null[0]
    constructor <init>(kotlin/Short) // space.iseki.executables.pe/WindowsSubsystems.<init>|<init>(kotlin.Short){}[0]

    final val value // space.iseki.executables.pe/WindowsSubsystems.value|{}value[0]
        final fun <get-value>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.value.<get-value>|<get-value>(){}[0]

    final fun compareTo(space.iseki.executables.pe/WindowsSubsystems): kotlin/Int // space.iseki.executables.pe/WindowsSubsystems.compareTo|compareTo(space.iseki.executables.pe.WindowsSubsystems){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // space.iseki.executables.pe/WindowsSubsystems.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // space.iseki.executables.pe/WindowsSubsystems.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // space.iseki.executables.pe/WindowsSubsystems.toString|toString(){}[0]

    final object Companion { // space.iseki.executables.pe/WindowsSubsystems.Companion|null[0]
        final val EFI_APPLICATION // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_APPLICATION|{}EFI_APPLICATION[0]
            final fun <get-EFI_APPLICATION>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_APPLICATION.<get-EFI_APPLICATION>|<get-EFI_APPLICATION>(){}[0]
        final val EFI_BOOT_SERVICE_DRIVER // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_BOOT_SERVICE_DRIVER|{}EFI_BOOT_SERVICE_DRIVER[0]
            final fun <get-EFI_BOOT_SERVICE_DRIVER>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_BOOT_SERVICE_DRIVER.<get-EFI_BOOT_SERVICE_DRIVER>|<get-EFI_BOOT_SERVICE_DRIVER>(){}[0]
        final val EFI_ROM // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_ROM|{}EFI_ROM[0]
            final fun <get-EFI_ROM>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_ROM.<get-EFI_ROM>|<get-EFI_ROM>(){}[0]
        final val EFI_RUNTIME_DRIVER // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_RUNTIME_DRIVER|{}EFI_RUNTIME_DRIVER[0]
            final fun <get-EFI_RUNTIME_DRIVER>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.EFI_RUNTIME_DRIVER.<get-EFI_RUNTIME_DRIVER>|<get-EFI_RUNTIME_DRIVER>(){}[0]
        final val NATIVE // space.iseki.executables.pe/WindowsSubsystems.Companion.NATIVE|{}NATIVE[0]
            final fun <get-NATIVE>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.NATIVE.<get-NATIVE>|<get-NATIVE>(){}[0]
        final val NATIVE_WINDOWS // space.iseki.executables.pe/WindowsSubsystems.Companion.NATIVE_WINDOWS|{}NATIVE_WINDOWS[0]
            final fun <get-NATIVE_WINDOWS>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.NATIVE_WINDOWS.<get-NATIVE_WINDOWS>|<get-NATIVE_WINDOWS>(){}[0]
        final val OS2_CUI // space.iseki.executables.pe/WindowsSubsystems.Companion.OS2_CUI|{}OS2_CUI[0]
            final fun <get-OS2_CUI>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.OS2_CUI.<get-OS2_CUI>|<get-OS2_CUI>(){}[0]
        final val POSIX_CUI // space.iseki.executables.pe/WindowsSubsystems.Companion.POSIX_CUI|{}POSIX_CUI[0]
            final fun <get-POSIX_CUI>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.POSIX_CUI.<get-POSIX_CUI>|<get-POSIX_CUI>(){}[0]
        final val UNKNOWN // space.iseki.executables.pe/WindowsSubsystems.Companion.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
        final val WINDOWS_BOOT_APPLICATION // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_BOOT_APPLICATION|{}WINDOWS_BOOT_APPLICATION[0]
            final fun <get-WINDOWS_BOOT_APPLICATION>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_BOOT_APPLICATION.<get-WINDOWS_BOOT_APPLICATION>|<get-WINDOWS_BOOT_APPLICATION>(){}[0]
        final val WINDOWS_CE_GUI // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_CE_GUI|{}WINDOWS_CE_GUI[0]
            final fun <get-WINDOWS_CE_GUI>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_CE_GUI.<get-WINDOWS_CE_GUI>|<get-WINDOWS_CE_GUI>(){}[0]
        final val WINDOWS_CUI // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_CUI|{}WINDOWS_CUI[0]
            final fun <get-WINDOWS_CUI>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_CUI.<get-WINDOWS_CUI>|<get-WINDOWS_CUI>(){}[0]
        final val WINDOWS_GUI // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_GUI|{}WINDOWS_GUI[0]
            final fun <get-WINDOWS_GUI>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.WINDOWS_GUI.<get-WINDOWS_GUI>|<get-WINDOWS_GUI>(){}[0]
        final val XBOX // space.iseki.executables.pe/WindowsSubsystems.Companion.XBOX|{}XBOX[0]
            final fun <get-XBOX>(): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.XBOX.<get-XBOX>|<get-XBOX>(){}[0]

        final fun serializer(): kotlinx.serialization/KSerializer<space.iseki.executables.pe/WindowsSubsystems> // space.iseki.executables.pe/WindowsSubsystems.Companion.serializer|serializer(){}[0]
        final fun valueOf(kotlin/String): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems.Companion.valueOf|valueOf(kotlin.String){}[0]
        final fun valueOfOrNull(kotlin/String): space.iseki.executables.pe/WindowsSubsystems? // space.iseki.executables.pe/WindowsSubsystems.Companion.valueOfOrNull|valueOfOrNull(kotlin.String){}[0]
    }

    final object Constants { // space.iseki.executables.pe/WindowsSubsystems.Constants|null[0]
        final const val EFI_APPLICATION // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_APPLICATION|{}EFI_APPLICATION[0]
            final fun <get-EFI_APPLICATION>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_APPLICATION.<get-EFI_APPLICATION>|<get-EFI_APPLICATION>(){}[0]
        final const val EFI_BOOT_SERVICE_DRIVER // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_BOOT_SERVICE_DRIVER|{}EFI_BOOT_SERVICE_DRIVER[0]
            final fun <get-EFI_BOOT_SERVICE_DRIVER>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_BOOT_SERVICE_DRIVER.<get-EFI_BOOT_SERVICE_DRIVER>|<get-EFI_BOOT_SERVICE_DRIVER>(){}[0]
        final const val EFI_ROM // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_ROM|{}EFI_ROM[0]
            final fun <get-EFI_ROM>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_ROM.<get-EFI_ROM>|<get-EFI_ROM>(){}[0]
        final const val EFI_RUNTIME_DRIVER // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_RUNTIME_DRIVER|{}EFI_RUNTIME_DRIVER[0]
            final fun <get-EFI_RUNTIME_DRIVER>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.EFI_RUNTIME_DRIVER.<get-EFI_RUNTIME_DRIVER>|<get-EFI_RUNTIME_DRIVER>(){}[0]
        final const val NATIVE // space.iseki.executables.pe/WindowsSubsystems.Constants.NATIVE|{}NATIVE[0]
            final fun <get-NATIVE>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.NATIVE.<get-NATIVE>|<get-NATIVE>(){}[0]
        final const val NATIVE_WINDOWS // space.iseki.executables.pe/WindowsSubsystems.Constants.NATIVE_WINDOWS|{}NATIVE_WINDOWS[0]
            final fun <get-NATIVE_WINDOWS>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.NATIVE_WINDOWS.<get-NATIVE_WINDOWS>|<get-NATIVE_WINDOWS>(){}[0]
        final const val OS2_CUI // space.iseki.executables.pe/WindowsSubsystems.Constants.OS2_CUI|{}OS2_CUI[0]
            final fun <get-OS2_CUI>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.OS2_CUI.<get-OS2_CUI>|<get-OS2_CUI>(){}[0]
        final const val POSIX_CUI // space.iseki.executables.pe/WindowsSubsystems.Constants.POSIX_CUI|{}POSIX_CUI[0]
            final fun <get-POSIX_CUI>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.POSIX_CUI.<get-POSIX_CUI>|<get-POSIX_CUI>(){}[0]
        final const val UNKNOWN // space.iseki.executables.pe/WindowsSubsystems.Constants.UNKNOWN|{}UNKNOWN[0]
            final fun <get-UNKNOWN>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.UNKNOWN.<get-UNKNOWN>|<get-UNKNOWN>(){}[0]
        final const val WINDOWS_BOOT_APPLICATION // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_BOOT_APPLICATION|{}WINDOWS_BOOT_APPLICATION[0]
            final fun <get-WINDOWS_BOOT_APPLICATION>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_BOOT_APPLICATION.<get-WINDOWS_BOOT_APPLICATION>|<get-WINDOWS_BOOT_APPLICATION>(){}[0]
        final const val WINDOWS_CE_GUI // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_CE_GUI|{}WINDOWS_CE_GUI[0]
            final fun <get-WINDOWS_CE_GUI>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_CE_GUI.<get-WINDOWS_CE_GUI>|<get-WINDOWS_CE_GUI>(){}[0]
        final const val WINDOWS_CUI // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_CUI|{}WINDOWS_CUI[0]
            final fun <get-WINDOWS_CUI>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_CUI.<get-WINDOWS_CUI>|<get-WINDOWS_CUI>(){}[0]
        final const val WINDOWS_GUI // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_GUI|{}WINDOWS_GUI[0]
            final fun <get-WINDOWS_GUI>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.WINDOWS_GUI.<get-WINDOWS_GUI>|<get-WINDOWS_GUI>(){}[0]
        final const val XBOX // space.iseki.executables.pe/WindowsSubsystems.Constants.XBOX|{}XBOX[0]
            final fun <get-XBOX>(): kotlin/Short // space.iseki.executables.pe/WindowsSubsystems.Constants.XBOX.<get-XBOX>|<get-XBOX>(){}[0]
    }
}

open class space.iseki.executables.common/CommonFileException : kotlin/RuntimeException { // space.iseki.executables.common/CommonFileException|null[0]
    final val arguments // space.iseki.executables.common/CommonFileException.arguments|{}arguments[0]
        final fun <get-arguments>(): kotlin.collections/List<kotlin/Pair<kotlin/String, kotlin/String>> // space.iseki.executables.common/CommonFileException.arguments.<get-arguments>|<get-arguments>(){}[0]
}

open class space.iseki.executables.common/IOException : kotlin/Exception { // space.iseki.executables.common/IOException|null[0]
    constructor <init>(kotlin/String?) // space.iseki.executables.common/IOException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // space.iseki.executables.common/IOException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // space.iseki.executables.common/IOException.<init>|<init>(kotlin.Throwable?){}[0]
}

open class space.iseki.executables.elf/ElfFileException : space.iseki.executables.common/CommonFileException // space.iseki.executables.elf/ElfFileException|null[0]

open class space.iseki.executables.pe/PEFileException : space.iseki.executables.common/CommonFileException // space.iseki.executables.pe/PEFileException|null[0]

open class space.iseki.executables.sbom/SBomReadingException : kotlin/RuntimeException { // space.iseki.executables.sbom/SBomReadingException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // space.iseki.executables.sbom/SBomReadingException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

final fun (space.iseki.executables.common/FileFormat.Companion).space.iseki.executables.common/detect(kotlin/ByteArray): space.iseki.executables.common/FileFormat<space.iseki.executables.common/OpenedFile>? // space.iseki.executables.common/detect|detect@space.iseki.executables.common.FileFormat.Companion(kotlin.ByteArray){}[0]
final fun (space.iseki.executables.common/FileFormat.Companion).space.iseki.executables.common/detect(kotlin/String): space.iseki.executables.common/FileFormat<space.iseki.executables.common/OpenedFile>? // space.iseki.executables.common/detect|detect@space.iseki.executables.common.FileFormat.Companion(kotlin.String){}[0]
final fun (space.iseki.executables.common/FileFormat.Companion).space.iseki.executables.common/detect(space.iseki.executables.common/DataAccessor): space.iseki.executables.common/FileFormat<space.iseki.executables.common/OpenedFile>? // space.iseki.executables.common/detect|detect@space.iseki.executables.common.FileFormat.Companion(space.iseki.executables.common.DataAccessor){}[0]
final fun (space.iseki.executables.common/FileFormat.Companion).space.iseki.executables.common/open(kotlin/ByteArray): space.iseki.executables.common/OpenedFile? // space.iseki.executables.common/open|open@space.iseki.executables.common.FileFormat.Companion(kotlin.ByteArray){}[0]
final fun (space.iseki.executables.common/FileFormat.Companion).space.iseki.executables.common/open(kotlin/String): space.iseki.executables.common/OpenedFile? // space.iseki.executables.common/open|open@space.iseki.executables.common.FileFormat.Companion(kotlin.String){}[0]
final fun (space.iseki.executables.common/FileFormat.Companion).space.iseki.executables.common/open(space.iseki.executables.common/DataAccessor): space.iseki.executables.common/OpenedFile? // space.iseki.executables.common/open|open@space.iseki.executables.common.FileFormat.Companion(space.iseki.executables.common.DataAccessor){}[0]
final fun (space.iseki.executables.common/FileFormat<*>).space.iseki.executables.common/isElf(): kotlin/Boolean // space.iseki.executables.common/isElf|isElf@space.iseki.executables.common.FileFormat<*>(){}[0]
final fun (space.iseki.executables.common/FileFormat<*>).space.iseki.executables.common/isMacho(): kotlin/Boolean // space.iseki.executables.common/isMacho|isMacho@space.iseki.executables.common.FileFormat<*>(){}[0]
final fun (space.iseki.executables.common/FileFormat<*>).space.iseki.executables.common/isPE(): kotlin/Boolean // space.iseki.executables.common/isPE|isPE@space.iseki.executables.common.FileFormat<*>(){}[0]
final fun (space.iseki.executables.macho/MachoMagic).space.iseki.executables.macho/is64Bit(): kotlin/Boolean // space.iseki.executables.macho/is64Bit|is64Bit@space.iseki.executables.macho.MachoMagic(){}[0]
final fun (space.iseki.executables.macho/MachoMagic).space.iseki.executables.macho/isLittleEndian(): kotlin/Boolean // space.iseki.executables.macho/isLittleEndian|isLittleEndian@space.iseki.executables.macho.MachoMagic(){}[0]
final fun (space.iseki.executables.macho/MachoMagic).space.iseki.executables.macho/isValid(): kotlin/Boolean // space.iseki.executables.macho/isValid|isValid@space.iseki.executables.macho.MachoMagic(){}[0]
final fun (space.iseki.executables.pe/ResourceNode).space.iseki.executables.pe/walk(): kotlin.sequences/Sequence<space.iseki.executables.pe/ResourceWalkEntry> // space.iseki.executables.pe/walk|walk@space.iseki.executables.pe.ResourceNode(){}[0]
final fun space.iseki.executables.common/FileFormat(kotlin/String): space.iseki.executables.common/FileFormat<*> // space.iseki.executables.common/FileFormat|FileFormat(kotlin.String){}[0]
final fun space.iseki.executables.elf/ElfClass(kotlin/UByte): space.iseki.executables.elf/ElfClass // space.iseki.executables.elf/ElfClass|ElfClass(kotlin.UByte){}[0]
final fun space.iseki.executables.elf/ElfData(kotlin/UByte): space.iseki.executables.elf/ElfData // space.iseki.executables.elf/ElfData|ElfData(kotlin.UByte){}[0]
final fun space.iseki.executables.elf/ElfMachine(kotlin/UShort): space.iseki.executables.elf/ElfMachine // space.iseki.executables.elf/ElfMachine|ElfMachine(kotlin.UShort){}[0]
final fun space.iseki.executables.elf/ElfOsAbi(kotlin/UByte): space.iseki.executables.elf/ElfOsAbi // space.iseki.executables.elf/ElfOsAbi|ElfOsAbi(kotlin.UByte){}[0]
final fun space.iseki.executables.elf/ElfPFlags(kotlin/UInt): space.iseki.executables.elf/ElfPFlags // space.iseki.executables.elf/ElfPFlags|ElfPFlags(kotlin.UInt){}[0]
final fun space.iseki.executables.elf/ElfPType(kotlin/UInt): space.iseki.executables.elf/ElfPType // space.iseki.executables.elf/ElfPType|ElfPType(kotlin.UInt){}[0]
final fun space.iseki.executables.elf/ElfSFlags(kotlin/ULong): space.iseki.executables.elf/ElfSFlags // space.iseki.executables.elf/ElfSFlags|ElfSFlags(kotlin.ULong){}[0]
final fun space.iseki.executables.elf/ElfSType(kotlin/UInt): space.iseki.executables.elf/ElfSType // space.iseki.executables.elf/ElfSType|ElfSType(kotlin.UInt){}[0]
final fun space.iseki.executables.elf/ElfSymBinding(kotlin/UByte): space.iseki.executables.elf/ElfSymBinding // space.iseki.executables.elf/ElfSymBinding|ElfSymBinding(kotlin.UByte){}[0]
final fun space.iseki.executables.elf/ElfSymType(kotlin/UByte): space.iseki.executables.elf/ElfSymType // space.iseki.executables.elf/ElfSymType|ElfSymType(kotlin.UByte){}[0]
final fun space.iseki.executables.elf/ElfSymVisibility(kotlin/UByte): space.iseki.executables.elf/ElfSymVisibility // space.iseki.executables.elf/ElfSymVisibility|ElfSymVisibility(kotlin.UByte){}[0]
final fun space.iseki.executables.elf/ElfType(kotlin/UShort): space.iseki.executables.elf/ElfType // space.iseki.executables.elf/ElfType|ElfType(kotlin.UShort){}[0]
final fun space.iseki.executables.macho/MachoFileType(kotlin/UInt): space.iseki.executables.macho/MachoFileType // space.iseki.executables.macho/MachoFileType|MachoFileType(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoFlags(kotlin/UInt): space.iseki.executables.macho/MachoFlags // space.iseki.executables.macho/MachoFlags|MachoFlags(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoLoadCommandType(kotlin/UInt): space.iseki.executables.macho/MachoLoadCommandType // space.iseki.executables.macho/MachoLoadCommandType|MachoLoadCommandType(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoMagic(kotlin/UInt): space.iseki.executables.macho/MachoMagic // space.iseki.executables.macho/MachoMagic|MachoMagic(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoSectionAttributes(kotlin/UInt): space.iseki.executables.macho/MachoSectionAttributes // space.iseki.executables.macho/MachoSectionAttributes|MachoSectionAttributes(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoSectionType(kotlin/UInt): space.iseki.executables.macho/MachoSectionType // space.iseki.executables.macho/MachoSectionType|MachoSectionType(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoSegmentFlag(kotlin/UInt): space.iseki.executables.macho/MachoSegmentFlag // space.iseki.executables.macho/MachoSegmentFlag|MachoSegmentFlag(kotlin.UInt){}[0]
final fun space.iseki.executables.macho/MachoSymbolDescFlags(kotlin/UShort): space.iseki.executables.macho/MachoSymbolDescFlags // space.iseki.executables.macho/MachoSymbolDescFlags|MachoSymbolDescFlags(kotlin.UShort){}[0]
final fun space.iseki.executables.macho/MachoSymbolType(kotlin/UByte): space.iseki.executables.macho/MachoSymbolType // space.iseki.executables.macho/MachoSymbolType|MachoSymbolType(kotlin.UByte){}[0]
final fun space.iseki.executables.macho/MachoVMProt(kotlin/UInt): space.iseki.executables.macho/MachoVMProt // space.iseki.executables.macho/MachoVMProt|MachoVMProt(kotlin.UInt){}[0]
final fun space.iseki.executables.pe.vi/FileInfoFlags(kotlin/UInt): space.iseki.executables.pe.vi/FileInfoFlags // space.iseki.executables.pe.vi/FileInfoFlags|FileInfoFlags(kotlin.UInt){}[0]
final fun space.iseki.executables.pe.vi/FileOs(kotlin/UInt): space.iseki.executables.pe.vi/FileOs // space.iseki.executables.pe.vi/FileOs|FileOs(kotlin.UInt){}[0]
final fun space.iseki.executables.pe.vi/FileType(kotlin/UInt): space.iseki.executables.pe.vi/FileType // space.iseki.executables.pe.vi/FileType|FileType(kotlin.UInt){}[0]
final fun space.iseki.executables.pe.vi/parseVersionData(kotlin/ByteArray, kotlin/Int): space.iseki.executables.pe.vi/PEVersionInfo // space.iseki.executables.pe.vi/parseVersionData|parseVersionData(kotlin.ByteArray;kotlin.Int){}[0]
final fun space.iseki.executables.pe/Characteristics(kotlin/UShort): space.iseki.executables.pe/Characteristics // space.iseki.executables.pe/Characteristics|Characteristics(kotlin.UShort){}[0]
final fun space.iseki.executables.pe/DllCharacteristics(kotlin/UShort): space.iseki.executables.pe/DllCharacteristics // space.iseki.executables.pe/DllCharacteristics|DllCharacteristics(kotlin.UShort){}[0]
final fun space.iseki.executables.pe/MachineType(kotlin/UShort): space.iseki.executables.pe/MachineType // space.iseki.executables.pe/MachineType|MachineType(kotlin.UShort){}[0]
final fun space.iseki.executables.pe/SectionFlags(kotlin/UInt): space.iseki.executables.pe/SectionFlags // space.iseki.executables.pe/SectionFlags|SectionFlags(kotlin.UInt){}[0]
final fun space.iseki.executables.pe/WindowsSubsystems(kotlin/UShort): space.iseki.executables.pe/WindowsSubsystems // space.iseki.executables.pe/WindowsSubsystems|WindowsSubsystems(kotlin.UShort){}[0]
final inline fun (kotlin/Int).space.iseki.executables.common/toAddr(): space.iseki.executables.common/Address32 // space.iseki.executables.common/toAddr|toAddr@kotlin.Int(){}[0]
final inline fun (kotlin/Long).space.iseki.executables.common/toAddr(): space.iseki.executables.common/Address64 // space.iseki.executables.common/toAddr|toAddr@kotlin.Long(){}[0]
final inline fun (kotlin/UInt).space.iseki.executables.common/toAddr(): space.iseki.executables.common/Address32 // space.iseki.executables.common/toAddr|toAddr@kotlin.UInt(){}[0]
final inline fun (kotlin/ULong).space.iseki.executables.common/toAddr(): space.iseki.executables.common/Address64 // space.iseki.executables.common/toAddr|toAddr@kotlin.ULong(){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readAtMost(space.iseki.executables.common/Address32, kotlin/ByteArray): kotlin/Int // space.iseki.executables.common/readAtMost|readAtMost@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address32;kotlin.ByteArray){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readAtMost(space.iseki.executables.common/Address32, kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/Int // space.iseki.executables.common/readAtMost|readAtMost@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address32;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readAtMost(space.iseki.executables.common/Address64, kotlin/ByteArray): kotlin/Int // space.iseki.executables.common/readAtMost|readAtMost@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address64;kotlin.ByteArray){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readAtMost(space.iseki.executables.common/Address64, kotlin/ByteArray, kotlin/Int, kotlin/Int): kotlin/Int // space.iseki.executables.common/readAtMost|readAtMost@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address64;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readFully(space.iseki.executables.common/Address32, kotlin/ByteArray) // space.iseki.executables.common/readFully|readFully@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address32;kotlin.ByteArray){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readFully(space.iseki.executables.common/Address32, kotlin/ByteArray, kotlin/Int, kotlin/Int) // space.iseki.executables.common/readFully|readFully@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address32;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readFully(space.iseki.executables.common/Address64, kotlin/ByteArray) // space.iseki.executables.common/readFully|readFully@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address64;kotlin.ByteArray){}[0]
final inline fun (space.iseki.executables.common/DataAccessor).space.iseki.executables.common/readFully(space.iseki.executables.common/Address64, kotlin/ByteArray, kotlin/Int, kotlin/Int) // space.iseki.executables.common/readFully|readFully@space.iseki.executables.common.DataAccessor(space.iseki.executables.common.Address64;kotlin.ByteArray;kotlin.Int;kotlin.Int){}[0]
final inline fun space.iseki.executables.common/Address32(kotlin/Int): space.iseki.executables.common/Address32 // space.iseki.executables.common/Address32|Address32(kotlin.Int){}[0]
final inline fun space.iseki.executables.common/Address32Array(kotlin/Int, kotlin/Function1<kotlin/Int, space.iseki.executables.common/Address32>): space.iseki.executables.common/Address32Array // space.iseki.executables.common/Address32Array|Address32Array(kotlin.Int;kotlin.Function1<kotlin.Int,space.iseki.executables.common.Address32>){}[0]
final inline fun space.iseki.executables.common/Address64(kotlin/Int): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64|Address64(kotlin.Int){}[0]
final inline fun space.iseki.executables.common/Address64(kotlin/Long): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64|Address64(kotlin.Long){}[0]
final inline fun space.iseki.executables.common/Address64(kotlin/UInt): space.iseki.executables.common/Address64 // space.iseki.executables.common/Address64|Address64(kotlin.UInt){}[0]
final inline fun space.iseki.executables.common/Address64Array(kotlin/Int, kotlin/Function1<kotlin/Int, space.iseki.executables.common/Address64>): space.iseki.executables.common/Address64Array // space.iseki.executables.common/Address64Array|Address64Array(kotlin.Int;kotlin.Function1<kotlin.Int,space.iseki.executables.common.Address64>){}[0]
